//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resource {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Olap101 {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Olap101() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Olap101.Localization.Olap101", typeof(Olap101).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export to XLSX.
        /// </summary>
        public static string BTN_Export_to_XLSX {
            get {
                return ResourceManager.GetString("BTN_Export_to_XLSX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load View.
        /// </summary>
        public static string BTN_Load_View {
            get {
                return ResourceManager.GetString("BTN_Load_View", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save View.
        /// </summary>
        public static string BTN_Save_View {
            get {
                return ResourceManager.GetString("BTN_Save_View", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyze Huge Data.
        /// </summary>
        public static string TXT_Analyze_Huge_Data {
            get {
                return ResourceManager.GetString("TXT_Analyze_Huge_Data", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, the PivotEngine component binds to a DataEngine service. The DataEngine web api is responsible for data aggregation when the OLAP control binds to DataEngine service. DataEngine Web API uses a column-oriented data model which is widely used in many open source and commercial analytical databases and libraries. Data Engine can handle up to hundreds of millions records in a fraction of a second. The service url should be provided to the PivotEngine in this mode..
        /// </summary>
        public static string TXT_Analyze_Huge_Data_0 {
            get {
                return ResourceManager.GetString("TXT_Analyze_Huge_Data_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may host DataEngine WebAPI separately or within the same MVC application.&lt;br /&gt;To create and host DataEngine Web API separately, please refer the Web API &lt;a href=&quot;https://developer.mescius.com/componentone/docs/mvc/online-mvc/overview.html&quot;&gt;documentation&lt;/a&gt;.&lt;br /&gt;To use DataEngine in the same MVC project, ensure the following:&lt;br /&gt;.
        /// </summary>
        public static string TXT_Analyze_Huge_Data_1 {
            get {
                return ResourceManager.GetString("TXT_Analyze_Huge_Data_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MVC application should support Web API..
        /// </summary>
        public static string TXT_Analyze_Huge_Data_2 {
            get {
                return ResourceManager.GetString("TXT_Analyze_Huge_Data_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add DataEngine WebAPI to the application from MESCIUS NuGet source..
        /// </summary>
        public static string TXT_Analyze_Huge_Data_3 {
            get {
                return ResourceManager.GetString("TXT_Analyze_Huge_Data_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Register the DataEngine in the Owin Startup.cs class to import the data. Please refer the Startup.cs code in the below example..
        /// </summary>
        public static string TXT_Analyze_Huge_Data_4 {
            get {
                return ResourceManager.GetString("TXT_Analyze_Huge_Data_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, the PivotEngine component connects the DataEngine data. The PivotPanel control and the PivotGrid control are bound to the PivotEngine. You can change the view definition in the PivotPanel control. The aggregated data will be obtained from the service. Then the PivotGrid control displays the aggregated data. You can find the detailed raw data shown in a grid by double-clicking a cell in the PivotGrid control..
        /// </summary>
        public static string TXT_Analyze_Huge_Data_5 {
            get {
                return ResourceManager.GetString("TXT_Analyze_Huge_Data_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart Type:.
        /// </summary>
        public static string TXT_ChartType {
            get {
                return ResourceManager.GetString("TXT_ChartType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure the PivotPanel Properties.
        /// </summary>
        public static string TXT_Configure_PivotPanel {
            get {
                return ResourceManager.GetString("TXT_Configure_PivotPanel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PivotPanel control has properties that allow you to customize the view. Use the controls below to modify the values of some of these properties and see their effect..
        /// </summary>
        public static string TXT_Configure_PivotPanel_0 {
            get {
                return ResourceManager.GetString("TXT_Configure_PivotPanel_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customize the PivotGrid Cells.
        /// </summary>
        public static string TXT_Customize {
            get {
                return ResourceManager.GetString("TXT_Customize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;PivotGrid&lt;/b&gt; control extends the &lt;b&gt;FlexGrid&lt;/b&gt; control, so you can customize the display of the grid cells using the &lt;b&gt;ItemFormatter&lt;/b&gt; event and modify the content of each cell with flexibility..
        /// </summary>
        public static string TXT_Customize_0 {
            get {
                return ResourceManager.GetString("TXT_Customize_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For example, the &lt;b&gt;PivotGrid&lt;/b&gt; control below uses colors and icons, similar to the ones in Microsoft Excel&apos;s icon sets, to show how sales changed from quarter to quarter..
        /// </summary>
        public static string TXT_Customize_1 {
            get {
                return ResourceManager.GetString("TXT_Customize_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export the Results to Excel.
        /// </summary>
        public static string TXT_Export {
            get {
                return ResourceManager.GetString("TXT_Export", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;PivotGrid&lt;/b&gt; control extends the &lt;b&gt;FlexGrid&lt;/b&gt; control, so you can export it to any of the formats supported by the extension modules provided with the &lt;b&gt;FlexGrid&lt;/b&gt;. The list of the supported formats includes .xlsx, .csv, and .pdf..
        /// </summary>
        public static string TXT_Export_0 {
            get {
                return ResourceManager.GetString("TXT_Export_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For example, clicking the button below creates an Excel file with three sheets: the current view, a transposed version of the current view, and the raw data..
        /// </summary>
        public static string TXT_Export_1 {
            get {
                return ResourceManager.GetString("TXT_Export_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlexGrid.
        /// </summary>
        public static string TXT_FlexGrid {
            get {
                return ResourceManager.GetString("TXT_FlexGrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Getting Started.
        /// </summary>
        public static string TXT_Getting_Started {
            get {
                return ResourceManager.GetString("TXT_Getting_Started", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;C1.Web.Mvc.Olap&lt;/b&gt; assembly contains controls that allow you to add Excel-like pivot table and pivot chart features to your ASP.NET MVC applications..
        /// </summary>
        public static string TXT_Getting_Started_0 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steps for getting started with the Olap module in MVC applications are as follows:.
        /// </summary>
        public static string TXT_Getting_Started_1 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new MVC project using the C1 ASP.NET MVC application template, in Visual Studio IDE..
        /// </summary>
        public static string TXT_Getting_Started_2 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a controller and a corresponding view to the project..
        /// </summary>
        public static string TXT_Getting_Started_3 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize the &lt;b&gt;PivotEngine&lt;/b&gt; control in the view using razor syntax..
        /// </summary>
        public static string TXT_Getting_Started_4 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &lt;b&gt;Bind&lt;/b&gt; method to bind an array containing the raw data that you want to analyze..
        /// </summary>
        public static string TXT_Getting_Started_5 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize a &lt;b&gt;PivotPanel&lt;/b&gt; control and set its &lt;b&gt;ItemsSourceId&lt;/b&gt; property to the &lt;b&gt;PivotEngine&lt;/b&gt; control if you want to customize the view definition.
        /// </summary>
        public static string TXT_Getting_Started_6 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add one or more &lt;b&gt;PivotGrid&lt;/b&gt; and &lt;b&gt;PivotChart&lt;/b&gt; controls to the page, and connect them to the &lt;b&gt;PivotEngine&lt;/b&gt; by setting their &lt;b&gt;ItemsSourceId&lt;/b&gt; property to the &lt;b&gt;PivotEngine&lt;/b&gt; control or the &lt;b&gt;PivotPanel&lt;/b&gt; control..
        /// </summary>
        public static string TXT_Getting_Started_7 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will display a list of available fields in the &lt;b&gt;PivotPanel&lt;/b&gt;, and users will be able to drag fields between summary areas to generate data summaries (also known as &quot;views&quot;). Users can also configure the fields by setting their headers, summary functions, filters, and formats..
        /// </summary>
        public static string TXT_Getting_Started_8 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Users can analyze the data and print the results, export them to XLSX or PDF, and save the view definitions to be re-used later..
        /// </summary>
        public static string TXT_Getting_Started_9 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PivotGrid.
        /// </summary>
        public static string TXT_PivotGrid {
            get {
                return ResourceManager.GetString("TXT_PivotGrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Result (live):.
        /// </summary>
        public static string TXT_Result {
            get {
                return ResourceManager.GetString("TXT_Result", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Here is a simple example..
        /// </summary>
        public static string TXT_Sample {
            get {
                return ResourceManager.GetString("TXT_Sample", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding a PivotEngine, a PivotPanel and a PivotGrid to the page.
        /// </summary>
        public static string TXT_Sample_0 {
            get {
                return ResourceManager.GetString("TXT_Sample_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;PivotPanel&lt;/b&gt; control is similar to Microsoft Excel&apos;s &quot;Field List&quot; window, which is associated with pivot tables and charts..
        /// </summary>
        public static string TXT_Sample_1 {
            get {
                return ResourceManager.GetString("TXT_Sample_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add fields to the view by dragging or using checkboxes..
        /// </summary>
        public static string TXT_Sample_2 {
            get {
                return ResourceManager.GetString("TXT_Sample_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove fields from the view by dragging them back to the top area, or by using their context menu..
        /// </summary>
        public static string TXT_Sample_3 {
            get {
                return ResourceManager.GetString("TXT_Sample_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure the fields by using their context menu. You can modify their header, summary function, and format. Note that the format is used while grouping the data. For instance, you can group the data by day, month, quarter or year by changing the format of the date fields ..
        /// </summary>
        public static string TXT_Sample_4 {
            get {
                return ResourceManager.GetString("TXT_Sample_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;PivotGrid&lt;/b&gt; control extends the &lt;b&gt;FlexGrid&lt;/b&gt; control to support pivoting features. These include custom cell merging, hierarchical row and column groups, and a custom context menu, which allows users to configure the pivot fields and to drill-down into the data items that were used in the computation of specific summary cells..
        /// </summary>
        public static string TXT_Sample_5 {
            get {
                return ResourceManager.GetString("TXT_Sample_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save and Load Views.
        /// </summary>
        public static string TXT_Save_And_Load {
            get {
                return ResourceManager.GetString("TXT_Save_And_Load", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use the &lt;b&gt;viewDefinition&lt;/b&gt; property to save and restore view definitions, as shown in the following example:.
        /// </summary>
        public static string TXT_Save_And_Load_0 {
            get {
                return ResourceManager.GetString("TXT_Save_And_Load_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By using the &lt;b&gt;viewDefinition&lt;/b&gt; property, you can also build a list of pre-defined views for the user to pick from, as shown in the following example:.
        /// </summary>
        public static string TXT_Save_And_Load_1 {
            get {
                return ResourceManager.GetString("TXT_Save_And_Load_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show the Results in a PivotChart.
        /// </summary>
        public static string TXT_ShowResult_PivotChart {
            get {
                return ResourceManager.GetString("TXT_ShowResult_PivotChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;strong&gt;PivotChart&lt;/strong&gt; control provides a graphical visualization of the results. It is similar to Microsoft Excel&apos;s pivot charts, and includes support for multiple chart types and hierarchical axes..
        /// </summary>
        public static string TXT_ShowResult_PivotChart_0 {
            get {
                return ResourceManager.GetString("TXT_ShowResult_PivotChart_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To use the &lt;strong&gt;PivotChart&lt;/strong&gt; control, connect it to a &lt;strong&gt;PivotPanel&lt;/strong&gt; or &lt;strong&gt;PivotEngine&lt;/strong&gt; using the &lt;strong&gt;ItemsSourceId&lt;/strong&gt; property..
        /// </summary>
        public static string TXT_ShowResult_PivotChart_1 {
            get {
                return ResourceManager.GetString("TXT_ShowResult_PivotChart_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to View and Edit the Source Data.
        /// </summary>
        public static string TXT_View_Edit_Source {
            get {
                return ResourceManager.GetString("TXT_View_Edit_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following pivot view is live. If you edit any of the 10,000 items, the pivot view will be updated automatically..
        /// </summary>
        public static string TXT_View_Edit_Source_0 {
            get {
                return ResourceManager.GetString("TXT_View_Edit_Source_0", resourceCulture);
            }
        }
    }
}
