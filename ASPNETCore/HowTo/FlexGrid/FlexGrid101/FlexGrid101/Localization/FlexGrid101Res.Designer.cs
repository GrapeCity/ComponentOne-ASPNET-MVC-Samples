//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlexGrid101.Localization {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class FlexGrid101Res {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FlexGrid101Res() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FlexGrid101.Localization.FlexGrid101Res", typeof(FlexGrid101Res).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Getting Started example did not define any columns, so FlexGrid generated them
        ///            automatically..
        /// </summary>
        public static string Column_Definitions_Description_Text0 {
            get {
                return ResourceManager.GetString("Column_Definitions_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example shows how you can define the columns using the FlexGrid&apos;s &lt;b&gt;Columns&lt;/b&gt; property..
        /// </summary>
        public static string Column_Definitions_Description_Text1 {
            get {
                return ResourceManager.GetString("Column_Definitions_Description_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifying the columns allows you to choose which columns to show, and in what order.
        ///            This also gives you control over each column&amp;#39;s Width, Heading, Formatting, Alignment,
        ///            and other properties..
        /// </summary>
        public static string Column_Definitions_Description_Text2 {
            get {
                return ResourceManager.GetString("Column_Definitions_Description_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this case, we use star sizing to set the width of the &quot;Country&quot; column. This tells the
        ///            column to stretch to fill the available width of the grid so there is no empty space. On
        ///            the &quot;Amount&quot; column, we set the format property to &quot;n0&quot;,  which results in numbers with thousand separators and no decimal digits. On
        ///            the &quot;Discount&quot; column, we set the format property to &quot;p0&quot;, which results in numbers with
        ///            percentage and no decimal digits..
        /// </summary>
        public static string Column_Definitions_Description_Text3 {
            get {
                return ResourceManager.GetString("Column_Definitions_Description_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Column Definitions.
        /// </summary>
        public static string Column_Definitions_Text0 {
            get {
                return ResourceManager.GetString("Column_Definitions_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlexGrid has an &lt;b&gt;ItemFormatter&lt;/b&gt; property that gives you complete control over
        ///            the contents of the cells..
        /// </summary>
        public static string Conditional_Styling_Description_Text0 {
            get {
                return ResourceManager.GetString("Conditional_Styling_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example uses a JavaScript function to create value ranges that return named
        ///            colors. We then call this function in the FlexGrid&apos;s &lt;b&gt;ItemFormatter&lt;/b&gt; and pass the cell&apos;s data
        ///            in order to conditionally set the cell&apos;s foreground color..
        /// </summary>
        public static string Conditional_Styling_Description_Text1 {
            get {
                return ResourceManager.GetString("Conditional_Styling_Description_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional Styling.
        /// </summary>
        public static string Conditional_Styling_Text0 {
            get {
                return ResourceManager.GetString("Conditional_Styling_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlexGrid has built-in support for fast, in-cell editing like you find in Excel. There is no
        ///            need to add extra columns with Edit buttons that switch between display and edit modes..
        /// </summary>
        public static string Editing_Description_Text0 {
            get {
                return ResourceManager.GetString("Editing_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Users can start editing by typing into any cell. This puts the cell in quick-edit mode.
        ///            In this mode, pressing a cursor key finishes the editing and moves the selection to a different cell..
        /// </summary>
        public static string Editing_Description_Text1 {
            get {
                return ResourceManager.GetString("Editing_Description_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another way to start editing is by pressing F2 or by clicking a cell twice. This puts the cell in
        ///            full-edit mode. In this mode, pressing a cursor key moves the caret within the cell text.
        ///            To finish editing and move to another cell, the user must press the Enter, Tab, or Escape key..
        /// </summary>
        public static string Editing_Description_Text2 {
            get {
                return ResourceManager.GetString("Editing_Description_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data is automatically coerced to the proper type when editing finishes. If the user enters invalid
        ///            data, the edit is cancelled and the original data remains in place..
        /// </summary>
        public static string Editing_Description_Text3 {
            get {
                return ResourceManager.GetString("Editing_Description_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are two modes for updating the data to the server..
        /// </summary>
        public static string Editing_Description_Text4 {
            get {
                return ResourceManager.GetString("Editing_Description_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, the update operation will be commit to the server once finishing editing.
        ///                &lt;p&gt;
        ///                    &lt;b&gt;Notices:&lt;/b&gt;
        ///                    If the user wants to commit the update operation to the datasource server, the Update, Delete or Create action url should be provided.
        ///                    And the corresponding codes used to update the datasource should be written in the corresponding action.
        ///                &lt;/p&gt;.
        /// </summary>
        public static string Editing_Description_Text5 {
            get {
                return ResourceManager.GetString("Editing_Description_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The other mode is called BatchEdit. The user can update, create or remove multiple items.
        ///                Once these modifications are confirmed, They could be commit to the data source only once. 
        ///                Now these modifications can be commit by the commit method of CollectionView in client side.
        ///                The user can also commit them by sorting, paging or filtering behavior.
        ///                &lt;p&gt;
        ///                    &lt;b&gt;Notices:&lt;/b&gt;
        ///                     In this mode, the BatchEdit action [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Editing_Description_Text6 {
            get {
                return ResourceManager.GetString("Editing_Description_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can disable editing at the Grid, Column, or Row levels using the &lt;b&gt;IsReadOnly&lt;/b&gt; property of the
        ///            Grid, Column, or Row objects. In this example, we make the ID column read-only..
        /// </summary>
        public static string Editing_Description_Text7 {
            get {
                return ResourceManager.GetString("Editing_Description_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Editing.
        /// </summary>
        public static string Editing_Text0 {
            get {
                return ResourceManager.GetString("Editing_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexGrid supports filtering through the &lt;b&gt;Filterable&lt;/b&gt; property. To enable filtering, set the &lt;b&gt;Filterable(fl =&gt; fl.ColumnFilters()&lt;/b&gt; property..
        /// </summary>
        public static string Filtering_Description_Text0 {
            get {
                return ResourceManager.GetString("Filtering_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, we create a filter for the ID, Country, Product, Color, Start and get the filter value from the input control.
        ///        &lt;/p&gt;.
        /// </summary>
        public static string Filtering_Description_Text1 {
            get {
                return ResourceManager.GetString("Filtering_Description_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filtering.
        /// </summary>
        public static string Filtering_Text0 {
            get {
                return ResourceManager.GetString("Filtering_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Getting Started.
        /// </summary>
        public static string Getting_Started_Text0 {
            get {
                return ResourceManager.GetString("Getting_Started_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group by.
        /// </summary>
        public static string Group_By_Text0 {
            get {
                return ResourceManager.GetString("Group_By_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlexGrid supports grouping of client side data, set the &lt;b&gt;GroupBy&lt;/b&gt; property to a column name for grouping the data according to a column..
        /// </summary>
        public static string Grouping_Desription_Text0 {
            get {
                return ResourceManager.GetString("Grouping_Desription_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internally, FlexGrid supports grouping through the client side &lt;b&gt;IItemsSource&lt;/b&gt; interface. To enable grouping at client side, add one or more &lt;b&gt;GroupDescription&lt;/b&gt; objects to the
        ///            &lt;b&gt;itemsSource.groupDescriptions&lt;/b&gt; property. It is easy to let the grid grouped by some field by calling the method GroupBy of FlexGridBuilder with the corresponding field name. And ensure that the grid&apos;s &lt;b&gt;ShowGroups&lt;/b&gt; property
        ///            is set to true (the default value).
        ///            &lt;b&gt;GroupDescription [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Grouping_Desription_Text1 {
            get {
                return ResourceManager.GetString("Grouping_Desription_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Notice that the &quot;Amount&quot; column displays the totals in the group rows. We do this by
        ///            setting the column&apos;s &lt;b&gt;Aggregate&lt;/b&gt; property to &quot;Sum.&quot; The aggregate is automatically
        ///            updated when you edit the values in the column..
        /// </summary>
        public static string Grouping_Desription_Text2 {
            get {
                return ResourceManager.GetString("Grouping_Desription_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Grouping.
        /// </summary>
        public static string Grouping_Text0 {
            get {
                return ResourceManager.GetString("Grouping_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, FlexGrid allows you to enter empty values in columns of type string,
        ///            and will not allow empty/null values in columns of any other type..
        /// </summary>
        public static string Handling_Null_Values_Des_Text0 {
            get {
                return ResourceManager.GetString("Handling_Null_Values_Des_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can change this behavior using the &lt;b&gt;IsRequired&lt;/b&gt; property on grid columns.
        ///            If you set the &lt;b&gt;IsRequired&lt;/b&gt; property to false, the grid will allow you to
        ///            enter empty values in that column, regardless of type. Conversely, if you set
        ///            the &lt;b&gt;IsRequired&lt;/b&gt; property to true, the grid will not allow empty values
        ///            even in string columns..
        /// </summary>
        public static string Handling_Null_Values_Des_Text1 {
            get {
                return ResourceManager.GetString("Handling_Null_Values_Des_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting &lt;b&gt;IsRequired&lt;/b&gt; to null reverts to the default behavior (nulls allowed
        ///            only in string columns)..
        /// </summary>
        public static string Handling_Null_Values_Des_Text2 {
            get {
                return ResourceManager.GetString("Handling_Null_Values_Des_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The grid below reverts the default behavior. It sets &lt;b&gt;IsRequired&lt;/b&gt; to false
        ///            for the first column, and to true for all others. You can delete content that
        ///            is not required by entering an empty string or simply by pressing the delete
        ///            key..
        /// </summary>
        public static string Handling_Null_Values_Des_Text3 {
            get {
                return ResourceManager.GetString("Handling_Null_Values_Des_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Handling null values.
        /// </summary>
        public static string Handling_Null_Values_Text0 {
            get {
                return ResourceManager.GetString("Handling_Null_Values_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will create a FlexGrid with default behavior, which includes
        ///            automatic column generation, column sorting and reordering, editing,
        ///            and clipboard support..
        /// </summary>
        public static string Overview_Description_Text0 {
            get {
                return ResourceManager.GetString("Overview_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steps for getting started with the FlexGrid control in MVC applications are as follows:.
        /// </summary>
        public static string Overview_Step_Title_Text0 {
            get {
                return ResourceManager.GetString("Overview_Step_Title_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new MVC project using the C1 ASP.NET MVC application template, in Visual Studio IDE..
        /// </summary>
        public static string Overview_Step1_Text0 {
            get {
                return ResourceManager.GetString("Overview_Step1_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a controller and the corresponding view to the project..
        /// </summary>
        public static string Overview_Step2_Text0 {
            get {
                return ResourceManager.GetString("Overview_Step2_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize the FlexGrid control in view using razor syntax..
        /// </summary>
        public static string Overview_Step3_Text0 {
            get {
                return ResourceManager.GetString("Overview_Step3_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Optional) Add an appropriate CSS to customize the appearance of FlexGrid control..
        /// </summary>
        public static string Overview_Step4_Text0 {
            get {
                return ResourceManager.GetString("Overview_Step4_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexGrid supports paging through the &lt;b&gt;Pager&lt;/b&gt; control. To enable paging, set the &lt;b&gt;PageSize&lt;/b&gt; property to the number
        ///            of items you want on each page, and use Pager control to bind this FlexGrid..
        /// </summary>
        public static string Paging_Description_Text0 {
            get {
                return ResourceManager.GetString("Paging_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, we set &lt;b&gt;PageSize&lt;/b&gt; to show 10 items per page. We add Pager control and set &lt;b&gt;Owner&lt;/b&gt; Property to the FlexGrid id,
        ///            then we can switch pages..
        /// </summary>
        public static string Paging_Description_Text1 {
            get {
                return ResourceManager.GetString("Paging_Description_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paging.
        /// </summary>
        public static string Paging_Text0 {
            get {
                return ResourceManager.GetString("Paging_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This page shows how to get started with ASP.NET MVC&apos;s FlexGrid controls..
        /// </summary>
        public static string Project_Description_Text0 {
            get {
                return ResourceManager.GetString("Project_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASP.NET MVC FlexGrid 101.
        /// </summary>
        public static string Project_Name_Text0 {
            get {
                return ResourceManager.GetString("Project_Name_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Result(live).
        /// </summary>
        public static string Result_Live_Text0 {
            get {
                return ResourceManager.GetString("Result_Live_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, FlexGrid allows you to select a range of cells with the mouse or keyboard,
        ///            just like Excel. The &lt;b&gt;SelectionMode &lt;/b&gt; property allows you to change that so that you
        ///            can select a Row, a Range of Rows, Non-Contiguous Rows (like in a List-Box), a Single Cell, a Range of Cells
        ///            or disable selection altogether..
        /// </summary>
        public static string Selection_Modes_Description_Text0 {
            get {
                return ResourceManager.GetString("Selection_Modes_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example allows you to pick the &lt;b&gt;SelectionMode &lt;/b&gt; from a C1 ASP.NET MVC&apos;s ComboBox control..
        /// </summary>
        public static string Selection_Modes_Description_Text1 {
            get {
                return ResourceManager.GetString("Selection_Modes_Description_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selection Modes.
        /// </summary>
        public static string Selection_Modes_Text0 {
            get {
                return ResourceManager.GetString("Selection_Modes_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The appearance of the FlexGrid is defined in CSS. In addition to the default theme, we
        ///            include about a dozen professionally designed themes that customize the appearance of
        ///            all C1 ASP.NET MVC controls to achieve a consistent, attractive look..
        /// </summary>
        public static string Themes_Description_Text0 {
            get {
                return ResourceManager.GetString("Themes_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, we add a &quot;custom-flex-grid&quot; class to the grid element and define some
        ///            CSS rules to create a simple &quot;black and white, no borders&quot; theme for any grids that
        ///            have the &quot;custom-flex-grid&quot; class..
        /// </summary>
        public static string Themes_Description_Text1 {
            get {
                return ResourceManager.GetString("Themes_Description_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Themes.
        /// </summary>
        public static string Themes_Text0 {
            get {
                return ResourceManager.GetString("Themes_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In addition to grouping, FlexGrid supports hierarchical data, that is, data with items
        ///            that have lists of subitems. This type of hierarchical structure is very common, and is
        ///            usually displayed in a tree-view control..
        /// </summary>
        public static string Trees_and_Hierarchical_Data_Des_Text0 {
            get {
                return ResourceManager.GetString("Trees_and_Hierarchical_Data_Des_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To use FlexGrid with hierarchical data sources, set the &lt;b&gt;ChildItemsPath&lt;/b&gt; property
        ///            to the name of the data element that contains the child elements. The grid automatically
        ///            scans the data and builds the tree for you..
        /// </summary>
        public static string Trees_and_Hierarchical_Data_Des_Text1 {
            get {
                return ResourceManager.GetString("Trees_and_Hierarchical_Data_Des_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trees and Hierarchical Data.
        /// </summary>
        public static string Trees_and_Hierarchical_Data_Text0 {
            get {
                return ResourceManager.GetString("Trees_and_Hierarchical_Data_Text0", resourceCulture);
            }
        }
    }
}
