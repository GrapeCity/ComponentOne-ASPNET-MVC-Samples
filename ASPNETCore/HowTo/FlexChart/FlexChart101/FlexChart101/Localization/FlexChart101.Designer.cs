//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resource {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class FlexChart101 {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FlexChart101() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FlexChart101.Localization.FlexChart101", typeof(FlexChart101).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart Types.
        /// </summary>
        public static string TXT_Chart_Types {
            get {
                return ResourceManager.GetString("TXT_Chart_Types", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexChart control has three properties that allow you to customize the chart type:.
        /// </summary>
        public static string TXT_Chart_Types_0 {
            get {
                return ResourceManager.GetString("TXT_Chart_Types_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;ChartType&lt;/b&gt;: Selects the default chart type to be used for all series.
        ///                Individual series may override this..
        /// </summary>
        public static string TXT_Chart_Types_1 {
            get {
                return ResourceManager.GetString("TXT_Chart_Types_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Stacking&lt;/b&gt;: Determines whether series are plotted independently,
        ///                stacked, or stacked so their sum is 100%..
        /// </summary>
        public static string TXT_Chart_Types_2 {
            get {
                return ResourceManager.GetString("TXT_Chart_Types_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Rotated&lt;/b&gt;: Flips the X and Y axes so X becomes vertical and Y horizontal..
        /// </summary>
        public static string TXT_Chart_Types_3 {
            get {
                return ResourceManager.GetString("TXT_Chart_Types_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The example below allows you to see what happens when you change these properties:.
        /// </summary>
        public static string TXT_Chart_Types_4 {
            get {
                return ResourceManager.GetString("TXT_Chart_Types_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customizing Axes.
        /// </summary>
        public static string TXT_Customizing_Axes {
            get {
                return ResourceManager.GetString("TXT_Customizing_Axes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use axis properties to customize the chart&apos;s axes, including ranges (minimum and maximum),
        ///            label format, tickmark spacing, and gridlines..
        /// </summary>
        public static string TXT_Customizing_Axes_0 {
            get {
                return ResourceManager.GetString("TXT_Customizing_Axes_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;Axis&lt;/b&gt; class has boolean properties that allow you to turn features on
        ///            or off (&lt;b&gt;AxisLine&lt;/b&gt;, &lt;b&gt;MajorTickMarks&lt;/b&gt; and &lt;b&gt;MajorGrid&lt;/b&gt;.)
        ///            You can style the appearance of the features that are turned on using CSS..
        /// </summary>
        public static string TXT_Customizing_Axes_1 {
            get {
                return ResourceManager.GetString("TXT_Customizing_Axes_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloads.
        /// </summary>
        public static string TXT_Downloads {
            get {
                return ResourceManager.GetString("TXT_Downloads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expenses.
        /// </summary>
        public static string TXT_Expenses {
            get {
                return ResourceManager.GetString("TXT_Expenses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASP.NET MVC FlexChart 101.
        /// </summary>
        public static string TXT_FlexChart_Header {
            get {
                return ResourceManager.GetString("TXT_FlexChart_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This page shows how to get started with ASP.NET MVC&apos;s FlexChart control..
        /// </summary>
        public static string TXT_FlexChart_Header_0 {
            get {
                return ResourceManager.GetString("TXT_FlexChart_Header_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download Free Trial.
        /// </summary>
        public static string TXT_FreeTrial {
            get {
                return ResourceManager.GetString("TXT_FreeTrial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Getting Started.
        /// </summary>
        public static string TXT_Getting_Started {
            get {
                return ResourceManager.GetString("TXT_Getting_Started", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steps for getting started with the FlexChart control in MVC applications:.
        /// </summary>
        public static string TXT_Getting_Started_0 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new MVC project using the C1 ASP.NET MVC application template..
        /// </summary>
        public static string TXT_Getting_Started_1 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add controller and corresponding view to the project..
        /// </summary>
        public static string TXT_Getting_Started_2 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize the Chart control in view using razor syntax..
        /// </summary>
        public static string TXT_Getting_Started_3 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Optional) Add some CSS to customize the FlexChart control&apos;s appearance..
        /// </summary>
        public static string TXT_Getting_Started_4 {
            get {
                return ResourceManager.GetString("TXT_Getting_Started_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Legend and Titles.
        /// </summary>
        public static string TXT_Legend_and_Titles {
            get {
                return ResourceManager.GetString("TXT_Legend_and_Titles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &lt;b&gt;Legend&lt;/b&gt; properties to customize the appearance of the chart legend, and
        ///            the &lt;b&gt;Header&lt;/b&gt;, &lt;b&gt;Footer&lt;/b&gt;, and axis &lt;b&gt;Title&lt;/b&gt; properties to add titles
        ///            to your charts..
        /// </summary>
        public static string TXT_Legend_and_Titles_0 {
            get {
                return ResourceManager.GetString("TXT_Legend_and_Titles_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can style the legend and titles using CSS. The CSS tab below shows the rules
        ///            used to customize the appearance of the legend and titles. Notice that these are
        ///            SVG elements, so you have to use CSS attributes such as &quot;fill&quot; instead of &quot;color.&quot;.
        /// </summary>
        public static string TXT_Legend_and_Titles_1 {
            get {
                return ResourceManager.GetString("TXT_Legend_and_Titles_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mixed Chart Types.
        /// </summary>
        public static string TXT_Mixed_Chart_Types {
            get {
                return ResourceManager.GetString("TXT_Mixed_Chart_Types", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use different chart types for each chart series by setting the &lt;b&gt;ChartType&lt;/b&gt;
        ///            property on the series itself. This overrides the chart&apos;s default chart type..
        /// </summary>
        public static string TXT_Mixed_Chart_Types_0 {
            get {
                return ResourceManager.GetString("TXT_Mixed_Chart_Types_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the example below, the chart&apos;s &lt;b&gt;ChartType&lt;/b&gt; property is set to &lt;b&gt;Column&lt;/b&gt;,
        ///            but the &lt;b&gt;Downloads&lt;/b&gt; series overrides that to use the &lt;b&gt;LineSymbols&lt;/b&gt; chart type:.
        /// </summary>
        public static string TXT_Mixed_Chart_Types_1 {
            get {
                return ResourceManager.GetString("TXT_Mixed_Chart_Types_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Result (live):.
        /// </summary>
        public static string TXT_Result_Live {
            get {
                return ResourceManager.GetString("TXT_Result_Live", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sales.
        /// </summary>
        public static string TXT_Sales {
            get {
                return ResourceManager.GetString("TXT_Sales", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selection Modes.
        /// </summary>
        public static string TXT_SelectionModes {
            get {
                return ResourceManager.GetString("TXT_SelectionModes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexChart allows you to select series or data points by clicking or touching them.
        ///            Use the &lt;b&gt;SelectionMode&lt;/b&gt; property to specify whether you want to allow selection
        ///            by series, by data point, or no selection at all (selection is off by default.).
        /// </summary>
        public static string TXT_SelectionModes_0 {
            get {
                return ResourceManager.GetString("TXT_SelectionModes_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting the &lt;b&gt;SelectionMode&lt;/b&gt; property to &lt;b&gt;Series&lt;/b&gt; or &lt;b&gt;Point&lt;/b&gt; causes
        ///            the FlexChart to update the &lt;b&gt;Selection&lt;/b&gt; property when the user clicks the
        ///            mouse, and to apply the &quot;wj-state-selected&quot; class to selected chart elements..
        /// </summary>
        public static string TXT_SelectionModes_1 {
            get {
                return ResourceManager.GetString("TXT_SelectionModes_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;Selection&lt;/b&gt; property returns the currently selected series. To get the
        ///            currently selected data point, get the currently selected item within the
        ///            selected series using the &lt;b&gt;Series.collectionView.currentItem&lt;/b&gt; property
        ///            as shown in the example..
        /// </summary>
        public static string TXT_SelectionModes_2 {
            get {
                return ResourceManager.GetString("TXT_SelectionModes_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Styling Series.
        /// </summary>
        public static string TXT_Styling_Series {
            get {
                return ResourceManager.GetString("TXT_Styling_Series", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexChart automatically picks colors for each series based on a default
        ///            palette, which you can override by setting the &lt;b&gt;Palette&lt;/b&gt; property.
        ///            But you can also override the default settings by setting the &lt;b&gt;Style&lt;/b&gt;
        ///            property of any series to an object that specifies SVG styling attributes,
        ///            including &lt;b&gt;Fill&lt;/b&gt;, &lt;b&gt;Stroke&lt;/b&gt;, &lt;b&gt;StrokeThickness&lt;/b&gt;, and so on..
        /// </summary>
        public static string TXT_Styling_Series_0 {
            get {
                return ResourceManager.GetString("TXT_Styling_Series_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;Series.Style&lt;/b&gt; property is an exception to the general rule that
        ///            all styling in MVC Controls is done through CSS. The exception reflects the fact
        ///            that many charts have dynamic series, which would be impossible to style
        ///            in advance. For example, a stock chart may show series selected by the
        ///            user while running the application..
        /// </summary>
        public static string TXT_Styling_Series_1 {
            get {
                return ResourceManager.GetString("TXT_Styling_Series_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chart in this example uses the &lt;b&gt;Style&lt;/b&gt; and &lt;b&gt;SymbolStyle&lt;/b&gt; properties
        ///            to select style attributes for each series:.
        /// </summary>
        public static string TXT_Styling_Series_2 {
            get {
                return ResourceManager.GetString("TXT_Styling_Series_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Theming.
        /// </summary>
        public static string TXT_Theming {
            get {
                return ResourceManager.GetString("TXT_Theming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The appearance of the FlexChart is defined in CSS. In addition to the default theme, we
        ///            include about a dozen professionally designed themes that customize the appearance of
        ///            all MVC controls to achieve a consistent, attractive look..
        /// </summary>
        public static string TXT_Theming_0 {
            get {
                return ResourceManager.GetString("TXT_Theming_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To customize the appearance of the chart, inspect the elements you want to style and
        ///            create some CSS rules that apply to those elements..
        /// </summary>
        public static string TXT_Theming_1 {
            get {
                return ResourceManager.GetString("TXT_Theming_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For example, if you right-click one of the labels on the X axis in IE or Chrome, you
        ///            will see that it is an element with the &quot;wj-label&quot; class, that it is contained in an
        ///            element with the &quot;wj-axis-x&quot; class, which is contained in the the top-level control
        ///            element, which has the &quot;wj-flexchart&quot; class. The first CSS rule in this example uses
        ///            this information to customize the X labels. The rule selector adds the additional
        ///            requirement that the paren [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TXT_Theming_2 {
            get {
                return ResourceManager.GetString("TXT_Theming_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle Series.
        /// </summary>
        public static string TXT_Toggle_Series {
            get {
                return ResourceManager.GetString("TXT_Toggle_Series", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;Series&lt;/b&gt; class has a &lt;b&gt;Visibility&lt;/b&gt; property that allows you to
        ///            determine whether a series should be shown in the chart and in the legend,
        ///            only in the legend, or completely hidden..
        /// </summary>
        public static string TXT_Toggle_Series_0 {
            get {
                return ResourceManager.GetString("TXT_Toggle_Series_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows how you can use the &lt;b&gt;Visibility&lt;/b&gt; property to toggle
        ///            the visibility of a series using two methods:.
        /// </summary>
        public static string TXT_Toggle_Series_1 {
            get {
                return ResourceManager.GetString("TXT_Toggle_Series_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clicking on legend entries:&lt;br /&gt;
        ///                The chart sets the chart&apos;s &lt;b&gt;option.legendToggle&lt;/b&gt; property to true,
        ///                which toggles the &lt;b&gt;Visibility&lt;/b&gt; property of a series when its legend entry is
        ///                clicked..
        /// </summary>
        public static string TXT_Toggle_Series_2 {
            get {
                return ResourceManager.GetString("TXT_Toggle_Series_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using checkboxes:&lt;br /&gt;
        ///                When the &lt;b&gt;checked&lt;/b&gt; state changed, it will set the &lt;b&gt;Visibility&lt;/b&gt; property of each series by the &lt;b&gt;checked&lt;/b&gt; state..
        /// </summary>
        public static string TXT_Toggle_Series_3 {
            get {
                return ResourceManager.GetString("TXT_Toggle_Series_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tooltips.
        /// </summary>
        public static string TXT_Tooltips {
            get {
                return ResourceManager.GetString("TXT_Tooltips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexChart has built-in support for tooltips. By default, the control displays
        ///            tooltips when the user touches or hovers the mouse on a data point..
        /// </summary>
        public static string TXT_Tooltips_0 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tooltip content is generated using a template that may contain the following
        ///            parameters:.
        /// </summary>
        public static string TXT_Tooltips_1 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;SeriesName&lt;/b&gt;: The name of the series that contains the chart element..
        /// </summary>
        public static string TXT_Tooltips_2 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;PointIndex&lt;/b&gt;: The index of the chart element within the series..
        /// </summary>
        public static string TXT_Tooltips_3 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;AxisX&lt;/b&gt;: The &lt;b&gt;x&lt;/b&gt; value of the chart element..
        /// </summary>
        public static string TXT_Tooltips_4 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;AxisY&lt;/b&gt;: The &lt;b&gt;y&lt;/b&gt; value of the chart element..
        /// </summary>
        public static string TXT_Tooltips_5 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, the tooltip template is set to
        ///            &lt;code&gt;&amp;lt;b&amp;gt;{seriesName}&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;{x} {y}&lt;/code&gt;,
        ///            and you can see how that works in the  charts above.
        ///            In this example, we set the tooltip template to
        ///            &lt;code&gt;&amp;lt;b&amp;gt;{seriesName}&amp;lt;/b&amp;gt; &amp;lt;img src=&apos;&quot;+@@Url.Content(&quot;~/Content/images/{x}.png&quot;)+&quot;&apos;/&amp;gt;&amp;lt;br/&amp;gt;{y}&lt;/code&gt;,
        ///            which replaces the country name with the country&apos;s flag..
        /// </summary>
        public static string TXT_Tooltips_6 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can disable the chart tooltips by setting the template to an empty string..
        /// </summary>
        public static string TXT_Tooltips_7 {
            get {
                return ResourceManager.GetString("TXT_Tooltips_7", resourceCulture);
            }
        }
    }
}
