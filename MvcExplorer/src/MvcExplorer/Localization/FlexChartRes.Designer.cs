//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcExplorer.Localization {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class FlexChartRes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FlexChartRes() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MvcExplorer.Localization.FlexChartRes", typeof(FlexChartRes).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced.
        /// </summary>
        public static string Annotation_Advanced {
            get {
                return ResourceManager.GetString("Annotation_Advanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Basic.
        /// </summary>
        public static string Annotation_Basic {
            get {
                return ResourceManager.GetString("Annotation_Basic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataIndex.
        /// </summary>
        public static string Annotation_CircleContent {
            get {
                return ResourceManager.GetString("Annotation_CircleContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is Circle annotation. &lt;/br&gt; radius: 40 &lt;/br&gt; pointIndex: 33 &lt;/br&gt; attachment: DataIndex.
        /// </summary>
        public static string Annotation_CircleTooltip {
            get {
                return ResourceManager.GetString("Annotation_CircleTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alibaba Group Holding Ltd (BABA) and ....
        /// </summary>
        public static string Annotation_Content1 {
            get {
                return ResourceManager.GetString("Annotation_Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Facebook Inc to acquire LiveRail..
        /// </summary>
        public static string Annotation_Content2 {
            get {
                return ResourceManager.GetString("Annotation_Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rising wedge.
        /// </summary>
        public static string Annotation_Content3 {
            get {
                return ResourceManager.GetString("Annotation_Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relative.
        /// </summary>
        public static string Annotation_EllipseContent {
            get {
                return ResourceManager.GetString("Annotation_EllipseContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is ellipse annotation.&lt;/br&gt; point: { x: 0.4, y: 0.5 }&lt;/br&gt; attachment: Relative.
        /// </summary>
        public static string Annotation_EllipseTooltip {
            get {
                return ResourceManager.GetString("Annotation_EllipseTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is image annotation.&lt;/br&gt; point:{x: new DateTime(2014, 1, 26), y: 30}&lt;/br&gt; attachment: DataCoordinate.
        /// </summary>
        public static string Annotation_ImageTooltip {
            get {
                return ResourceManager.GetString("Annotation_ImageTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Absolute.
        /// </summary>
        public static string Annotation_LineContent {
            get {
                return ResourceManager.GetString("Annotation_LineContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is line annotation. &lt;/br&gt; start: { x: 50, y: 150 } end: { x: 240, y: 350 } &lt;/br&gt; attachment: Absolute.
        /// </summary>
        public static string Annotation_LineTooltip {
            get {
                return ResourceManager.GetString("Annotation_LineTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2015/3/2, Both JPMorgan Chase and Morgan Stanley offered up favorable comments on the social media giant, with JPMorgan citing that Facebook&apos;s core services accounted for 24% of all smartphone activity in the u.s. the figure was up 2% from reported usage in ....
        /// </summary>
        public static string Annotation_News {
            get {
                return ResourceManager.GetString("Annotation_News", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Absolute.
        /// </summary>
        public static string Annotation_PolygonContent {
            get {
                return ResourceManager.GetString("Annotation_PolygonContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is polygon annotation.&lt;/br&gt; paths: [(200,0),(150,50),(175,100),(255,100),(250, 50)]&lt;/br&gt; attachment: Absolute.
        /// </summary>
        public static string Annotation_PolygonTooltip {
            get {
                return ResourceManager.GetString("Annotation_PolygonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataCoordinate.
        /// </summary>
        public static string Annotation_RectangleContent {
            get {
                return ResourceManager.GetString("Annotation_RectangleContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is rectangle annotation.&lt;/br&gt; point:{ x: new DateTime(2014, 2, 11), y: 30 }&lt;/br&gt; attachment: DataCoordinate.
        /// </summary>
        public static string Annotation_RectTooltip {
            get {
                return ResourceManager.GetString("Annotation_RectTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataIndex.
        /// </summary>
        public static string Annotation_SquareContent {
            get {
                return ResourceManager.GetString("Annotation_SquareContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is square annotation. &lt;/br&gt; length: 80 &lt;/br&gt; pointIndex: 45 &lt;/br&gt; attachment: DataIndex.
        /// </summary>
        public static string Annotation_SquareTooltip {
            get {
                return ResourceManager.GetString("Annotation_SquareTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample below shows basic usage of &lt;b&gt;AnnotationLayer&lt;/b&gt; and various built-in types of Annotations,
        ///    including: &lt;b&gt;Circle&lt;/b&gt;, &lt;b&gt;Ellipse&lt;/b&gt;, &lt;b&gt;Image&lt;/b&gt;, &lt;b&gt;Line&lt;/b&gt;, &lt;b&gt;Polygon&lt;/b&gt;, &lt;b&gt;Rectangle&lt;/b&gt;, &lt;b&gt;Square&lt;/b&gt; and &lt;b&gt;Text&lt;/b&gt;.&lt;br /&gt;
        ///    You can use &lt;b&gt;attachment&lt;/b&gt; attribute to set different attach types of annotation..
        /// </summary>
        public static string Annotation_Text0 {
            get {
                return ResourceManager.GetString("Annotation_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample below shows how to display annotations easily on a FlexChart to show comments and useful information about data points on the plot area itself..
        /// </summary>
        public static string Annotation_Text1 {
            get {
                return ResourceManager.GetString("Annotation_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This page shows how to display annotations on FlexChart..
        /// </summary>
        public static string Annotation_Text2 {
            get {
                return ResourceManager.GetString("Annotation_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relative.
        /// </summary>
        public static string Annotation_TextContent {
            get {
                return ResourceManager.GetString("Annotation_TextContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is text annotation.&lt;/br&gt; point: { x: 0.55, y: 0.15 }&lt;/br&gt; attachment: Relative.
        /// </summary>
        public static string Annotation_TextTooltip {
            get {
                return ResourceManager.GetString("Annotation_TextTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Results of Operations and Financial Condition..
        /// </summary>
        public static string Annotation_Tooltip1 {
            get {
                return ResourceManager.GetString("Annotation_Tooltip1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Completion of Acquisition or Disposition of Assets, Change in Directors or Principal..
        /// </summary>
        public static string Annotation_Tooltip2 {
            get {
                return ResourceManager.GetString("Annotation_Tooltip2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Facebook Inc Earnings Call scheduled for 5:00 pm ET today..
        /// </summary>
        public static string Annotation_Tooltip3 {
            get {
                return ResourceManager.GetString("Annotation_Tooltip3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Coverage initiated on Facebook by Brean Capital..
        /// </summary>
        public static string Annotation_Tooltip4 {
            get {
                return ResourceManager.GetString("Annotation_Tooltip4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple axes.
        /// </summary>
        public static string Axes_MultipleAxes {
            get {
                return ResourceManager.GetString("Axes_MultipleAxes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sales.
        /// </summary>
        public static string Axes_Sales {
            get {
                return ResourceManager.GetString("Axes_Sales", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the &lt;b&gt;FlexChart&lt;/b&gt; with two y-axes..
        /// </summary>
        public static string Axes_Text0 {
            get {
                return ResourceManager.GetString("Axes_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart binding.
        /// </summary>
        public static string Binding_ChartBinding {
            get {
                return ResourceManager.GetString("Binding_ChartBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bind the FlexChart with a IEnumerable DataSource, each item contains value &quot;Date&quot;, &quot;SalesInUSA&quot;, &quot;SalesInJapan&quot;.
        ///            Set the X data label as &quot;Date&quot;..
        /// </summary>
        public static string Binding_Li1 {
            get {
                return ResourceManager.GetString("Binding_Li1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a &lt;b&gt;Series&lt;/b&gt; object to the FlexChart&apos;s &lt;b&gt;Series&lt;/b&gt; array and
        ///            set its &lt;b&gt;Binding&lt;/b&gt; property to &quot;SalesInUSA&quot;..
        /// </summary>
        public static string Binding_Li2 {
            get {
                return ResourceManager.GetString("Binding_Li2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a second &lt;b&gt;Series&lt;/b&gt; object to the FlexChart&apos;s &lt;b&gt;Series&lt;/b&gt; array
        ///            and set its &lt;b&gt;Binding&lt;/b&gt; property to &quot;SalesInJapan&quot;..
        /// </summary>
        public static string Binding_Li3 {
            get {
                return ResourceManager.GetString("Binding_Li3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how you can use the &lt;b&gt;FlexChart&lt;/b&gt; to show two sets of values
        ///        from Model. This is the most common usage scenario for the
        ///        &lt;b&gt;FlexChart&lt;/b&gt;..
        /// </summary>
        public static string Binding_Text0 {
            get {
                return ResourceManager.GetString("Binding_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample does the following:.
        /// </summary>
        public static string Binding_Text1 {
            get {
                return ResourceManager.GetString("Binding_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In addition to binding, this sample shows the effect of the &lt;b&gt;InterpolateNulls&lt;/b&gt;
        ///        and &lt;b&gt;LegendToggle&lt;/b&gt; properties.
        ///        When you set &lt;b&gt;InterpolateNulls&lt;/b&gt; to true, the chart fills in gaps created by
        ///        null values in the data.
        ///        When you set &lt;b&gt;LegendToggle&lt;/b&gt; to true, the chart toggles the visibility of the
        ///        series when you click its name in the legend..
        /// </summary>
        public static string Binding_Text2 {
            get {
                return ResourceManager.GetString("Binding_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BoxWhisker series is normally used to compare distributions between different sets of numerical data..
        /// </summary>
        public static string BoxWhisker_Text0 {
            get {
                return ResourceManager.GetString("BoxWhisker_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to create BreakEven charts using the &lt;b&gt;FlexChart&lt;/b&gt; control. A break even chart is a chart that shows the sales volume level at which total costs equal sales..
        /// </summary>
        public static string BreakEven_Text0 {
            get {
                return ResourceManager.GetString("BreakEven_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bubble.
        /// </summary>
        public static string Bubble_Bubble {
            get {
                return ResourceManager.GetString("Bubble_Bubble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to create bubble charts using the &lt;b&gt;FlexChart&lt;/b&gt; control..
        /// </summary>
        public static string Bubble_Text0 {
            get {
                return ResourceManager.GetString("Bubble_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bubble charts are similar to other chart types, except in addition to X and Y you must
        ///        specify a binding for the bubble size. This is done by setting the &lt;b&gt;Binding&lt;/b&gt; property
        ///        to a comma-delimited string that specifies the name of the properties to be used for the
        ///        Y and size values for each bubble..
        /// </summary>
        public static string Bubble_Text1 {
            get {
                return ResourceManager.GetString("Bubble_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, the chart is bound to a list containing objects with &quot;X&quot;, &quot;Y&quot;, and &quot;Size&quot;
        ///        properties. The chart contains a single series and its &lt;b&gt;Binding&lt;/b&gt; property is set to
        ///        the string &quot;Y,Size&quot;..
        /// </summary>
        public static string Bubble_Text2 {
            get {
                return ResourceManager.GetString("Bubble_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AnimationMode.
        /// </summary>
        public static string ChartAnimation_AnimationMode {
            get {
                return ResourceManager.GetString("ChartAnimation_AnimationMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart Type.
        /// </summary>
        public static string ChartAnimation_ChartType {
            get {
                return ResourceManager.GetString("ChartAnimation_ChartType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duration.
        /// </summary>
        public static string ChartAnimation_Duration {
            get {
                return ResourceManager.GetString("ChartAnimation_Duration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Easing.
        /// </summary>
        public static string ChartAnimation_Easing {
            get {
                return ResourceManager.GetString("ChartAnimation_Easing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows ChartAnimation for &lt;b&gt;FlexChart&lt;/b&gt;..
        /// </summary>
        public static string ChartAnimation_Text0 {
            get {
                return ResourceManager.GetString("ChartAnimation_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use different animation modes for FlexChart by setting the &lt;b&gt;AnimationMode&lt;/b&gt; property of the ChartAnimation..
        /// </summary>
        public static string ChartAnimation_Text1 {
            get {
                return ResourceManager.GetString("ChartAnimation_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ChartAnimation class has a &lt;b&gt;Duration&lt;/b&gt; property that allows you to set the length of animation in milliseconds..
        /// </summary>
        public static string ChartAnimation_Text2 {
            get {
                return ResourceManager.GetString("ChartAnimation_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customize the chart by setting its &lt;b&gt;ItemFormatter&lt;/b&gt; property
        ///            to a function that adds elements to show task dependencies
        ///            and percent complete..
        /// </summary>
        public static string EnhancedChart_Description {
            get {
                return ResourceManager.GetString("EnhancedChart_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enhanced Gantt Chart.
        /// </summary>
        public static string EnhancedGanttChartHeader {
            get {
                return ResourceManager.GetString("EnhancedGanttChartHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependencies &amp; Percent Complete.
        /// </summary>
        public static string EnhancedGanttChartTitle {
            get {
                return ResourceManager.GetString("EnhancedGanttChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ErrorBar helps you see margins of error and standard deviations at a glance. They can be shown as a standard error amount, a percentage, or a standard deviation. You can also set your own values to display the exact error amounts you want..
        /// </summary>
        public static string ErrorBar_Text0 {
            get {
                return ResourceManager.GetString("ErrorBar_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Financial chart.
        /// </summary>
        public static string FinancialChart_FinancialChart {
            get {
                return ResourceManager.GetString("FinancialChart_FinancialChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to create financial charts with the &lt;b&gt;FlexChart&lt;/b&gt;..
        /// </summary>
        public static string FinancialChart_Text0 {
            get {
                return ResourceManager.GetString("FinancialChart_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;FlexChart&lt;/b&gt; supports two types of financial chart: Candlestick and HiLowOpenClose.
        ///        To use them, set the &lt;b&gt;ChartType&lt;/b&gt; property to the type you want, and set the
        ///        series &lt;b&gt;Binding&lt;/b&gt; property to a string that specifies the fields that contain the
        ///        High, Low, Open, and Close values in the data source..
        /// </summary>
        public static string FinancialChart_Text1 {
            get {
                return ResourceManager.GetString("FinancialChart_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neck Height:.
        /// </summary>
        public static string Funnel_NeckHeight {
            get {
                return ResourceManager.GetString("Funnel_NeckHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neck Width:.
        /// </summary>
        public static string Funnel_NeckWidth {
            get {
                return ResourceManager.GetString("Funnel_NeckWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The example shows how to create and customize a Funnel chart..
        /// </summary>
        public static string Funnel_Text0 {
            get {
                return ResourceManager.GetString("Funnel_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexChart supports gradient colors..
        /// </summary>
        public static string Gradients_Text0 {
            get {
                return ResourceManager.GetString("Gradients_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The gradient descriptor is an expression formatted as follows:.
        /// </summary>
        public static string Gradients_Text1 {
            get {
                return ResourceManager.GetString("Gradients_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &amp;lt;coords&amp;gt; specify a linear gradient vector as x1, y1, x2, y2, or a radial gradient as cx, cy, r and optional fx, fy, fr specifying a focal point away from the center of the circle..
        /// </summary>
        public static string Gradients_Text2 {
            get {
                return ResourceManager.GetString("Gradients_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify &amp;lt;colors&amp;gt; as a list of dash-separated CSS color values. Each color may be followed by a custom offset and opacity value, separated with a colon character..
        /// </summary>
        public static string Gradients_Text3 {
            get {
                return ResourceManager.GetString("Gradients_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Linear gradient format example:.
        /// </summary>
        public static string Gradients_Text4 {
            get {
                return ResourceManager.GetString("Gradients_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Radial gradient format example:.
        /// </summary>
        public static string Gradients_Text5 {
            get {
                return ResourceManager.GetString("Gradients_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &amp;lt;type&amp;gt; can be either linear or radial.
        ///        The uppercase L or R letters indicate absolute coordinates offset from the SVG surface.
        ///        Lowercase l or r letters indicate coordinates calculated relative to the element to which the gradient is applied..
        /// </summary>
        public static string Gradients_Text6 {
            get {
                return ResourceManager.GetString("Gradients_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;{Name}&lt;/b&gt;:&lt;br/&gt;{Start:d} - {End:d}.
        /// </summary>
        public static string GranttTooltip1 {
            get {
                return ResourceManager.GetString("GranttTooltip1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;{Name}&lt;/b&gt;:&lt;br/&gt;{Start:d} - {End:d}&lt;br/&gt;&lt;i&gt;percent complete: {Percent}%&lt;/i&gt;.
        /// </summary>
        public static string GranttTooltip2 {
            get {
                return ResourceManager.GetString("GranttTooltip2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart header and footer.
        /// </summary>
        public static string HeaderFooter_ChartHeaderAndFooter {
            get {
                return ResourceManager.GetString("HeaderFooter_ChartHeaderAndFooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Footer (c) 2015.
        /// </summary>
        public static string HeaderFooter_Footer {
            get {
                return ResourceManager.GetString("HeaderFooter_Footer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sales In China In 3 Months.
        /// </summary>
        public static string HeaderFooter_Header {
            get {
                return ResourceManager.GetString("HeaderFooter_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how you can add a header and a footer to the chart..
        /// </summary>
        public static string HeaderFooter_Text0 {
            get {
                return ResourceManager.GetString("HeaderFooter_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;Header&lt;/b&gt; and &lt;b&gt;Footer&lt;/b&gt; properties determine the content, and the
        ///        &lt;b&gt;HeaderStyle&lt;/b&gt; and &lt;b&gt;FooterStyle&lt;/b&gt; properties determine the appearance
        ///        of the header and footer..
        /// </summary>
        public static string HeaderFooter_Text1 {
            get {
                return ResourceManager.GetString("HeaderFooter_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hit Test.
        /// </summary>
        public static string HitTest_HitTest {
            get {
                return ResourceManager.GetString("HitTest_HitTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Point index:.
        /// </summary>
        public static string HitTest_PointIndex {
            get {
                return ResourceManager.GetString("HitTest_PointIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Series name:.
        /// </summary>
        public static string HitTest_SeriesName {
            get {
                return ResourceManager.GetString("HitTest_SeriesName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates the use of the &lt;b&gt;FlexChart&lt;/b&gt;&apos;s &lt;b&gt;hitTest&lt;/b&gt; method in client-side.
        /// </summary>
        public static string HitTest_Text0 {
            get {
                return ResourceManager.GetString("HitTest_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;hitTest&lt;/b&gt; method takes a point and returns the nearest chart element. It
        ///        can be used to provide interactive features such as clickable regions, drill-downs, etc..
        /// </summary>
        public static string HitTest_Text1 {
            get {
                return ResourceManager.GetString("HitTest_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move mouse over chart to see information about the chart element that is closest to
        ///        the mouse..
        /// </summary>
        public static string HitTest_Text2 {
            get {
                return ResourceManager.GetString("HitTest_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Introduction.
        /// </summary>
        public static string Index_Introduction {
            get {
                return ResourceManager.GetString("Index_Introduction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bind the FlexChart with an IEnumerable DataSource.
        ///            by setting &lt;b&gt;source-collection&lt;/b&gt; attribute of &lt;b&gt;c1-items-source&lt;/b&gt; sub-tag to Model..
        /// </summary>
        public static string Index_Li1 {
            get {
                return ResourceManager.GetString("Index_Li1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set &lt;b&gt;binding-x&lt;/b&gt; attribute to the name of the property that
        ///            contains the X values (in this example fruit names), and it will map the field of 
        ///            chart&apos;s &lt;b&gt;ItemsSource&lt;/b&gt;..
        /// </summary>
        public static string Index_Li2 {
            get {
                return ResourceManager.GetString("Index_Li2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add one or more &lt;b&gt;c1-flex-chart-series&lt;/b&gt; sub-tags and set their 
        ///            &lt;b&gt;binding&lt;/b&gt; attribute to the name of the property that
        ///            contains the Y values (in this example the months of March, April, and May)..
        /// </summary>
        public static string Index_Li3 {
            get {
                return ResourceManager.GetString("Index_Li3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the &lt;b&gt;FlexChart&lt;/b&gt;&apos;s basic features by using &lt;b&gt;c1-flex-chart&lt;/b&gt; tag.
        ///        It binds the chart to a Model and allows you to select the chart type, series stacking, and rotation..
        /// </summary>
        public static string Index_Text0 {
            get {
                return ResourceManager.GetString("Index_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you move the mouse over a chart element, a tooltip will appear showing details
        ///        about the data point..
        /// </summary>
        public static string Index_Text1 {
            get {
                return ResourceManager.GetString("Index_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The simplest way to use the FlexChart is to:.
        /// </summary>
        public static string Index_Text2 {
            get {
                return ResourceManager.GetString("Index_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses &lt;b&gt;LegendOrientation&lt;/b&gt; to determine the orientation of the legend..
        /// </summary>
        public static string Index_Text3 {
            get {
                return ResourceManager.GetString("Index_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses &lt;b&gt;Legend.MaxSize&lt;/b&gt; to Gets or sets the maximum legend size (width for left or right position and height for top or bottom position).
        ///The size can be specified in pixels: MaxSize = &apos;100px&apos; or percents: MaxSize = &apos;50%&apos;..
        /// </summary>
        public static string Index_Text4 {
            get {
                return ResourceManager.GetString("Index_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item Formatter.
        /// </summary>
        public static string ItemFormatter_ItemFormatter {
            get {
                return ResourceManager.GetString("ItemFormatter_ItemFormatter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates how you can use the &lt;b&gt;FlexChart&lt;/b&gt;&apos;s &lt;b&gt;ItemFormatter&lt;/b&gt;
        ///        property to customize the appearance of the data points based on their values..
        /// </summary>
        public static string ItemFormatter_Text0 {
            get {
                return ResourceManager.GetString("ItemFormatter_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, the &lt;b&gt;ItemFormatter&lt;/b&gt; property is a function that sets the
        ///        &lt;b&gt;Fill&lt;/b&gt; property of the chart&apos;s rendering engine to a value calculated based
        ///        on the value of the data point being plotted..
        /// </summary>
        public static string ItemFormatter_Text1 {
            get {
                return ResourceManager.GetString("ItemFormatter_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Labels.
        /// </summary>
        public static string Labels_Labels {
            get {
                return ResourceManager.GetString("Labels_Labels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates how you can use the &lt;b&gt;FlexChart&lt;/b&gt;&apos;s &lt;b&gt;DataLabel&lt;/b&gt;
        ///        property to add labels to each data point..
        /// </summary>
        public static string Labels_Text0 {
            get {
                return ResourceManager.GetString("Labels_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart marker.
        /// </summary>
        public static string Marker_ChartMarker {
            get {
                return ResourceManager.GetString("Marker_ChartMarker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows line chart with vertical marker that follows mouse pointer and displays data values for all series..
        /// </summary>
        public static string Marker_Text0 {
            get {
                return ResourceManager.GetString("Marker_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zoom mode: Select the chart area to zoom in, or scroll mouse wheel to zoom in/out..
        /// </summary>
        public static string PanningAndScaling_Li1 {
            get {
                return ResourceManager.GetString("PanningAndScaling_Li1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pan mode: Click and drag within the chart area to change the display range..
        /// </summary>
        public static string PanningAndScaling_Li2 {
            get {
                return ResourceManager.GetString("PanningAndScaling_Li2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pan the chart area to change the display range; pinch it to zoom in/out..
        /// </summary>
        public static string PanningAndScaling_Li3 {
            get {
                return ResourceManager.GetString("PanningAndScaling_Li3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mouse action:.
        /// </summary>
        public static string PanningAndScaling_MouseAction {
            get {
                return ResourceManager.GetString("PanningAndScaling_MouseAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Touch action:.
        /// </summary>
        public static string PanningAndScaling_TouchAction {
            get {
                return ResourceManager.GetString("PanningAndScaling_TouchAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the &lt;b&gt;FlexChart&lt;/b&gt; with several plot areas..
        /// </summary>
        public static string PlotAreas_Text0 {
            get {
                return ResourceManager.GetString("PlotAreas_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows a range area chart. The Range Area Chart type is used to simultaneously show high and low values in a given time period. The X axis usually represents a time scale to display how data changes over time..
        /// </summary>
        public static string RangeArea_Text0 {
            get {
                return ResourceManager.GetString("RangeArea_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to bind FlexChart to a remote data..
        /// </summary>
        public static string RemoteBind_Text0 {
            get {
                return ResourceManager.GetString("RemoteBind_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows a scatter chart with large data which uses high performance WebGL rendering..
        /// </summary>
        public static string RenderEngine_Description_Text0 {
            get {
                return ResourceManager.GetString("RenderEngine_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart Scaling.
        /// </summary>
        public static string Scaling_ChartScaling {
            get {
                return ResourceManager.GetString("Scaling_ChartScaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use logarithmic axes to spread clustered data and improve the clarity of your charts without sacrificing accuracy..
        /// </summary>
        public static string Scaling_Text0 {
            get {
                return ResourceManager.GetString("Scaling_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use scaling formats can be used to display axis labels in a clear and concise
        ///    format..
        /// </summary>
        public static string Scaling_Text1 {
            get {
                return ResourceManager.GetString("Scaling_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bubble chart below shows the population (x), GDP (y), and per-capita income
        ///    (bubble size) for about 200 countries. Notice how the use of log-axes spreads
        ///    out the data and makes the chart easy to read..
        /// </summary>
        public static string Scaling_Text2 {
            get {
                return ResourceManager.GetString("Scaling_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChartType:.
        /// </summary>
        public static string Selection_ChartType {
            get {
                return ResourceManager.GetString("Selection_ChartType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selection Mode:.
        /// </summary>
        public static string Selection_SelectionMode {
            get {
                return ResourceManager.GetString("Selection_SelectionMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stacking:.
        /// </summary>
        public static string Selection_Stacking {
            get {
                return ResourceManager.GetString("Selection_Stacking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates the &lt;b&gt;FlexChart&lt;/b&gt;&apos;s selection feature..
        /// </summary>
        public static string Selection_Text0 {
            get {
                return ResourceManager.GetString("Selection_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;SelectionMode&lt;/b&gt; property determines whether the chart should select series
        ///        or points when the user clicks on the chart..
        /// </summary>
        public static string Selection_Text1 {
            get {
                return ResourceManager.GetString("Selection_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Note:&lt;/b&gt; In this sample, FlexChart changes its properties from &lt;b&gt;Server-Side&lt;/b&gt;.
        /// </summary>
        public static string Selection_Text2 {
            get {
                return ResourceManager.GetString("Selection_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart series binding.
        /// </summary>
        public static string SeriesBinding_ChartSeriesBinding {
            get {
                return ResourceManager.GetString("SeriesBinding_ChartSeriesBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the chart&apos;s &lt;b&gt;BindingX&lt;/b&gt; and &lt;b&gt;Binding&lt;/b&gt; properties to &quot;X&quot; and &quot;Y&quot;..
        /// </summary>
        public static string SeriesBinding_Li1 {
            get {
                return ResourceManager.GetString("SeriesBinding_Li1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a &lt;b&gt;Series&lt;/b&gt; object to the chart&apos;s &lt;b&gt;Series&lt;/b&gt; array and bind it with an array of objects that have &quot;X&quot; and &quot;Y&quot; properties..
        /// </summary>
        public static string SeriesBinding_Li2 {
            get {
                return ResourceManager.GetString("SeriesBinding_Li2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a second &lt;b&gt;Series&lt;/b&gt; object to the chart&apos;s &lt;b&gt;Series&lt;/b&gt; array and bind it with a different array of objects that have &quot;X&quot; and &quot;Y&quot;
        ///            properties..
        /// </summary>
        public static string SeriesBinding_Li3 {
            get {
                return ResourceManager.GetString("SeriesBinding_Li3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how you can use the &lt;b&gt;FlexChart&lt;/b&gt; to show data from
        ///        multiple data sources, one per series..
        /// </summary>
        public static string SeriesBinding_Text0 {
            get {
                return ResourceManager.GetString("SeriesBinding_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample does the following:.
        /// </summary>
        public static string SeriesBinding_Text1 {
            get {
                return ResourceManager.GetString("SeriesBinding_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alternatively, we could have set the &lt;b&gt;BindingX&lt;/b&gt; and &lt;b&gt;Binding&lt;/b&gt; properties on the
        ///        &lt;b&gt;Series&lt;/b&gt; objects instead of setting then on the chart..
        /// </summary>
        public static string SeriesBinding_Text2 {
            get {
                return ResourceManager.GetString("SeriesBinding_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates how you can customize specific series of FlexChart..
        /// </summary>
        public static string SeriesCustomization_Text0 {
            get {
                return ResourceManager.GetString("SeriesCustomization_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first series (Cos(x)) uses default setting to draw..
        /// </summary>
        public static string SeriesCustomization_Text1 {
            get {
                return ResourceManager.GetString("SeriesCustomization_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second series (Sin(x)):.
        /// </summary>
        public static string SeriesCustomization_Text2 {
            get {
                return ResourceManager.GetString("SeriesCustomization_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses &lt;b&gt;ItemFormater&lt;/b&gt; property of series as a function to customize the appearance of the data points calcutated based on their values being plotted..
        /// </summary>
        public static string SeriesCustomization_Text3 {
            get {
                return ResourceManager.GetString("SeriesCustomization_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses &lt;b&gt;TooltipContent&lt;/b&gt; property of series to customize the content of tooltip showing when move mouse on it..
        /// </summary>
        public static string SeriesCustomization_Text4 {
            get {
                return ResourceManager.GetString("SeriesCustomization_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize the chart (set the ChartType to &apos;C1.Web.Mvc.Chart.ChartType.Bar&apos; and Bind to the data)..
        /// </summary>
        public static string SimpleChart_Step1 {
            get {
                return ResourceManager.GetString("SimpleChart_Step1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a series to the chart and set its binding property to the fields Start and End dates..
        /// </summary>
        public static string SimpleChart_Step2 {
            get {
                return ResourceManager.GetString("SimpleChart_Step2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customize AxisY to hide the major grid and show minor grid..
        /// </summary>
        public static string SimpleChart_Step3 {
            get {
                return ResourceManager.GetString("SimpleChart_Step3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plain Gantt Chart.
        /// </summary>
        public static string SimpleGanttChartHeader {
            get {
                return ResourceManager.GetString("SimpleGanttChartHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steps for getting started with the FlexChart to customize a GanttChart:.
        /// </summary>
        public static string SimpleGanttChartTitle {
            get {
                return ResourceManager.GetString("SimpleGanttChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This demo shows line, symbols and area step charts. Step charts are useful to display any type of data that has changes at irregular intervals of time, for example, interest rates vs time..
        /// </summary>
        public static string StepChart_Text0 {
            get {
                return ResourceManager.GetString("StepChart_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example shows how to specify style for Tooltips using CssClass properties..
        /// </summary>
        public static string Tooltips_Text0 {
            get {
                return ResourceManager.GetString("Tooltips_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Tooltips style can be changed by setting CssClass property with CSS like following:.
        /// </summary>
        public static string Tooltips_Text1 {
            get {
                return ResourceManager.GetString("Tooltips_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Waterfall series is normally used to demonstrate how the starting position either increases or decreases through a series of changes..
        /// </summary>
        public static string Waterfall_Text0 {
            get {
                return ResourceManager.GetString("Waterfall_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view creates a scatter chart of student grades, highlighting each grade range using zones..
        /// </summary>
        public static string Zones_Text0 {
            get {
                return ResourceManager.GetString("Zones_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the porperty &quot;OnClientRendering&quot; for &lt;b&gt;FlexChart&lt;/b&gt; as a client function name,
        ///        the zones will be drawn in &lt;b&gt;Rendering&lt;/b&gt; event of FlexChart in client-side..
        /// </summary>
        public static string Zones_Text1 {
            get {
                return ResourceManager.GetString("Zones_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zones.
        /// </summary>
        public static string Zones_Zones {
            get {
                return ResourceManager.GetString("Zones_Zones", resourceCulture);
            }
        }
    }
}
