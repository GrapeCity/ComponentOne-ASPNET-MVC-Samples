<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CollectionViewNavigator_Text0" xml:space="preserve">
    <value>CollectionViewNavigatorは、CollectionViewのデータのレコードをナビゲートするために使用されます。&lt;br&gt;このデモでは、2つのCollectionViewNavigatorコントロールを使用します。1つ目はアイテムごとのナビゲート用、2つ目はページごとのナビゲート用です。次のプロパティを使用します：&lt;br&gt;&lt;b&gt;ItemSourceId&lt;/b&gt;は、ナビゲーションのためにデータにバインドするCollectionViewServiceまたはControlのIDを参照します。&lt;br&gt;&lt;b&gt;ByPage&lt;/b&gt;プロパティはアイテムまたはページごとのナビゲーションを決定します。&lt;br&gt;&lt;b&gt;RepeatButtons&lt;/b&gt;プロパティは次のボタンまたは前のボタンを押したまま繰り返し発動するかどうかを有効にします。&lt;br&gt;&lt;b&gt;HeaderFormat&lt;/b&gt;プロパティはコントロールヘッダーの現在のアイテム/ページの合計値を表示するために使用される文字列をフォーマットします。</value>
    <comment>The CollectionViewNavigator is used for navigating records of data in CollectionView. &lt;br&gt;This demo uses two CollectionViewNavigator controls, the first for navigating by item, the second for navigating by page. It uses following properties: &lt;br&gt; The &lt;b&gt;ItemSourceId&lt;/b&gt; refers the Id of CollectionViewService or Control that binds to data for navigating. &lt;br&gt; The &lt;b&gt;ByPage&lt;/b&gt; property for determining navigating by item or by page.&lt;br&gt; The &lt;b&gt;RepeatButtons&lt;/b&gt; property for enabling whether the next/previous buttons fires repeatedly or not while remaining pressed.&lt;br&gt; The &lt;b&gt;HeaderFormat&lt;/b&gt; property for formatting the string used to display the current total item/page values in the control header.</comment>
  </data>
  <data name="Index_Text0" xml:space="preserve">
    <value>このビューには、CollectionView ASP.NET MVCの基本機能が表示されます。</value>
    <comment>This view shows basic features of CollectionView ASP.NET MVC.</comment>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>&lt;b&gt; refreshOnEdit &lt;/b&gt;プロパティは、アイテムの編集後にCollectionViewが（並べ替え、フィルター、およびグループ化操作を適用して）結果を自動的に更新するかどうかを決定します。 このプロパティはデフォルトで&lt;b&gt; true &lt;/b&gt;に設定されています。これにより、編集操作後にコレクションが常に正しくソート、フィルター、およびグループ化されます。</value>
    <comment>The &lt;b&gt;refreshOnEdit&lt;/b&gt; property determines whether the CollectionView should automatically refresh its results (by applying the sort, filter, and grouping operations) after items are edited. This property is set to &lt;b&gt;true&lt;/b&gt; by default, which ensures the collection is always sorted, filtered, and grouped correctly after any edit operations.</comment>
  </data>
  <data name="Sorting_Text0" xml:space="preserve">
    <value>CollectionView でソートがどのように操作するかを示しています。</value>
    <comment>This view shows how sorting work on CollectionView.</comment>
  </data>
</root>