<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EditorTemplates_Text0" xml:space="preserve">
    <value>このサンプルは、ComponentOne が提供するエディタテンプレートの使用方法を示します。</value>
    <comment>This sample shows the usages of the editor templates offered by C1.</comment>
  </data>
  <data name="EditorTemplates_Text1" xml:space="preserve">
    <value>このテンプレートは、ComponentOne MVC プロジェクトテンプレートと共にそのまま使用できます。</value>
    <comment>You can use these templates out of the box with C1 MVC project template.</comment>
  </data>
  <data name="Form_Text0" xml:space="preserve">
    <value>このサンプルは、フォームの入力コントロールを使用する方法を示します。</value>
    <comment>This sample shows how to use input controls in a form.</comment>
  </data>
  <data name="Form_Text1" xml:space="preserve">
    <value>また、同時にモデル連結を使用することができます。</value>
    <comment>You can also use model binding features at the same time.</comment>
  </data>
  <data name="ModelBinding_Text0" xml:space="preserve">
    <value>このサンプルは、入力コントロールでモデル連結機能を使用する方法を示します。</value>
    <comment>This sample shows how to use model binding features with input controls.</comment>
  </data>
  <data name="ModelBinding_Text1" xml:space="preserve">
    <value>ComponentOne 入力コントロールタグの属性で使用します。</value>
    <comment>Use for attribute in C1 input control tag.</comment></data>
  <data name="EditorTemplates_Text2" xml:space="preserve">
    <value>EditorTemplates の使用（ComponentOne MVC プロジェクトテンプレートを使用）</value>
    <comment>Use EditorTemplates (with C1 MVC project template)</comment>
  </data>
  <data name="Form_Submit" xml:space="preserve">
    <value>送信</value>
    <comment>Submit</comment>
  </data>
  <data name="Index_Text0" xml:space="preserve">
    <value>「n0」形式での非連結</value>
    <comment>Unbound with "n0" format</comment>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>「n」形式での連結</value>
    <comment>Bound with "n" format</comment>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>Min(0)、Max(10)、Step、および「c2」形式での連結</value>
    <comment>Bound with Min(0), Max(10), Step, and "c2" Format</comment>
  </data>
  <data name="Index_Text3" xml:space="preserve">
    <value>プレースホルダでの非連結、IsRequired="false"</value>
    <comment>Unbound with placeholder and IsRequired="false"</comment>
  </data>
  <data name="Index_Text4" xml:space="preserve">
    <value>このサンプルは、InputNumber コントロールの基本的な使用方法を示します。</value>
    <comment>This sample shows the basic usage of the InputNumber control.</comment>
  </data>
  <data name="Index_EnterANumber" xml:space="preserve">
    <value>数字を入力...</value>
    <comment>Enter a number...</comment>
  </data>
  <data name="ModelBinding_Text3" xml:space="preserve">
    <value>モデル連結の使用</value>
    <comment>Use model binding</comment>
  </data>
  <data name="Form_Message" xml:space="preserve">
    <value>CustomerOrder は正常に更新されました、ありがとうございます!</value>
    <comment>CustomerOrder updated successfully, thanks!</comment>
  </data>
  <data name="Index_Text5" xml:space="preserve">
    <value>&lt;i&gt;InputType&lt;/i&gt;プロパティを使用して数字キーボードを表示する（携帯、タブレット、iPadのみ）</value>
    <comment>Showing numeric keyboard using &lt;i&gt;InputType&lt;/i&gt; property (on mobile, tablet, iPad only)</comment>
  </data>
  <data name="Index_Text6" xml:space="preserve">
    <value>高度な設定では、携帯電話、タブレット、iPadなどで適切なソフトキーボードの種類を表示するだけでなく、より多くのマスクに&lt;b&gt;InputType&lt;/b&gt;プロパティを使用することもできます。</value>
    <comment>In advanced, you can also use along with &lt;b&gt;InputType&lt;/b&gt; property for more masks as well as showing appropriate soft keyboard type on mobile phone, tablet, iPad etc.</comment>
  </data>
  <data name="Index_Text7" xml:space="preserve">
    <value>最小値は 100 で、最大値は 1000 です。InvalidInput イベントを使用して無効な文字を確認します。</value>
    <comment>Min (100), Max (1000), check invalid number using InvalidInput event</comment>
  </data>
  <data name="Index_Text8" xml:space="preserve">
    <value>無効な値です。100 から 1000 までの範囲内である必要があります。</value>
    <comment>Invalid input, the value must be between 100 and 1000.</comment>
  </data>
  <data name="HandleWheelDescription_Text0" xml:space="preserve">
    <value>HandleWheelプロパティが&lt;b&gt;true&lt;/b&gt;に設定され​ている場合、ユーザーがマウスホイールで現在の値を編集できます。</value>
    <comment>When HandleWheel is &lt;b&gt;true&lt;/b&gt;, the user can edit the value using the mouse wheel.</comment>
  </data>
</root>