@using C1.Web.Mvc.Grid

@model IEnumerable<ProductSheet>
@{
    var columns = new Action<ListItemFactory<Column, ColumnBuilder>>(bl =>
    {
        bl.Add(cb => cb.Binding("Image").Header(" ").Align("center").Width("80"));
        bl.Add(cb => cb.Binding("Name").Header("Model").Align("center").WordWrap(true));
        bl.Add(cb => cb.Binding("Rating").Header("Rating").Align("center").Format("n1").Width("130"));
        bl.Add(cb => cb.Binding("Price").Header("Price").Align("center").Format("c2").Width("120"));
        bl.Add(cb => cb.Binding("Screen").Header("Screen").Align("center").WordWrap(true));
        bl.Add(cb => cb.Binding("Camera").Header("Camera").Align("center").WordWrap(true));
        bl.Add(cb => cb.Binding("OS").Header("OS").Align("center").WordWrap(true));
        bl.Add(cb => cb.Binding("CPU").Header("CPU").Align("center").WordWrap(true).Width("150"));
        bl.Add(cb => cb.Binding("RAM").Header("RAM").Align("center").Format("n0").Width("80"));
        bl.Add(cb => cb.Binding("ROM").Header("ROM").Align("center").Format("n0").Width("80"));
        bl.Add(cb => cb.Binding("SIM").Header("SIM").Align("center").WordWrap(true));
        bl.Add(cb => cb.Binding("Battery").Header("Battery").Align("center").Format("n0").Width("80"));
    });
    var rows = new Action<ListItemFactory<TransposedGridRow, TransposedGridRowBuilder>>(br =>
    {
        br.Add(cb => cb.Binding("Image").Header(" ").Align("center").Width("80").Height(170));
        br.Add(cb => cb.Binding("Name").Header("Model").Align("center").WordWrap(true));
        br.Add(cb => cb.Binding("Rating").Header("Rating").Align("center").Format("n1").Width("130").Height(40));
        br.Add(cb => cb.Binding("Price").Header("Price").Align("center").Format("c2").Width("120"));
        br.Add(cb => cb.Binding("Screen").Header("Screen").Align("center").WordWrap(true));
        br.Add(cb => cb.Binding("Camera").Header("Camera").Align("center").WordWrap(true));
        br.Add(cb => cb.Binding("OS").Header("OS").Align("center").WordWrap(true));
        br.Add(cb => cb.Binding("CPU").Header("CPU").Align("center").WordWrap(true).Width("150"));
        br.Add(cb => cb.Binding("RAM").Header("RAM").Align("center").Format("n0").Width("80"));
        br.Add(cb => cb.Binding("ROM").Header("ROM").Align("center").Format("n0").Width("80"));
        br.Add(cb => cb.Binding("SIM").Header("SIM").Align("center").WordWrap(true));
        br.Add(cb => cb.Binding("Battery").Header("Battery").Align("center").Format("n0").Width("80"));
    });
}

<h4 class="semi-bold">
    TransposedGrid:
</h4>

@(Html.C1().TransposedGrid<ProductSheet>()
        .AutoGenerateRows(false)
        .Id("theTransposedGrid")
        .CssClass("product-sheet-grid")
        .IsReadOnly(true)
        .Bind(Model)
        .HeadersVisibility(HeadersVisibility.Row)
        .Rows(rows)
        .ItemFormatter("formatItem")
        .OnClientLoadedRows("loadedRows")
        .Height(615)
)

<h4 class="semi-bold">
    FlexGrid:
</h4>

@(Html.C1().FlexGrid<ProductSheet>()
        .AutoGenerateColumns(false)
        .Id("theFlexGrid")
        .CssClass("product-sheet-grid")
        .IsReadOnly(true)
        .Bind(Model)
        //.HeadersVisibility(HeadersVisibility.Column)
        .Columns(columns)
        .ItemFormatter("formatItem")
        .Height(350)
        .DefaultRowSize(50)
        .DefaultColumnSize(210)
)

<style type="text/css">
    .product-sheet-grid {
        max-height: 2000px;
    }

        .product-sheet-grid .wj-rowheaders .wj-cell {
            text-transform: uppercase;
            font-size: 80%;
        }

        .product-sheet-grid .wj-cell {
            padding: 4px;
            border-bottom: none;
        }

            .product-sheet-grid .wj-cell span.rating {
                font-size: x-large;
                color: #e7711b;
                margin-right: 0;
            }

            .product-sheet-grid .wj-cell span.price {
                font-weight: bold;
                color: #d0021b;
            }

        .product-sheet-grid img {
            max-width: 100%;
            max-height: 100%;
        }

    .star {
        font-size: x-large;
        width: auto;
        display: inline-block;
        color: gray;
    }

        .star.half:after {
            content: '\2605';
            color: #e7711b;
            margin-left: -20px;
            width: 10px;
            position: absolute;
            overflow: hidden;
        }
</style>

@section Scripts{
    <script>
        function loadedRows(grid) {
                let g = grid;
                g.columns.defaultSize = 210;
                setTimeout(function () {
                    g.autoSizeColumn(0, true, 30);
                    g.autoSizeRows();
                    //g.rows[0].height = 170;
                });
        }

        function formatItem(panel, r, c, cell) {
            if (panel.cellType == 1) {
                let binding = panel.rows[r].binding || panel.columns[c].binding;
                switch (binding) {
                    case 'Image':
                        cell.innerHTML = '<img src="' + '@Url.Content("~/")' + cell.textContent + '" draggable="false"/>';
                        break;
                    case 'Name':
                        cell.innerHTML = '<b>' + cell.innerHTML + '</b>';
                        break;
                    case 'Price':
                        cell.innerHTML = '<span class="price">' + cell.innerHTML + '</span>';
                        break;
                    // rating as stars
                    case 'Rating':
                        let rating = panel.getCellData(r, c, false) * 1,
                            stars = Math.floor(rating),
                            html = new Array(stars + 1).join('&#x2605;');
                        html = '<span class="rating">' + html + '</span>';
                        if (rating > stars) {
                            html += '<span class="star half">&#9734;</span>';
                        }
                        cell.innerHTML = html;
                        break;
                    case 'RAM':
                    case 'ROM':
                        cell.textContent += "GB";
                        break;
                    case 'Battery':
                        cell.textContent += "mAh";
                        break;
                }
            }
        }
    </script>
}

@section Summary{
    <p>@Html.Raw(Resources.TransposedGrid.Index_Text0)</p>
}

@section Description{
    <p>@Html.Raw(Resources.TransposedGrid.Index_Text1)</p>
}