<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Annotation_Text0" xml:space="preserve">
    <value>The sample below shows basic usage of &lt;b&gt;AnnotationLayer&lt;/b&gt; and various built-in types of Annotations,
    including: &lt;b&gt;Circle&lt;/b&gt;, &lt;b&gt;Ellipse&lt;/b&gt;, &lt;b&gt;Image&lt;/b&gt;, &lt;b&gt;Line&lt;/b&gt;, &lt;b&gt;Polygon&lt;/b&gt;, &lt;b&gt;Rectangle&lt;/b&gt;, &lt;b&gt;Square&lt;/b&gt; and &lt;b&gt;Text&lt;/b&gt;.&lt;br /&gt;
    You can use &lt;b&gt;attachment&lt;/b&gt; attribute to set different attach types of annotation.</value>
  </data>
  <data name="Annotation_Text1" xml:space="preserve">
    <value>The sample below shows how to display annotations easily on a FlexChart to show comments and useful information about data points on the plot area itself.</value>
  </data>
  <data name="Axes_Text0" xml:space="preserve">
    <value>This view shows the &lt;b&gt;FlexChart&lt;/b&gt; with two y-axes.</value>
  </data>
  <data name="Binding_Text0" xml:space="preserve">
    <value>This view shows how you can use the &lt;b&gt;FlexChart&lt;/b&gt; to show two sets of values
        from Model. This is the most common usage scenario for the
        &lt;b&gt;FlexChart&lt;/b&gt;.</value>
  </data>
  <data name="Binding_Text1" xml:space="preserve">
    <value>The sample does the following:</value>
  </data>
  <data name="Binding_Text2" xml:space="preserve">
    <value>In addition to binding, this sample shows the effect of the &lt;b&gt;InterpolateNulls&lt;/b&gt;
        and &lt;b&gt;LegendToggle&lt;/b&gt; properties.
        When you set &lt;b&gt;InterpolateNulls&lt;/b&gt; to true, the chart fills in gaps created by
        null values in the data.
        When you set &lt;b&gt;LegendToggle&lt;/b&gt; to true, the chart toggles the visibility of the
        series when you click its name in the legend.</value>
  </data>
  <data name="BoxWhisker_Text0" xml:space="preserve">
    <value>BoxWhisker series is normally used to compare distributions between different sets of numerical data.</value>
  </data>
  <data name="Bubble_Text0" xml:space="preserve">
    <value>This view shows how to create bubble charts using the &lt;b&gt;FlexChart&lt;/b&gt; control.</value>
  </data>
  <data name="Bubble_Text1" xml:space="preserve">
    <value>Bubble charts are similar to other chart types, except in addition to X and Y you must
        specify a binding for the bubble size. This is done by setting the &lt;b&gt;Binding&lt;/b&gt; property
        to a comma-delimited string that specifies the name of the properties to be used for the
        Y and size values for each bubble.</value>
  </data>
  <data name="Bubble_Text2" xml:space="preserve">
    <value>In this example, the chart is bound to a list containing objects with "X", "Y", and "Size"
        properties. The chart contains a single series and its &lt;b&gt;Binding&lt;/b&gt; property is set to
        the string "Y,Size".</value>
  </data>
  <data name="ChartAnimation_Text0" xml:space="preserve">
    <value>This view shows ChartAnimation for &lt;b&gt;FlexChart&lt;/b&gt;.</value>
  </data>
  <data name="ChartAnimation_Text1" xml:space="preserve">
    <value>You can use different animation modes for FlexChart by setting the &lt;b&gt;AnimationMode&lt;/b&gt; property of the ChartAnimation.</value>
  </data>
  <data name="ChartAnimation_Text2" xml:space="preserve">
    <value>The ChartAnimation class has a &lt;b&gt;Duration&lt;/b&gt; property that allows you to set the length of animation in milliseconds.</value>
  </data>
  <data name="ErrorBar_Text0" xml:space="preserve">
    <value>ErrorBar helps you see margins of error and standard deviations at a glance. They can be shown as a standard error amount, a percentage, or a standard deviation. You can also set your own values to display the exact error amounts you want.</value>
  </data>
  <data name="FinancialChart_Text0" xml:space="preserve">
    <value>This view shows how to create financial charts with the &lt;b&gt;FlexChart&lt;/b&gt;.</value>
  </data>
  <data name="FinancialChart_Text1" xml:space="preserve">
    <value>The &lt;b&gt;FlexChart&lt;/b&gt; supports two types of financial chart: Candlestick and HiLowOpenClose.
        To use them, set the &lt;b&gt;ChartType&lt;/b&gt; property to the type you want, and set the
        series &lt;b&gt;Binding&lt;/b&gt; property to a string that specifies the fields that contain the
        High, Low, Open, and Close values in the data source.</value>
  </data>
  <data name="Funnel_Text0" xml:space="preserve">
    <value>The example shows how to create and customize a Funnel chart.</value>
  </data>
  <data name="Gradients_Text0" xml:space="preserve">
    <value>The FlexChart supports gradient colors.</value>
  </data>
  <data name="Gradients_Text1" xml:space="preserve">
    <value>The gradient descriptor is an expression formatted as follows:</value>
  </data>
  <data name="Gradients_Text2" xml:space="preserve">
    <value>The &amp;lt;coords&amp;gt; specify a linear gradient vector as x1, y1, x2, y2, or a radial gradient as cx, cy, r and optional fx, fy, fr specifying a focal point away from the center of the circle.</value>
  </data>
  <data name="Gradients_Text3" xml:space="preserve">
    <value>Specify &amp;lt;colors&amp;gt; as a list of dash-separated CSS color values. Each color may be followed by a custom offset and opacity value, separated with a colon character.</value>
  </data>
  <data name="Gradients_Text4" xml:space="preserve">
    <value>Linear gradient format example:</value>
  </data>
  <data name="Gradients_Text5" xml:space="preserve">
    <value>Radial gradient format example:</value>
  </data>
  <data name="HeaderFooter_Text0" xml:space="preserve">
    <value>This view shows how you can add a header and a footer to the chart.</value>
  </data>
  <data name="HeaderFooter_Text1" xml:space="preserve">
    <value>The &lt;b&gt;Header&lt;/b&gt; and &lt;b&gt;Footer&lt;/b&gt; properties determine the content, and the
        &lt;b&gt;HeaderStyle&lt;/b&gt; and &lt;b&gt;FooterStyle&lt;/b&gt; properties determine the appearance
        of the header and footer.</value>
  </data>
  <data name="HitTest_Text0" xml:space="preserve">
    <value>This view demonstrates the use of the &lt;b&gt;FlexChart&lt;/b&gt;'s &lt;b&gt;hitTest&lt;/b&gt; method in client-side</value>
  </data>
  <data name="HitTest_Text1" xml:space="preserve">
    <value>The &lt;b&gt;hitTest&lt;/b&gt; method takes a point and returns the nearest chart element. It
        can be used to provide interactive features such as clickable regions, drill-downs, etc.</value>
  </data>
  <data name="HitTest_Text2" xml:space="preserve">
    <value>Move mouse over chart to see information about the chart element that is closest to
        the mouse.</value>
  </data>
  <data name="Index_Text0" xml:space="preserve">
    <value>This view shows the &lt;b&gt;FlexChart&lt;/b&gt;'s basic features by using &lt;b&gt;c1-flex-chart&lt;/b&gt; tag.
        It binds the chart to a Model and allows you to select the chart type, series stacking, and rotation.</value>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>If you move the mouse over a chart element, a tooltip will appear showing details
        about the data point.</value>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>The simplest way to use the FlexChart is to:</value>
  </data>
  <data name="ItemFormatter_Text0" xml:space="preserve">
    <value>This view demonstrates how you can use the &lt;b&gt;FlexChart&lt;/b&gt;'s &lt;b&gt;ItemFormatter&lt;/b&gt;
        property to customize the appearance of the data points based on their values.</value>
  </data>
  <data name="ItemFormatter_Text1" xml:space="preserve">
    <value>In this example, the &lt;b&gt;ItemFormatter&lt;/b&gt; property is a function that sets the
        &lt;b&gt;Fill&lt;/b&gt; property of the chart's rendering engine to a value calculated based
        on the value of the data point being plotted.</value>
  </data>
  <data name="Labels_Text0" xml:space="preserve">
    <value>This view demonstrates how you can use the &lt;b&gt;FlexChart&lt;/b&gt;'s &lt;b&gt;DataLabel&lt;/b&gt;
        property to add labels to each data point.</value>
  </data>
  <data name="Marker_Text0" xml:space="preserve">
    <value>This view shows line chart with vertical marker that follows mouse pointer and displays data values for all series.</value>
  </data>
  <data name="Scaling_Text0" xml:space="preserve">
    <value>Use logarithmic axes to spread clustered data and improve the clarity of your charts without sacrificing accuracy.</value>
  </data>
  <data name="Scaling_Text1" xml:space="preserve">
    <value>Use scaling formats can be used to display axis labels in a clear and concise
    format.</value>
  </data>
  <data name="Scaling_Text2" xml:space="preserve">
    <value>The bubble chart below shows the population (x), GDP (y), and per-capita income
    (bubble size) for about 200 countries. Notice how the use of log-axes spreads
    out the data and makes the chart easy to read.</value>
  </data>
  <data name="Selection_Text0" xml:space="preserve">
    <value>This view demonstrates the &lt;b&gt;FlexChart&lt;/b&gt;'s selection feature.</value>
  </data>
  <data name="Selection_Text1" xml:space="preserve">
    <value>The &lt;b&gt;SelectionMode&lt;/b&gt; property determines whether the chart should select series
        or points when the user clicks on the chart.</value>
  </data>
  <data name="Selection_Text2" xml:space="preserve">
    <value>&lt;b&gt;Note:&lt;/b&gt; In this sample, FlexChart changes its properties from &lt;b&gt;Server-Side&lt;/b&gt;</value>
  </data>
  <data name="SeriesBinding_Text0" xml:space="preserve">
    <value>This view shows how you can use the &lt;b&gt;FlexChart&lt;/b&gt; to show data from
        multiple data sources, one per series.</value>
  </data>
  <data name="SeriesBinding_Text1" xml:space="preserve">
    <value>The sample does the following:</value>
  </data>
  <data name="SeriesBinding_Text2" xml:space="preserve">
    <value>Alternatively, we could have set the &lt;b&gt;BindingX&lt;/b&gt; and &lt;b&gt;Binding&lt;/b&gt; properties on the
        &lt;b&gt;Series&lt;/b&gt; objects instead of setting then on the chart.</value>
  </data>
  <data name="Waterfall_Text0" xml:space="preserve">
    <value>The Waterfall series is normally used to demonstrate how the starting position either increases or decreases through a series of changes.</value>
  </data>
  <data name="Zones_Text0" xml:space="preserve">
    <value>The view creates a scatter chart of student grades, highlighting each grade range using zones.</value>
  </data>
  <data name="Zones_Text1" xml:space="preserve">
    <value>Set the porperty "OnClientRendering" for &lt;b&gt;FlexChart&lt;/b&gt; as a client function name,
        the zones will be drawn in &lt;b&gt;Rendering&lt;/b&gt; event of FlexChart in client-side.</value>
  </data>
  <data name="Annotation_CircleTooltip" xml:space="preserve">
    <value>This is Circle annotation. &lt;/br&gt; radius: 40 &lt;/br&gt; pointIndex: 33 &lt;/br&gt; attachment: DataIndex</value>
  </data>
  <data name="Annotation_SquareTooltip" xml:space="preserve">
    <value>This is square annotation. &lt;/br&gt; length: 80 &lt;/br&gt; pointIndex: 45 &lt;/br&gt; attachment: DataIndex</value>
  </data>
  <data name="Annotation_LineTooltip" xml:space="preserve">
    <value>This is line annotation. &lt;/br&gt; start: { x: 50, y: 150 } end: { x: 240, y: 350 } &lt;/br&gt; attachment: Absolute</value>
  </data>
  <data name="Annotation_TextTooltip" xml:space="preserve">
    <value>This is text annotation.&lt;/br&gt; point: { x: 0.55, y: 0.15 }&lt;/br&gt; attachment: Relative</value>
  </data>
  <data name="Annotation_EllipseTooltip" xml:space="preserve">
    <value>This is ellipse annotation.&lt;/br&gt; point: { x: 0.4, y: 0.5 }&lt;/br&gt; attachment: Relative</value>
  </data>
  <data name="Annotation_RectTooltip" xml:space="preserve">
    <value>This is rectangle annotation.&lt;/br&gt; point:{ x: new DateTime(2014, 2, 11), y: 30 }&lt;/br&gt; attachment: DataCoordinate</value>
  </data>
  <data name="Annotation_ImageTooltip" xml:space="preserve">
    <value>This is image annotation.&lt;/br&gt; point:{x: new DateTime(2014, 1, 26), y: 30}&lt;/br&gt; attachment: DataCoordinate</value>
  </data>
  <data name="Annotation_PolygonTooltip" xml:space="preserve">
    <value>This is polygon annotation.&lt;/br&gt; paths: [(200,0),(150,50),(175,100),(255,100),(250, 50)]&lt;/br&gt; attachment: Absolute</value>
  </data>
  <data name="Annotation_Basic" xml:space="preserve">
    <value>Basic</value>
  </data>
  <data name="Annotation_CircleContent" xml:space="preserve">
    <value>DataIndex</value>
  </data>
  <data name="Annotation_SquareContent" xml:space="preserve">
    <value>DataIndex</value>
  </data>
  <data name="Annotation_LineContent" xml:space="preserve">
    <value>Absolute</value>
  </data>
  <data name="Annotation_TextContent" xml:space="preserve">
    <value>Relative</value>
  </data>
  <data name="Annotation_EllipseContent" xml:space="preserve">
    <value>Relative</value>
  </data>
  <data name="Annotation_RectangleContent" xml:space="preserve">
    <value>DataCoordinate</value>
  </data>
  <data name="Annotation_PolygonContent" xml:space="preserve">
    <value>Absolute</value>
  </data>
  <data name="Annotation_Advanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="Annotation_News" xml:space="preserve">
    <value>2015/3/2, Both JPMorgan Chase and Morgan Stanley offered up favorable comments on the social media giant, with JPMorgan citing that Facebook's core services accounted for 24% of all smartphone activity in the u.s. the figure was up 2% from reported usage in ...</value>
  </data>
  <data name="Annotation_Tooltip1" xml:space="preserve">
    <value>Results of Operations and Financial Condition.</value>
  </data>
  <data name="Annotation_Tooltip2" xml:space="preserve">
    <value>Completion of Acquisition or Disposition of Assets, Change in Directors or Principal.</value>
  </data>
  <data name="Annotation_Tooltip3" xml:space="preserve">
    <value>Facebook Inc Earnings Call scheduled for 5:00 pm ET today.</value>
  </data>
  <data name="Annotation_Tooltip4" xml:space="preserve">
    <value>Coverage initiated on Facebook by Brean Capital.</value>
  </data>
  <data name="Annotation_Content1" xml:space="preserve">
    <value>Alibaba Group Holding Ltd (BABA) and ...</value>
  </data>
  <data name="Annotation_Content2" xml:space="preserve">
    <value>Facebook Inc to acquire LiveRail.</value>
  </data>
  <data name="Annotation_Content3" xml:space="preserve">
    <value>Rising wedge</value>
  </data>
  <data name="Annotation_Text2" xml:space="preserve">
    <value>This page shows how to display annotations on FlexChart.</value>
  </data>
  <data name="Axes_Sales" xml:space="preserve">
    <value>Sales</value>
  </data>
  <data name="Axes_MultipleAxes" xml:space="preserve">
    <value>Multiple axes</value>
  </data>
  <data name="Binding_ChartBinding" xml:space="preserve">
    <value>Chart binding</value>
  </data>
  <data name="Binding_Li1" xml:space="preserve">
    <value>Bind the FlexChart with a IEnumerable DataSource, each item contains value "Date", "SalesInUSA", "SalesInJapan".
            Set the X data label as "Date".</value>
  </data>
  <data name="Binding_Li2" xml:space="preserve">
    <value>Add a &lt;b&gt;Series&lt;/b&gt; object to the FlexChart's &lt;b&gt;Series&lt;/b&gt; array and
            set its &lt;b&gt;Binding&lt;/b&gt; property to "SalesInUSA".</value>
  </data>
  <data name="Binding_Li3" xml:space="preserve">
    <value>Add a second &lt;b&gt;Series&lt;/b&gt; object to the FlexChart's &lt;b&gt;Series&lt;/b&gt; array
            and set its &lt;b&gt;Binding&lt;/b&gt; property to "SalesInJapan".</value>
  </data>
  <data name="Bubble_Bubble" xml:space="preserve">
    <value>Bubble</value>
  </data>
  <data name="ChartAnimation_ChartType" xml:space="preserve">
    <value>Chart Type</value>
  </data>
  <data name="ChartAnimation_AnimationMode" xml:space="preserve">
    <value>AnimationMode</value>
  </data>
  <data name="ChartAnimation_Easing" xml:space="preserve">
    <value>Easing</value>
  </data>
  <data name="ChartAnimation_Duration" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="FinancialChart_FinancialChart" xml:space="preserve">
    <value>Financial chart</value>
  </data>
  <data name="Funnel_NeckWidth" xml:space="preserve">
    <value>Neck Width:</value>
  </data>
  <data name="Funnel_NeckHeight" xml:space="preserve">
    <value>Neck Height:</value>
  </data>
  <data name="Gradients_Text6" xml:space="preserve">
    <value>The &amp;lt;type&amp;gt; can be either linear or radial.
        The uppercase L or R letters indicate absolute coordinates offset from the SVG surface.
        Lowercase l or r letters indicate coordinates calculated relative to the element to which the gradient is applied.</value>
  </data>
  <data name="HeaderFooter_ChartHeaderAndFooter" xml:space="preserve">
    <value>Chart header and footer</value>
  </data>
  <data name="HeaderFooter_Header" xml:space="preserve">
    <value>Sales In China In 3 Months</value>
  </data>
  <data name="HeaderFooter_Footer" xml:space="preserve">
    <value>Footer (c) 2015</value>
  </data>
  <data name="HitTest_HitTest" xml:space="preserve">
    <value>Hit Test</value>
  </data>
  <data name="HitTest_SeriesName" xml:space="preserve">
    <value>Series name:</value>
  </data>
  <data name="HitTest_PointIndex" xml:space="preserve">
    <value>Point index:</value>
  </data>
  <data name="Index_Introduction" xml:space="preserve">
    <value>Introduction</value>
  </data>
  <data name="Index_Li1" xml:space="preserve">
    <value>Bind the FlexChart with an IEnumerable DataSource.
            by setting &lt;b&gt;source-collection&lt;/b&gt; attribute of &lt;b&gt;c1-items-source&lt;/b&gt; sub-tag to Model.</value>
  </data>
  <data name="Index_Li2" xml:space="preserve">
    <value>Set &lt;b&gt;binding-x&lt;/b&gt; attribute to the name of the property that
            contains the X values (in this example fruit names), and it will map the field of 
            chart's &lt;b&gt;ItemsSource&lt;/b&gt;.</value>
  </data>
  <data name="Index_Li3" xml:space="preserve">
    <value>Add one or more &lt;b&gt;c1-flex-chart-series&lt;/b&gt; sub-tags and set their 
            &lt;b&gt;binding&lt;/b&gt; attribute to the name of the property that
            contains the Y values (in this example the months of March, April, and May).</value>
  </data>
  <data name="ItemFormatter_ItemFormatter" xml:space="preserve">
    <value>Item Formatter</value>
  </data>
  <data name="Labels_Labels" xml:space="preserve">
    <value>Labels</value>
  </data>
  <data name="Marker_ChartMarker" xml:space="preserve">
    <value>Chart marker</value>
  </data>
  <data name="PanningAndScaling_MouseAction" xml:space="preserve">
    <value>Mouse action:</value>
  </data>
  <data name="PanningAndScaling_TouchAction" xml:space="preserve">
    <value>Touch action:</value>
  </data>
  <data name="PanningAndScaling_Li1" xml:space="preserve">
    <value>Zoom mode: Select the chart area to zoom in, or scroll mouse wheel to zoom in/out.</value>
  </data>
  <data name="PanningAndScaling_Li2" xml:space="preserve">
    <value>Pan mode: Click and drag within the chart area to change the display range.</value>
  </data>
  <data name="PanningAndScaling_Li3" xml:space="preserve">
    <value>Pan the chart area to change the display range; pinch it to zoom in/out.</value>
  </data>
  <data name="PlotAreas_Text0" xml:space="preserve">
    <value>This view shows the &lt;b&gt;FlexChart&lt;/b&gt; with several plot areas.</value>
  </data>
  <data name="RemoteBind_Text0" xml:space="preserve">
    <value>This view shows how to bind FlexChart to a remote data.</value>
  </data>
  <data name="Scaling_ChartScaling" xml:space="preserve">
    <value>Chart Scaling</value>
  </data>
  <data name="Selection_ChartType" xml:space="preserve">
    <value>ChartType:</value>
  </data>
  <data name="Selection_Stacking" xml:space="preserve">
    <value>Stacking:</value>
  </data>
  <data name="Selection_SelectionMode" xml:space="preserve">
    <value>Selection Mode:</value>
  </data>
  <data name="SeriesBinding_ChartSeriesBinding" xml:space="preserve">
    <value>Chart series binding</value>
  </data>
  <data name="SeriesBinding_Li1" xml:space="preserve">
    <value>Set the chart's &lt;b&gt;BindingX&lt;/b&gt; and &lt;b&gt;Binding&lt;/b&gt; properties to "X" and "Y".</value>
  </data>
  <data name="SeriesBinding_Li2" xml:space="preserve">
    <value>Add a &lt;b&gt;Series&lt;/b&gt; object to the chart's &lt;b&gt;Series&lt;/b&gt; array and bind it with an array of objects that have "X" and "Y" properties.</value>
  </data>
  <data name="SeriesBinding_Li3" xml:space="preserve">
    <value>Add a second &lt;b&gt;Series&lt;/b&gt; object to the chart's &lt;b&gt;Series&lt;/b&gt; array and bind it with a different array of objects that have "X" and "Y"
            properties.</value>
  </data>
  <data name="Zones_Zones" xml:space="preserve">
    <value>Zones</value>
  </data>
  <data name="Tooltips_Text0" xml:space="preserve">
    <value>This example shows how to specify style for Tooltips using CssClass properties.</value>
  </data>
  <data name="Tooltips_Text1" xml:space="preserve">
    <value>The Tooltips style can be changed by setting CssClass property with CSS like following:</value>
  </data>
  <data name="SeriesCustomization_Text0" xml:space="preserve">
    <value>This view demonstrates how you can customize specific series of FlexChart.</value>
  </data>
  <data name="SeriesCustomization_Text1" xml:space="preserve">
    <value>The first series (Cos(x)) uses default setting to draw.</value>
  </data>
  <data name="SeriesCustomization_Text2" xml:space="preserve">
    <value>The second series (Sin(x)):</value>
  </data>
  <data name="SeriesCustomization_Text3" xml:space="preserve">
    <value>Uses &lt;b&gt;ItemFormater&lt;/b&gt; property of series as a function to customize the appearance of the data points calcutated based on their values being plotted.</value>
  </data>
  <data name="SeriesCustomization_Text4" xml:space="preserve">
    <value>Uses &lt;b&gt;TooltipContent&lt;/b&gt; property of series to customize the content of tooltip showing when move mouse on it.</value>
  </data>
  <data name="Index_Text3" xml:space="preserve">
    <value>Uses &lt;b&gt;LegendOrientation&lt;/b&gt; to determine the orientation of the legend.</value>
  </data>
  <data name="Index_Text4" xml:space="preserve">
    <value>Uses &lt;b&gt;Legend.MaxSize&lt;/b&gt; to Gets or sets the maximum legend size (width for left or right position and height for top or bottom position).
The size can be specified in pixels: MaxSize = '100px' or percents: MaxSize = '50%'.</value>
  </data>
  <data name="RangeArea_Text0" xml:space="preserve">
    <value>This view shows a range area chart. The Range Area Chart type is used to simultaneously show high and low values in a given time period. The X axis usually represents a time scale to display how data changes over time.</value>
  </data>
  <data name="StepChart_Text0" xml:space="preserve">
    <value>This demo shows line, symbols and area step charts. Step charts are useful to display any type of data that has changes at irregular intervals of time, for example, interest rates vs time.</value>
  </data>
  <data name="BreakEven_Text0" xml:space="preserve">
    <value>This view shows how to create BreakEven charts using the &lt;b&gt;FlexChart&lt;/b&gt; control. A break even chart is a chart that shows the sales volume level at which total costs equal sales.</value>
  </data>
  <data name="RenderEngine_Description_Text0" xml:space="preserve">
    <value>The sample shows a scatter chart with large data which uses high performance WebGL rendering.</value>
  </data>
</root>