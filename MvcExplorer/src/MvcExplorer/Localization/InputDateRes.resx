<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Index_Text0" xml:space="preserve">
    <value>This sample shows the basic usage of the InputDate control.</value>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>Select a date</value>
  </data>
  <data name="Validation_Text0" xml:space="preserve">
    <value>Use this &lt;b&gt;InputDate&lt;/b&gt; control to select a date. 
    Notice you won't be able to select or type weekends.</value>
  </data>
  <data name="Validation_Text1" xml:space="preserve">
    <value>This sample shows how to set &lt;b&gt;item-validator&lt;/b&gt; attribute to a function to determine whether dates
    are valid for selection and typing.</value>
  </data>
  <data name="Validation_Text2" xml:space="preserve">
    <value>It also show how to use InvalidInput event to check invalid date and keep focus for correcting it.</value>
  </data>
  <data name="Validation_Text3" xml:space="preserve">
    <value>The following sample checks invalid date using InvalidInput event.</value>
  </data>
  <data name="Validation_Text4" xml:space="preserve">
    <value>Invalid input, the value must be date in the current year.</value>
  </data>
  <data name="Range_Text0" xml:space="preserve">
    <value>RangeMin</value>
  </data>
  <data name="Range_Text1" xml:space="preserve">
    <value>RangeMax</value>
  </data>
  <data name="Range_Text2" xml:space="preserve">
    <value>Selected range of days:</value>
  </data>
  <data name="Range_Text3" xml:space="preserve">
    <value>This sample shows how to use InputDate with SelectionMode.Range</value>
  </data>
  <data name="Range_Text4" xml:space="preserve">
    <value>Ranges are defined by the &lt;b&gt;Value&lt;/b&gt; and &lt;b&gt;RangeEnd&lt;/b&gt; properties.</value>
  </data>
  <data name="Range_Text5" xml:space="preserve">
    <value>To select a date range with the mouse, the user should click the starting date &lt;b&gt;Value&lt;/b&gt; and then the ending date &lt;b&gt;RangeEnd&lt;/b&gt;.</value>
  </data>
  <data name="Range_Text6" xml:space="preserve">
    <value>To select a date range with the keyboard, the user should use the cursor keys to select the starting date, then press the shift key and extend the selection to select the ending date.</value>
  </data>
  <data name="WeekBeforeAfterHeader_Text0" xml:space="preserve">
    <value>Set value of WeekBefore and WeekAfter for InputDate</value>
  </data>
  <data name="WeekBefore_Text0" xml:space="preserve">
    <value>WeekBefore</value>
  </data>
  <data name="WeekAfter_Text0" xml:space="preserve">
    <value>WeekAfter</value>
  </data>
  <data name="MonthCount_Text0" xml:space="preserve">
    <value>MonthCount</value>
  </data>
  <data name="HandleWheel_Text0" xml:space="preserve">
    <value>HandleWheel</value>
  </data>
  <data name="HandleWheel_Text1" xml:space="preserve">
    <value>&lt;i&gt;HandleWheel&lt;/i&gt;: Determines whether the user can edit the current value using the mouse wheel.</value>
  </data>
</root>