//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option or rebuild the Visual Studio project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Web.Application.StronglyTypedResourceProxyBuilder", "14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class TabPanel {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TabPanel() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Resources.TabPanel", global::System.Reflection.Assembly.Load("App_GlobalResources"));
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TabPanel control implements WAI-ARIA accessibility guidelines..
        /// </summary>
        internal static string Accessibility_Text0 {
            get {
                return ResourceManager.GetString("Accessibility_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TabPanel implements WAI-ARIA accessibility guidelines.
        ///        All tab elements have the proper role attributes as well as all applicable ARIA attributes..
        /// </summary>
        internal static string Accessibility_Text1 {
            get {
                return ResourceManager.GetString("Accessibility_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The example below assigns unique IDs to the tab headers and panes,
        ///        which the TabPanel automatically uses to generate &quot;aria-controls&quot; and &quot;aria-labelledby&quot; attributes..
        /// </summary>
        internal static string Accessibility_Text2 {
            get {
                return ResourceManager.GetString("Accessibility_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The example also adds a &quot;wj-state-active&quot; class to the &quot;America&quot; pane in markup to define the tab that is initially selected.
        ///        Without that, the first tab would have been selected by default..
        /// </summary>
        internal static string Accessibility_Text3 {
            get {
                return ResourceManager.GetString("Accessibility_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finally, the example shows the effect of the &lt;b&gt;AutoSwitch&lt;/b&gt; property,
        ///        which affects how the control handles the tab and cursor keys.
        ///        For a detailed discussion of this topic, please see the
        ///        &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus&quot; target=&quot;_blank&quot;&gt;W3C ARIA&lt;/a&gt; practices
        ///        and &lt;a href=&quot;http://simplyaccessible.com/article/danger-aria-tabs/&quot; target=&quot;_blank&quot;&gt;SimplyAccessible&lt;/a&gt; article..
        /// </summary>
        internal static string Accessibility_Text4 {
            get {
                return ResourceManager.GetString("Accessibility_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to programmatically add tabs to TabPanel control..
        /// </summary>
        internal static string CreatingProgrammatically_Text0 {
            get {
                return ResourceManager.GetString("CreatingProgrammatically_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In some cases, you may want to add tabs to a TabPanel control programmatically rather than using HTML markup..
        /// </summary>
        internal static string CreatingProgrammatically_Text1 {
            get {
                return ResourceManager.GetString("CreatingProgrammatically_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can do this using the &lt;b&gt;Tabs&lt;/b&gt; property, which provides access to the collection of tabs in the TabPanel..
        /// </summary>
        internal static string CreatingProgrammatically_Text2 {
            get {
                return ResourceManager.GetString("CreatingProgrammatically_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, we add several Tab objects to the &lt;b&gt;Tabs&lt;/b&gt; collection. Each Tab object is defined by a header and a pane elements..
        /// </summary>
        internal static string CreatingProgrammatically_Text3 {
            get {
                return ResourceManager.GetString("CreatingProgrammatically_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can also use the &lt;b&gt;Tabs&lt;/b&gt; property to remove, modify, or reorder the tabs within the TabPanel..
        /// </summary>
        internal static string CreatingProgrammatically_Text4 {
            get {
                return ResourceManager.GetString("CreatingProgrammatically_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to hide built-in content element in TabPanel control..
        /// </summary>
        internal static string DetachedPanels_Text0 {
            get {
                return ResourceManager.GetString("DetachedPanels_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TabPanel has a built-in panel that shows the content of the selected tab.
        ///        In some cases, you may want to display the content in a different element.
        ///        To do that, simply hide the built-in content element and use the &lt;b&gt;OnClientSelectedIndexChanged&lt;/b&gt; event to update the content..
        /// </summary>
        internal static string DetachedPanels_Text1 {
            get {
                return ResourceManager.GetString("DetachedPanels_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to disable or hide individual tabs in TabPanel control..
        /// </summary>
        internal static string DisabledInvisibleTabs_Text0 {
            get {
                return ResourceManager.GetString("DisabledInvisibleTabs_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can disable or hide individual tabs using the Tab&apos;s &lt;b&gt;IsDisabled&lt;/b&gt; and &lt;b&gt;IsVisible&lt;/b&gt; properties..
        /// </summary>
        internal static string DisabledInvisibleTabs_Text1 {
            get {
                return ResourceManager.GetString("DisabledInvisibleTabs_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows hosting C1 MVC controls in TabPanel control..
        /// </summary>
        internal static string HostingControls_Text0 {
            get {
                return ResourceManager.GetString("HostingControls_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the main benefits of the TabPanel control is that it automatically updates any C1 MVC controls it contains when a new tab is selected..
        /// </summary>
        internal static string HostingControls_Text1 {
            get {
                return ResourceManager.GetString("HostingControls_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using other tab controls, you must add code to refresh any C1 MVC controls contained in the tabs..
        /// </summary>
        internal static string HostingControls_Text2 {
            get {
                return ResourceManager.GetString("HostingControls_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to create TabPanel control with HTML markup..
        /// </summary>
        internal static string Index_Text0 {
            get {
                return ResourceManager.GetString("Index_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The markup used to initialize TabPanel controls consists of one element per tab.
        ///        Each child element contains two children: the tab header and the tab content..
        /// </summary>
        internal static string Index_Text1 {
            get {
                return ResourceManager.GetString("Index_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We suggest you use anchor elements (tag a) for the tab headers because
        ///        they are semantically more meaningful than plain div elements..
        /// </summary>
        internal static string Index_Text2 {
            get {
                return ResourceManager.GetString("Index_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TabPanel control supports right to left automatically..
        /// </summary>
        internal static string RightToLeft_Text0 {
            get {
                return ResourceManager.GetString("RightToLeft_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some languages render content from the right to the left of the page (Arabic and Hebrew are typical examples) .
        ///        HTML accommodates this with the &apos;dir&apos; attribute. Setting &apos;dir&apos; to &apos;rtl&apos; on any element causes the element&apos;s content to flow from right to left..
        /// </summary>
        internal static string RightToLeft_Text1 {
            get {
                return ResourceManager.GetString("RightToLeft_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TabPanel supports this automatically. If the element hosting the control has the &apos;dir&apos; attribute set to &apos;rtl&apos;,
        ///        the panel will render with tabs aligned from right to left. You don&apos;t have to set any properties on the control..
        /// </summary>
        internal static string RightToLeft_Text2 {
            get {
                return ResourceManager.GetString("RightToLeft_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note that the &apos;dir&apos; attribute value is inherited, so if you set it on the body tag for example,
        ///        the entire page will be rendered from right to left, including the TabPanel..
        /// </summary>
        internal static string RightToLeft_Text3 {
            get {
                return ResourceManager.GetString("RightToLeft_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note also that CSS has a &apos;direction&apos; attribute that performs the same function as the &apos;dir&apos; element attribute.
        ///        The &apos;dir&apos; attribute is generally considered more appropriate for several reasons, including the fact that it can be used in CSS rules..
        /// </summary>
        internal static string RightToLeft_Text4 {
            get {
                return ResourceManager.GetString("RightToLeft_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to customize the appearance of TabPanel control..
        /// </summary>
        internal static string Styling_Text0 {
            get {
                return ResourceManager.GetString("Styling_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can customize the appearance of the TabPanel using CSS..
        /// </summary>
        internal static string Styling_Text1 {
            get {
                return ResourceManager.GetString("Styling_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TabPanel control has a simple layout, which makes it easy to style using CSS.
        ///        For example, tabs appear above the content by default, but you can use CSS to change their position
        ///        and show the below or vertically stacked, to the left or to the right of the content..
        /// </summary>
        internal static string Styling_Text2 {
            get {
                return ResourceManager.GetString("Styling_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example changes the appearance of the Tabs and lets you select the tab alignment and whether or not to use animation when switching tabs..
        /// </summary>
        internal static string Styling_Text3 {
            get {
                return ResourceManager.GetString("Styling_Text3", resourceCulture);
            }
        }
    }
}
