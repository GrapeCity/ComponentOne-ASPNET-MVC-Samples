<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
  
		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Index_Text0" xml:space="preserve">
    <value>ハロー ポップアップ&lt;br&gt;これは複数行メッセージです！</value>
  <comment>Hello Popup&lt;br&gt;This is a multiline message!</comment></data>
  <data name="Index_Title" xml:space="preserve">
    <value>タイトル</value>
    <comment>Title</comment>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>Popup は、オーナー要素を使用してポップアップの表示/非表示を制御することができます。show-trigger 属性と hide-trigger 属性は、オーナー要素がクリックされたときやポップアップがフォーカスを失ったときに、ポップアップを表示または非表示にするかどうかを決定します。</value>
    <comment>Popups may have owner elements that can be used to control their visibility. The show-trigger and hide-trigger attributes determine whether the Popups should be shown or hidden when the owner element is clicked or when the popup loses the focus.</comment>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>ポップオーバー（オーナー要素を持つポップアップ）</value>
    <comment>Popovers (Popups with owner elements)</comment>
  </data>
  <data name="Index_ClickToShowPopupForm" xml:space="preserve">
    <value>クリックしてポップアップフォームを表示</value>
    <comment>Click to show Popup form</comment>
  </data>
  <data name="Index_Description1" xml:space="preserve">
    <value>(ShowTrigger=Click、HideTrigger=Click, IsResizable=True)</value>
    <comment>(ShowTrigger=Click, HideTrigger=Click, IsResizable=True)</comment>
  </data>
  <data name="Index_Description2" xml:space="preserve">
    <value>(ShowTrigger=Click、HideTrigger=Blur)</value>
    <comment>(ShowTrigger=Click, HideTrigger=Blur)</comment>
  </data>
  <data name="Index_Description3" xml:space="preserve">
    <value>ShowTrigger=Click、HideTrigger=None)</value>
    <comment>ShowTrigger=Click, HideTrigger=None)</comment>
  </data>
  <data name="Index_Close" xml:space="preserve">
    <value>閉じる</value>
    <comment>Close</comment>
  </data>
  <data name="Index_SaveChanges" xml:space="preserve">
    <value>変更の保存</value>
    <comment>Save changes</comment>
  </data>
  <data name="Index_EnterEmail" xml:space="preserve">
    <value>電子メールを入力</value>
    <comment>Enter email</comment>
  </data>
  <data name="PopupDialog_Text0" xml:space="preserve">
    <value>ダイアログ（オーナーなしのポップアップ）</value>
    <comment>Dialogs (Popups with no owner)</comment>
  </data>
  <data name="PopupDialog_LogIn" xml:space="preserve">
    <value>ログイン</value>
    <comment>Log in</comment>
  </data>
  <data name="PopupDialog_Email" xml:space="preserve">
    <value>電子メール：</value>
    <comment>Email:</comment>
  </data>
  <data name="PopupDialog_Password" xml:space="preserve">
    <value>パスワード：</value>
    <comment>Password:</comment>
  </data>
  <data name="PopupDialog_RememberMe" xml:space="preserve">
    <value>このアカウントを記憶する</value>
    <comment>Remember Me</comment>
  </data>
  <data name="PopupDialog_Text1" xml:space="preserve">
    <value>アカウントをお持ちでない方はこちら</value>
    <comment>Don't have an account yet?</comment>
  </data>
  <data name="PopupDialog_Text2" xml:space="preserve">
    <value>Facebook アカウントでログイン</value>
    <comment>Log in using your Facebook account</comment>
  </data>
  <data name="PopupDialog_Text3" xml:space="preserve">
    <value>Facebook を介してログイン中...</value>
    <comment>logging in via Facebook...</comment>
  </data>
  <data name="PopupDialog_Text4" xml:space="preserve">
    <value>Google アカウントでログイン</value>
    <comment>Log in using your Google account</comment>
  </data>
  <data name="PopupDialog_Text5" xml:space="preserve">
    <value>Google を介してログイン中...</value>
    <comment>logging in via Google...</comment>
  </data>
  <data name="PopupDialog_CreateAccount" xml:space="preserve">
    <value>アカウントの作成</value>
    <comment>Create Account</comment>
  </data>
  <data name="PopupDialog_EditAccount" xml:space="preserve">
    <value>アカウントの編集</value>
    <comment>Edit Account</comment>
  </data>
  <data name="PopupDialog_Name" xml:space="preserve">
    <value>名前：</value>
    <comment>Name:</comment>
  </data>
  <data name="PopupDialog_ConfirmPassword" xml:space="preserve">
    <value>パスワードの確認：</value>
    <comment>Confirm Password:</comment>
  </data>
  <data name="PopupDialog_CurrentPassword" xml:space="preserve">
    <value>現在のパスワード：</value>
    <comment>Current Password:</comment>
  </data>
  <data name="PopupDialog_NewName" xml:space="preserve">
    <value>新しい名前：</value>
    <comment>New Name:</comment>
  </data>
  <data name="PopupDialog_NewPassword" xml:space="preserve">
    <value>新しいパスワード：</value>
    <comment>New Password:</comment>
  </data>
  <data name="PopupDialog_ConfirmNewPassword" xml:space="preserve">
    <value>新しいパスワードの確認：</value>
    <comment>Confirm New Password:</comment>
  </data>
  <data name="PopupDialog_UpdateAccount" xml:space="preserve">
    <value>アカウントの更新</value>
    <comment>Update Account</comment>
  </data>
  <data name="PopupDialog_Text6" xml:space="preserve">
    <value>ダイアログは、オーナー要素を持たない Popup です。表示するには、show メソッドを呼び出す必要があります。&lt;br /&gt;
    ダイアログは、モーダルまたはモードレスにできます。モーダルダイアログは、表示されるとダイアログの背景が暗くなります。また、hide-trigger プロパティが None に設定されている場合は、ダイアログがフォーカスを失うことはできず、終了するには、ユーザーが［Esc］キーを押すか、ダイアログ上の要素をクリックする必要があります。</value>
    <comment>Dialogs are Popups with no owner element. They must be shown by calling the show method.&lt;br /&gt;
    Dialogs can be modal or modeless. Modal dialogs have a dark backdrop, and if their hide-trigger attribute is set to None, they cannot lose focus and must be dismissed by the user, either by pressing escape or by clicking an element on the dialog itself.</comment>
  </data>
  <data name="PopupDialog_Title4" xml:space="preserve">
    <value>4 文字以上を入力してください。</value>
    <comment>Please enter 4 characters or more.</comment>
  </data>
  <data name="PopupDialog_Title2" xml:space="preserve">
    <value>2 文字以上を入力してください。</value>
    <comment>Please enter 2 characters or more.</comment>
  </data>
  <data name="Index_Text3" xml:space="preserve">
    <value>&lt;b&gt;IsResizable ：&lt;/b&gt;マウスでエッジをドラッグしてポップアップのサイズを変更できるかどうかを決定する値を取得または設定します。</value>
    <comment>&lt;b&gt;IsResizable&lt;/b&gt;: Gets or sets a value that determines whether the popup can be resized by dragging its edges with the mouse.</comment>
  </data>
  <data name="Index_Description4" xml:space="preserve">
    <value>ShowTrigger および HideTrigger プロパティを以下のように設定します。</value>
    <comment>ShowTrigger and HideTrigger properties will follow the Settings below</comment>
  </data>
  <data name="Index_Description5" xml:space="preserve">
    <value>ShowTrigger および HideTrigger プロパティを選択して、ポップアップを表示または非表示にします。</value>
    <comment>Please select the Trigger properties, to change whenever the Popup will show or hidden.</comment>
  </data>
  <data name="Index_Title4" xml:space="preserve">
    <value>トリガーのカスタマイズ</value>
    <comment>Customize Trigger</comment>
  </data>
  <data name="PopupPosition_Description" xml:space="preserve">
    <value>オーナ要素に対してポップアップを表示する必要があるポップアップの位置を設定します。</value>
    <comment>Change Popup position to set where the popup should be displayed with respect to the owner element.</comment>
  </data>
  <data name="Index_ClickToShowPopupWithEvents" xml:space="preserve">
    <value>クリックしてポップアップとイベントを表示します。</value>
    <comment>Click to show Popup with Events</comment>
  </data>
  <data name="Index_IsDraggable_Description" xml:space="preserve">
    <value>&lt;b&gt;IsDraggable&lt;/b&gt;プロパティ： ポップアップをそのヘッダーでマウスによってドラッグできるかどうかを示す値を取得または設定します。ヘッダは、 '.wj-dialog-header' または '.modal-header' の　CSS　セレクタによって識別されます。 ダイアログに 'wj-dialog-header' または '.modal-header'　クラスを持つ要素が含まれていない場合、 ユーザーがポップアップをドラッグすることができません。</value>
    <comment>&lt;b&gt;IsDraggable&lt;/b&gt;: Gets or sets a value that determines whether the popup can be dragged with the mouse by its header. The header is identified by the '.wj-dialog-header' or '.modal-header' CSS selectors. If the dialog does not contain any elements with the 'wj-dialog-header'or 'modal-header' classes, users will not be able to drag the popup.</comment>
  </data>
  <data name="Index_OnClientDragged_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientDragged&lt;/b&gt;プロパティ： ポップアップがドラッグされた後に発生するクライアント側の関数を取得または設定します。</value>
    <comment>&lt;b&gt;OnClientDragged&lt;/b&gt;: Gets or sets the client function which occurs after the Popup has been dragged.</comment>
  </data>
  <data name="Index_OnClientDragging_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientDragging&lt;/b&gt;プロパティ： ポップアップがドラッグされようとしているときに発生するクライアント側の関数を取得または設定します。</value>
    <comment>&lt;b&gt;OnClientDragging&lt;/b&gt;: Gets or sets the client function which occurs when the Popup is about to be dragged.</comment>
  </data>
  <data name="Index_OnClientPositionChanged_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientPositionChanged&lt;/b&gt;プロパティ： Dragging イベントと Dragged イベントの間で、ユーザーがポップアップを移動するときに発生するクライアント関数を取得または設定します。</value>
    <comment>&lt;b&gt;OnClientPositionChanged&lt;/b&gt;: Gets or sets the client function which occurs while the user moves the Popup, between the Dragging and Dragged events, after the PositionChanging event.</comment>
  </data>
  <data name="Index_OnClientPositionChanging_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientPositionChanging&lt;/b&gt;プロパティ： Dragging イベントと Dragged イベントの間で、ユーザーがポップアップを移動するときに発生するクライアント関数を取得または設定します。</value>
    <comment>&lt;b&gt;OnClientPositionChanging&lt;/b&gt;: Gets or sets the client function which occurs while the user moves the Popup, between the Dragging and Dragged events.</comment>
  </data>
  <data name="Index_OnClientResized_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientResized&lt;/b&gt;プロパティ： ポップアップがサイズ変更された後に発生するクライアント関数を取得または設定します。</value>
    <comment>&lt;b&gt;OnClientResized&lt;/b&gt;: Gets or sets the client function which occurs after the Popup has been resized.</comment>
  </data>
  <data name="Index_OnClientResizing_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientResizing&lt;/b&gt;プロパティ： ポップアップがサイズ変更されようとしているときに発生するクライアント関数を取得または設定します。
</value>
    <comment>&lt;b&gt;OnClientResizing&lt;/b&gt;: Gets or sets the client function which occurs when the Popup is about to be resized.</comment>
  </data>
  <data name="Index_OnClientSizeChanged_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientSizeChanged&lt;/b&gt;プロパティ： Resizing イベントと Resized イベントの間で、ユーザーがポップアップのサイズを変更するときに発生するクライアント関数を取得または設定します。
</value>
    <comment>&lt;b&gt;OnClientSizeChanged&lt;/b&gt;: Gets or sets the client function which occurs while the user resizes the Popup, between the resizing and resized events, after the SizeChanging event.</comment>
  </data>
  <data name="Index_OnClientSizeChanging_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientSizeChanging&lt;/b&gt;プロパティ： Resizing  イベントと Resized イベントの間で、ユーザーがポップアップのサイズを変更するときに発生するクライアント関数を取得または設定します。
</value>
    <comment>&lt;b&gt;OnClientSizeChanging&lt;/b&gt;: Gets or sets the client function which occurs while the user resizes the Popup, between the resizing and resized events.</comment>
  </data> 
  <data name="PopupDialog_CustomInput" xml:space="preserve">
    <value>テキストを入力する：</value>
    <comment>Input any text:</comment>
  </data>
  <data name="PopupDialog_ResultSubmit" xml:space="preserve">
    <value>フォームはカスタム送信結果で送信されました。入力したテキスト：</value>
    <comment>The form is submitted with custom submit result and inputted text is</comment>
  </data>
  <data name="PopupDialog_Title5" xml:space="preserve">
    <value>カスタム送信結果</value>
    <comment>Custom Submit Result</comment>
  </data>
  <data name="PopupDialog_Custom" xml:space="preserve">
    <value>カスタム送信結果</value>
    <comment>Custom Submit Result</comment>
  </data>
</root>