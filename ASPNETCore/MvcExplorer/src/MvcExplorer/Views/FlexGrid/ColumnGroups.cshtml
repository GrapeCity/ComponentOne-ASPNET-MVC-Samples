@using C1.Web.Mvc.Grid
@model IEnumerable<MvcExplorer.Controllers.Portfolio>

@{
    const string tpl1 = "<span class=${value> .3 ? 'big-val' : 'small-val'}>${text}</span>";
    const string tpl2 = "<span class=${value > 50000 ? 'big-val' : 'small-val'}>${text}</span>";
}

<c1-flex-grid id="colGroupsFlexGrid" auto-generate-columns="false" class="grid animated" is-read-only="true" sorting-type="None"
              show-marquee="true" default-column-size="113" item-formatter="formatItem">
    <c1-items-source source-collection="Model"></c1-items-source>
    <c1-flex-grid-column binding="Name" width="130"></c1-flex-grid-column>
    <c1-flex-grid-column binding="Currency" align="center" width="73"></c1-flex-grid-column>
    <c1-flex-grid-column header="Performance" align="center" collapse-to="YTD">
        <c1-flex-grid-column binding="YTD" format="p2" class="main-column" height="40"></c1-flex-grid-column>
        <c1-flex-grid-column binding="M1" format="p2"></c1-flex-grid-column>
        <c1-flex-grid-column binding="M6" format="p2"></c1-flex-grid-column>
        <c1-flex-grid-column binding="M12" format="p2"></c1-flex-grid-column>
    </c1-flex-grid-column>
    <c1-flex-grid-column header="Allocation" align="center" collapse-to="Amount">
        <c1-flex-grid-column header="Investment" align="center" collapse-to="Total" is-collapsed="true">
            <c1-flex-grid-column binding="Stock" format="p2" template="@tpl1"></c1-flex-grid-column>
            <c1-flex-grid-column binding="Bond" format="p2" template="@tpl1"></c1-flex-grid-column>
            <c1-flex-grid-column binding="Other" format="p2" template="@tpl1"></c1-flex-grid-column>
            <c1-flex-grid-column binding="Total" name="#Total" format="p2" align="right" class="main-column"></c1-flex-grid-column>
        </c1-flex-grid-column>
        <c1-flex-grid-column binding="Cash" format="p2" template="@tpl1"></c1-flex-grid-column>
        <c1-flex-grid-column binding="Amount" format="c0" class="main-column" template="@tpl2"></c1-flex-grid-column>
    </c1-flex-grid-column>
</c1-flex-grid>

<style type="text/css">
    .wj-flexgrid {
        margin: 10px 0;
    }

        /* highlight the main column in the group */
        .wj-flexgrid .wj-cells .wj-cell.main-column {
            background: #ddffdd;
            color: black;
        }

    /* formatting for cell's templates */
    .big-val {
        font-weight: bold;
        color: darkgreen;
    }

    .small-val {
        font-style: italic;
        color: rgb(202, 0, 0);
    }

    /* animation for collapsing/expanding the groups */
    .wj-flexgrid.animated .wj-colheaders .wj-header.wj-cell.wj-colgroup {
        transition: all .2s;
    }
</style>

@section Scripts{
    <script>
        function formatItem(panel, r, c, cell) {
            if (panel.cellType == 1) {
                switch (panel.columns[c].name) {
                    case '#Total':
                        var item = panel.rows[r].dataItem,
                            value = item.Stock + item.Bond + item.Other,
                            cls = value > .3 ? 'big-val' : 'small-val';
                        txt = wijmo.Globalize.format(value, panel.columns[c].format);
                        cell.innerHTML = '<span class="' + cls + '">' + txt + '</span>'
                        break;
                }
            }
        }
    </script>
}

@section Summary{
    <p>@Html.Raw(FlexGridRes.ColumnGroups_Text0)</p>
}

@section Description{
    @Html.Raw(FlexGridRes.ColumnGroups_Text1)
}

