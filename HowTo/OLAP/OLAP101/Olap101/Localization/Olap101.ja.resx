<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BTN_Export_to_XLSX" xml:space="preserve">
    <value>XLSXファイルに保存</value>
    <comment>Export to XLSX</comment>
  </data>
  <data name="BTN_Load_View" xml:space="preserve">
    <value>ビューを読み込み</value>
    <comment>Load View</comment>
  </data>
  <data name="BTN_Save_View" xml:space="preserve">
    <value>ビューを保存</value>
    <comment>Save View</comment>
  </data>
  <data name="TXT_Analyze_Huge_Data" xml:space="preserve">
    <value>巨大なデータの分析</value>
    <comment>Analyze Huge Data</comment>
  </data>
  <data name="TXT_Analyze_Huge_Data_0" xml:space="preserve">
    <value>この例では、PivotEngineコンポーネントはDataEngineサービスにバインドされます。 DataEngine Web APIは、OLAPコントロールがDataEngineサービスにバインドする際のデータ集約を担当します。 DataEngine Web APIは、多くのオープンソースおよび商用の分析データベースおよびライブラリで広く使用されている、カラム指向のデータモデルを使用しています。 DataEngineは、ほんの一瞬で最大で数億のレコードを処理できます。
            このモードでは、サービスURLがPivotEngineに提供される必要があります。</value>
    <comment>In this example, the PivotEngine component binds to a DataEngine service. The DataEngine web api is responsible for data aggregation when the OLAP control binds to DataEngine service. DataEngine Web API uses a column-oriented data model which is widely used in many open source and commercial analytical databases and libraries. Data Engine can handle up to hundreds of millions records in a fraction of a second. The service url should be provided to the PivotEngine in this mode.</comment>
  </data>
  <data name="TXT_Analyze_Huge_Data_1" xml:space="preserve">
    <value>DataEngine Web APIは、MVCアプリケーションとは別に、またはMVCアプリケーション内でホストすることができます。&lt;br /&gt;
            DataEngine Web APIを個別に作成してホストするには、&lt;a href="https://docs.mescius.com/help/c1/aspnet-mvc/webapi/#DataEngine.html"&gt;Web APIヘルプ&lt;/a&gt;を参照してください。&lt;br /&gt;
            同じMVCプロジェクトでDataEngineを使用するには、次のことを確認してください。&lt;br /&gt;</value>
    <comment>You may host DataEngine WebAPI separately or within the same MVC application.&lt;br /&gt;To create and host DataEngine Web API separately, please refer the Web API &lt;a href="https://developer.mescius.com/componentone/docs/webapi/online-webapicore/overview.html"&gt;documentation&lt;/a&gt;.&lt;br /&gt;To use DataEngine in the same MVC project, ensure the following:&lt;br /&gt;</comment>
  </data>
  <data name="TXT_Analyze_Huge_Data_2" xml:space="preserve">
    <value>MVCアプリケーションはWeb APIをサポートする必要があります。</value>
    <comment>MVC application should support Web API.</comment>
  </data>
  <data name="TXT_Analyze_Huge_Data_3" xml:space="preserve">
    <value>MESCIUS NuGetソースからDataEngine Web APIをアプリケーションに追加します。</value>
    <comment>Add DataEngine WebAPI to the application from MESCIUS NuGet source.</comment>
  </data>
  <data name="TXT_Analyze_Huge_Data_4" xml:space="preserve">
    <value>データをインポートするには、Owin Startup.csクラスにDataEngineを登録します。 以下の例のStartup.csコードを参照してください。</value>
    <comment>Register the DataEngine in the Owin Startup.cs class to import the data. Please refer the Startup.cs code in the below example.</comment>
  </data>
  <data name="TXT_Analyze_Huge_Data_5" xml:space="preserve">
    <value>この例では、PivotEngineコンポーネントをDataEngineデータに接続します。 PivotPanelコントロールとPivotGridコントロールは、PivotEngineにバインドされています。
            PivotPanelコントロールでビュー定義を変更できます。 集計されたデータはサービスから取得されます。 PivotGridコントロールは、集計されたデータを表示します。 PivotGridコントロール内のセルをダブルクリックすると、グリッドに表示される詳細な生データを見つけることができます。</value>
    <comment>In this example, the PivotEngine component connects the DataEngine data. The PivotPanel control and the PivotGrid control are bound to the PivotEngine. You can change the view definition in the PivotPanel control. The aggregated data will be obtained from the service. Then the PivotGrid control displays the aggregated data. You can find the detailed raw data shown in a grid by double-clicking a cell in the PivotGrid control.</comment>
  </data>
  <data name="TXT_ChartType" xml:space="preserve">
    <value>チャートタイプ：</value>
    <comment>Chart Type:</comment>
  </data>
  <data name="TXT_Configure_PivotPanel" xml:space="preserve">
    <value>PivotPanelのプロパティの設定</value>
    <comment>Configure the PivotPanel Properties</comment>
  </data>
  <data name="TXT_Configure_PivotPanel_0" xml:space="preserve">
    <value>PivotPanelコントロールには、ビューをカスタマイズするためのプロパティが用意されています。 次のコントロールを使用して、いくつかのプロパティの値を変更し、その効果を確認してください。</value>
    <comment>The PivotPanel control has properties that allow you to customize the view. Use the controls below to modify the values of some of these properties and see their effect.</comment>
  </data>
  <data name="TXT_Customize" xml:space="preserve">
    <value>PivotGridのセルのカスタマイズ</value>
    <comment>Customize the PivotGrid Cells</comment>
  </data>
  <data name="TXT_Customize_0" xml:space="preserve">
    <value>&lt;b&gt;PivotGrid&lt;/b&gt;コントロールは、&lt;b&gt;FlexGrid&lt;/b&gt;の拡張です。したがって、&lt;b&gt;ItemFormatter&lt;/b&gt;プロパティを使用し、各セルのコンテンツを完全に自由に変更して、グリッドセルの表示をカスタマイズできます。</value>
    <comment>The &lt;b&gt;PivotGrid&lt;/b&gt; control extends the &lt;b&gt;FlexGrid&lt;/b&gt; control, so you can customize the display of the grid cells using the &lt;b&gt;ItemFormatter&lt;/b&gt; event and modify the content of each cell with flexibility.</comment>
  </data>
  <data name="TXT_Customize_1" xml:space="preserve">
    <value>たとえば、次の&lt;b&gt;PivotGrid&lt;/b&gt;は、Excelのアイコンセットと同様の色とアイコンを使用して、四半期ごとの売上高の変化を示しています。</value>
    <comment>For example, the &lt;b&gt;PivotGrid&lt;/b&gt; control below uses colors and icons, similar to the ones in Microsoft Excel's icon sets, to show how sales changed from quarter to quarter.</comment>
  </data>
  <data name="TXT_Export" xml:space="preserve">
    <value>結果のExcelへのエクスポート</value>
    <comment>Export the Results to Excel</comment>
  </data>
  <data name="TXT_Export_0" xml:space="preserve">
    <value>&lt;b&gt;PivotGrid&lt;/b&gt;コントロールは&lt;b&gt;FlexGrid&lt;/b&gt;の拡張です。したがって、&lt;b&gt;FlexGrid&lt;/b&gt;に付属する拡張モジュールでサポートされている形式であれば、どの形式にもエクスポートできます。 サポートされている形式には、XLSLX、CSV、PDFなどがあります。</value>
    <comment>The &lt;b&gt;PivotGrid&lt;/b&gt; control extends the &lt;b&gt;FlexGrid&lt;/b&gt; control, so you can export it to any of the formats supported by the extension modules provided with the &lt;b&gt;FlexGrid&lt;/b&gt;. The list of the supported formats includes .xlsx, .csv, and .pdf.</comment>
  </data>
  <data name="TXT_Export_1" xml:space="preserve">
    <value>たとえば、次のボタンは、現在のビュー、現在のビューを転置したバージョン、生データの3つのシートを含むExcelファイルを作成します。</value>
    <comment>For example, clicking the button below creates an Excel file with three sheets: the current view, a transposed version of the current view, and the raw data.</comment>
  </data>
  <data name="TXT_FlexGrid" xml:space="preserve">
    <value>FlexGrid</value>
  </data>
  <data name="TXT_Getting_Started" xml:space="preserve">
    <value>はじめに</value>
    <comment>Getting Started</comment>
  </data>
  <data name="TXT_Getting_Started_0" xml:space="preserve">
    <value>&lt;b&gt;C1.Web.Mvc.Olap&lt;/b&gt;アセンブリには、Excelに似たピボットテーブルやピボットチャートの機能をASP.NET MVCアプリケーションに追加できるコントロールが含まれています。</value>
    <comment>The &lt;b&gt;C1.Web.Mvc.Olap&lt;/b&gt; assembly contains controls that allow you to add Excel-like pivot table and pivot chart features to your ASP.NET MVC applications.</comment>
  </data>
  <data name="TXT_Getting_Started_1" xml:space="preserve">
    <value>MVCアプリケーションでOlapモジュールを使い始める手順は次のとおりです。</value>
    <comment>Steps for getting started with the Olap module in MVC applications are as follows:</comment>
  </data>
  <data name="TXT_Getting_Started_2" xml:space="preserve">
    <value>Visual Studioで、ComponentOne for ASP.NET MVCアプリケーションテンプレートを使用して新しいMVCプロジェクトを作成します。</value>
    <comment>Create a new MVC project using the C1 ASP.NET MVC application template, in Visual Studio IDE.</comment>
  </data>
  <data name="TXT_Getting_Started_3" xml:space="preserve">
    <value>コントローラと対応するビューをプロジェクトに追加します。</value>
    <comment>Add a controller and a corresponding view to the project.</comment>
  </data>
  <data name="TXT_Getting_Started_4" xml:space="preserve">
    <value>Razor構文を使用して、ビューの&lt;b&gt;PivotEngine&lt;/b&gt;コントロールを初期化します。</value>
    <comment>Initialize the &lt;b&gt;PivotEngine&lt;/b&gt; control in the view using razor syntax.</comment>
  </data>
  <data name="TXT_Getting_Started_5" xml:space="preserve">
    <value>&lt;b&gt;Bind&lt;/b&gt;メソッドを使用して、解析する生データを含む配列をバインドします。</value>
    <comment>Use the &lt;b&gt;Bind&lt;/b&gt; method to bind an array containing the raw data that you want to analyze.</comment>
  </data>
  <data name="TXT_Getting_Started_6" xml:space="preserve">
    <value>&lt;b&gt;PivotPanel&lt;/b&gt;コントロールを初期化し、ビュー定義をカスタマイズする場合は、&lt;b&gt;ItemsSourceId&lt;/b&gt;プロパティを&lt;b&gt;PivotEngine&lt;/b&gt;コントロールに設定します。</value>
    <comment>Initialize a &lt;b&gt;PivotPanel&lt;/b&gt; control and set its &lt;b&gt;ItemsSourceId&lt;/b&gt; property to the &lt;b&gt;PivotEngine&lt;/b&gt; control if you want to customize the view definition</comment>
  </data>
  <data name="TXT_Getting_Started_7" xml:space="preserve">
    <value>いくつかの&lt;b&gt;PivotGrid&lt;/b&gt;コントロールおよび&lt;b&gt;PivotChart&lt;/b&gt;コントロールをページに追加し、それらの&lt;b&gt;ItemsSourceId&lt;/b&gt;プロパティを&lt;b&gt;PivotEngine&lt;/b&gt;コントロールまたは&lt;b&gt;PivotPanel&lt;/b&gt;コントロールに設定することで、コントロールを&lt;b&gt;PivotPanel&lt;/b&gt;に接続します。</value>
    <comment>Add one or more &lt;b&gt;PivotGrid&lt;/b&gt; and &lt;b&gt;PivotChart&lt;/b&gt; controls to the page, and connect them to the &lt;b&gt;PivotEngine&lt;/b&gt; by setting their &lt;b&gt;ItemsSourceId&lt;/b&gt; property to the &lt;b&gt;PivotEngine&lt;/b&gt; control or the &lt;b&gt;PivotPanel&lt;/b&gt; control.</comment>
  </data>
  <data name="TXT_Getting_Started_8" xml:space="preserve">
    <value>これで完了です。&lt;b&gt;PivotPanel&lt;/b&gt;に使用できるフィールドのリストが表示され、ユーザーは、サマリー領域間でフィールドをドラッグしてデータサマリー（「ビュー」）を生成できます。
            フィールドのヘッダー、集計関数、フィルタ、書式などを設定することもできます。</value>
    <comment>This will display a list of available fields in the &lt;b&gt;PivotPanel&lt;/b&gt;, and users will be able to drag fields between summary areas to generate data summaries (also known as "views"). Users can also configure the fields by setting their headers, summary functions, filters, and formats.</comment>
  </data>
  <data name="TXT_Getting_Started_9" xml:space="preserve">
    <value>データの分析、結果の印刷、結果のXLSXまたはPDFへのエクスポートが行えるほか、ビュー定義を保存して後で再利用することもできます。</value>
    <comment>Users can analyze the data and print the results, export them to XLSX or PDF, and save the view definitions to be re-used later.</comment>
  </data>
  <data name="TXT_PivotGrid" xml:space="preserve">
    <value>PivotGrid</value>
  </data>
  <data name="TXT_Result" xml:space="preserve">
    <value>結果（ライブ）:</value>
    <comment>Result (live):</comment>
  </data>
  <data name="TXT_Sample" xml:space="preserve">
    <value>次に、簡単な例を示します。</value>
    <comment>Here is a simple example.</comment>
  </data>
  <data name="TXT_Sample_0" xml:space="preserve">
    <value>PivotEngine、PivotPanel、PivotGridのページへの追加</value>
    <comment>Adding a PivotEngine, a PivotPanel and a PivotGrid to the page</comment>
  </data>
  <data name="TXT_Sample_1" xml:space="preserve">
    <value>&lt;b&gt;PivotPanel&lt;/b&gt;コントロールは、ピボットテーブルやピボットチャートに関連付けられたExcelの［フィールドリスト］ウィンドウに似ています。</value>
    <comment>The &lt;b&gt;PivotPanel&lt;/b&gt; control is similar to Microsoft Excel's "Field List" window, which is associated with pivot tables and charts.</comment>
  </data>
  <data name="TXT_Sample_2" xml:space="preserve">
    <value>ビューにフィールドを追加するには、フィールドをドラッグするか、チェックボックスを使用します。</value>
    <comment>Add fields to the view by dragging or using checkboxes.</comment>
  </data>
  <data name="TXT_Sample_3" xml:space="preserve">
    <value>ビューからフィールドを削除するには、フィールドを上部の領域にドラッグして戻すか、フィールドのコンテキストメニューを使用します。</value>
    <comment>Remove fields from the view by dragging them back to the top area, or by using their context menu.</comment>
  </data>
  <data name="TXT_Sample_4" xml:space="preserve">
    <value>フィールドを設定するには、フィールドのコンテキストメニューを使用します。 ヘッダー、集計関数、書式を変更できます。 書式は、データをグループ化する際に使用されます。 したがって、たとえば日付フィールドの書式を変更することで、データを日、月、四半期、または年別にグループ化することができます。</value>
    <comment>Configure the fields by using their context menu. You can modify their header, summary function, and format. Note that the format is used while grouping the data. For instance, you can group the data by day, month, quarter or year by changing the format of the date fields .</comment>
  </data>
  <data name="TXT_Sample_5" xml:space="preserve">
    <value>&lt;b&gt;PivotGrid&lt;/b&gt;コントロールは、&lt;b&gt;FlexGrid&lt;/b&gt;を拡張して、カスタムセル結合、階層的な行および列グループ、カスタムコンテキストメニューなどのピボット機能をサポートします。 カスタムコンテキストメニューからは、ピボットフィールドを設定したり、特定の集計セルの計算で使用されたデータ項目にドリルダウンすることができます。</value>
    <comment>The &lt;b&gt;PivotGrid&lt;/b&gt; control extends the &lt;b&gt;FlexGrid&lt;/b&gt; control to support pivoting features. These include custom cell merging, hierarchical row and column groups, and a custom context menu, which allows users to configure the pivot fields and to drill-down into the data items that were used in the computation of specific summary cells.</comment>
  </data>
  <data name="TXT_Save_And_Load" xml:space="preserve">
    <value>ビューの保存と読み込み</value>
    <comment>Save and Load Views</comment>
  </data>
  <data name="TXT_Save_And_Load_0" xml:space="preserve">
    <value>viewDefinition&lt;/b&gt;プロパティを使用すると、ビュー定義を保存および復元できます。次に例を示します。</value>
    <comment>You can use the &lt;b&gt;viewDefinition&lt;/b&gt; property to save and restore view definitions, as shown in the following example:</comment>
  </data>
  <data name="TXT_Save_And_Load_1" xml:space="preserve">
    <value>あるいは、ユーザーが選択できる定義済みのビューのリストを作成できます。次に例を示します。</value>
    <comment>By using the &lt;b&gt;viewDefinition&lt;/b&gt; property, you can also build a list of pre-defined views for the user to pick from, as shown in the following example:</comment>
  </data>
  <data name="TXT_ShowResult_PivotChart" xml:space="preserve">
    <value>PivotChartでの結果の表示</value>
    <comment>Show the Results in a PivotChart</comment>
  </data>
  <data name="TXT_ShowResult_PivotChart_0" xml:space="preserve">
    <value>&lt;b&gt;PivotChart&lt;/b&gt;コントロールは、結果をグラフィカルに視覚化して提供します。 Excelのピボットチャートに似ており、複数のチャートタイプや階層的な軸をサポートしています。</value>
    <comment>The &lt;strong&gt;PivotChart&lt;/strong&gt; control provides a graphical visualization of the results. It is similar to Microsoft Excel's pivot charts, and includes support for multiple chart types and hierarchical axes.</comment>
  </data>
  <data name="TXT_ShowResult_PivotChart_1" xml:space="preserve">
    <value>&lt;b&gt;PivotChart&lt;/b&gt;コントロールを使用するには、&lt;b&gt;ItemsSourceId&lt;/b&gt;プロパティを使用して、コントロールを&lt;b&gt;PivotPanel&lt;/b&gt;または&lt;b&gt;PivotEngine&lt;/b&gt;に接続します。</value>
    <comment>To use the &lt;strong&gt;PivotChart&lt;/strong&gt; control, connect it to a &lt;strong&gt;PivotPanel&lt;/strong&gt; or &lt;strong&gt;PivotEngine&lt;/strong&gt; using the &lt;strong&gt;ItemsSourceId&lt;/strong&gt; property.</comment>
  </data>
  <data name="TXT_View_Edit_Source" xml:space="preserve">
    <value>ソースデータの表示と編集</value>
    <comment>View and Edit the Source Data</comment>
  </data>
  <data name="TXT_View_Edit_Source_0" xml:space="preserve">
    <value>ピボットビューはライブです。 10,000個ある項目のいずれかを編集すると、ピボットビューは自動的に更新されます。</value>
    <comment>The following pivot view is live. If you edit any of the 10,000 items, the pivot view will be updated automatically.</comment>
  </data>
</root>