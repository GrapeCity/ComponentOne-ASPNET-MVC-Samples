<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Project_Name_Text0" xml:space="preserve">
    <value>ASP.NET MVC Input 101</value>
  </data>
  <data name="Project_Short_Description_Text0" xml:space="preserve">
    <value>This page shows how to get started with MVC's Input controls.</value>
  </data>
  <data name="All_Others_Text0" xml:space="preserve">
    <value>All others</value>
  </data>
  <data name="Alphanumeric_Space_Text0" xml:space="preserve">
    <value>Alphanumeric or space.</value>
  </data>
  <data name="Alphanumeric_Text0" xml:space="preserve">
    <value>Alphanumeric.</value>
  </data>
  <data name="AutoComplete_Description_Text0" xml:space="preserve">
    <value>The AutoComplete control is an auto-complete control that allows you to filter its
            item list as you type, as well as select a value directly from its drop-down list.</value>
  </data>
  <data name="AutoComplete_Description_Text1" xml:space="preserve">
    <value>To use the AutoComplete control, you must minimally set the &lt;b&gt;Bind&lt;/b&gt;
            property to an array of data in order to populate its item list. The AutoComplete
            control also offers several other properties to alter its behavior, such as the
            &lt;b&gt;CssMatch&lt;/b&gt; property. The &lt;b&gt;CssMatch&lt;/b&gt; property allows you to specify the CSS
            class that is used to highlight parts of the content that match your search terms.</value>
  </data>
  <data name="AutoComplete_Description_Text2" xml:space="preserve">
    <value>The example below uses List of strings to populate the AutoComplete control's
            item list using the &lt;b&gt;Bind&lt;/b&gt; property. To see a list of suggestions, type
            &lt;b&gt;"ab"&lt;/b&gt; or &lt;b&gt;"za"&lt;/b&gt; in the AutoComplete controls below.</value>
  </data>
  <data name="ComboBox_Description_Text0" xml:space="preserve">
    <value>The ComboBox control is very similar to the AutoComplete control, but rather than
            providing a list of suggestions as you type, the ComboBox will automatically complete
            and select the entry as you type.</value>
  </data>
  <data name="ComboBox_Description_Text1" xml:space="preserve">
    <value>Like the AutoComplete control, you must minimally set the ComboBox's &lt;b&gt;Bind&lt;/b&gt;
            property to an array of data in order to populate its item list. You may also want to
            specify whether the ComboBox is editable via the &lt;b&gt;IsEditable&lt;/b&gt; property. The
            &lt;b&gt;IsEditable&lt;/b&gt; property determines whether or not a user can enter values that do
            not appear in the ComboBox's item list.</value>
  </data>
  <data name="ComboBox_Description_Text2" xml:space="preserve">
    <value>The example below uses two ComboBoxes bound to the same data source as the AutoComplete
            control above. The first ComboBox's &lt;b&gt;isEditable&lt;/b&gt; property is set to false, while the
            second ComboBox's &lt;b&gt;IsEditable&lt;/b&gt; property is set to true.</value>
  </data>
  <data name="Digit_Sign_Space_Text0" xml:space="preserve">
    <value>Digit, sign, or space.</value>
  </data>
  <data name="Digit_Space_Text0" xml:space="preserve">
    <value>Digit or space.</value>
  </data>
  <data name="Digit_Text0" xml:space="preserve">
    <value>Digit.</value>
  </data>
  <data name="Disables_Case_Conversion_Text" xml:space="preserve">
    <value>Disables case conversion.</value>
  </data>
  <data name="Escapes_Character_Text0" xml:space="preserve">
    <value>Escapes any character, turning it into a literal.</value>
  </data>
  <data name="Getting_Started_Step1_Text0" xml:space="preserve">
    <value>Create a new MVC project using the C1 ASP.NET MVC application template.</value>
  </data>
  <data name="Getting_Started_Step2_Text0" xml:space="preserve">
    <value>Add controller and corresponding  view to the project.</value>
  </data>
  <data name="Getting_Started_Step3_Text0" xml:space="preserve">
    <value>Initialize the input control in view using razor syntax.</value>
  </data>
  <data name="Getting_Started_Step4_Text0" xml:space="preserve">
    <value>(Optional) Add some CSS to customize the input control's appearance.</value>
  </data>
  <data name="Getting_Started_Step_Title_Text0" xml:space="preserve">
    <value>Steps for getting started with Input controls in ASP.NET MVC applications:</value>
  </data>
  <data name="Getting_Started_Text0" xml:space="preserve">
    <value>Getting Started</value>
  </data>
  <data name="InputDateTime_Description_Text0" xml:space="preserve">
    <value>Similar to the InputDate control, the InputTime control allows you to modify the time portion of
            a JavaScript date. The InputTime control shares many of the same properties as the InputDate control,
            including &lt;b&gt;Format&lt;/b&gt;, &lt;b&gt;Min&lt;/b&gt;, &lt;b&gt;Max&lt;/b&gt;, and &lt;b&gt;Value&lt;/b&gt;. The InputTime control also offers a
            &lt;b&gt;Step&lt;/b&gt; property that allows you to specify the number of minutes between entries in its drop-down
            list.</value>
  </data>
  <data name="InputDateTime_Description_Text1" xml:space="preserve">
    <value>The InputDateTime control combines the InputDate and InputTime controls, allowing you to set the date
            and time portions. The InputDateTime control has two drop-downs: a Calendar
            for picking dates, and a list for picking times.</value>
  </data>
  <data name="InputDateTime_Description_Text2" xml:space="preserve">
    <value>The example below illustrates how to use the InputTime control in conjunction with the InputDate
            control. Notice that these controls work together to edit the same DateTime JavaScript Object
            and only update the part of the DateTime that they are responsible for.</value>
  </data>
  <data name="InputDateTime_Description_Text3" xml:space="preserve">
    <value>The example also shows an InputDateTime that updates both the date and time parts.</value>
  </data>
  <data name="InputDateTime_Title_Text0" xml:space="preserve">
    <value>InputDate, InputTime and InputDateTim</value>
  </data>
  <data name="InputDate_Calendar_Description_Text0" xml:space="preserve">
    <value>The InputDate control allows you to edit and select dates via a drop-down calendar,
            preventing you from entering an incorrect value. The InputDate's drop-down calendar
            was developed as a separate control and can be used be used independently
            from the InputDate control.</value>
  </data>
  <data name="InputDate_Calendar_Description_Text1" xml:space="preserve">
    <value>The example below demonstrates how to use each of these properties.</value>
  </data>
  <data name="InputDate_Calendar_Property_Text0" xml:space="preserve">
    <value>&lt;b&gt;Value&lt;/b&gt;: Specifies the date value for the control.</value>
  </data>
  <data name="InputDate_Calendar_Property_Text1" xml:space="preserve">
    <value>&lt;b&gt;Min&lt;/b&gt;: Specifies the minimum date value that can be entered in the control.</value>
  </data>
  <data name="InputDate_Calendar_Property_Text2" xml:space="preserve">
    <value>&lt;b&gt;Max&lt;/b&gt;: Specifies the maximum date value that can be entered in the control.</value>
  </data>
  <data name="InputDate_Calendar_Property_Title_Text0" xml:space="preserve">
    <value>Both InputDate and Calendar, specify several properties to alter the controls' behavior.
            The most commonly used properties include:</value>
  </data>
  <data name="InputMask_Description_Text0" xml:space="preserve">
    <value>The InputMask control allows you to validate and format user input as it is entered, preventing
            invalid data.  The InputMask control can be used without specifying any of its properties; however,
            you will typically set its &lt;b&gt;Value&lt;/b&gt; and &lt;b&gt;Mask&lt;/b&gt; properties.  Like the other MVC input
            controls, the &lt;b&gt;Value&lt;/b&gt; property specifies the value for the InputMask control.  The &lt;b&gt;Mask&lt;/b&gt; property
            specifies the control's mask and supports a combination of the following characters:</value>
  </data>
  <data name="InputMask_Description_Text1" xml:space="preserve">
    <value>The examples below demonstrates how to use the &lt;b&gt;Value&lt;/b&gt; and &lt;b&gt;Mask&lt;/b&gt; properties with the
            InputMask, InputDate, and InputTime controls.</value>
  </data>
  <data name="InputNumber_Description_Text0" xml:space="preserve">
    <value>The InputNumber control allows you to edit numbers, preventing you from entering invalid
            data and optionally formatting the numeric value as it is edited. The InputNumber can be
            used without specifying any of its properties; however, you'll typically want to bind it
            to some data using the &lt;b&gt;Value&lt;/b&gt; property.</value>
  </data>
  <data name="InputNumber_Description_Text1" xml:space="preserve">
    <value>The example below demonstrates how to use all of these properties.</value>
  </data>
  <data name="InputNumber_Property_Text0" xml:space="preserve">
    <value>&lt;b&gt;Min&lt;/b&gt;: Specifies the minimum numeric value that can be entered.</value>
  </data>
  <data name="InputNumber_Property_Text1" xml:space="preserve">
    <value>&lt;b&gt;Max&lt;/b&gt;: Specifies the maximum numeric value that can be entered.</value>
  </data>
  <data name="InputNumber_Property_Text2" xml:space="preserve">
    <value>&lt;b&gt;Step&lt;/b&gt;: Specifies the amount to add or subtract from the current
                value when the spinner buttons are clicked.</value>
  </data>
  <data name="InputNumber_Property_Text3" xml:space="preserve">
    <value>&lt;b&gt;Format&lt;/b&gt;: Specifies the numeric format used to display the number being
                edited. The format property uses a .NET-style
                &lt;a href="http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx" target="_blank"&gt;numeric format string&lt;/a&gt;.</value>
  </data>
  <data name="InputNumber_Property_Title_Text0" xml:space="preserve">
    <value>In addition to the &lt;b&gt;value&lt;/b&gt; property, the InputNumber control offers several other
            properties that can be used to alter its behavior, such as:</value>
  </data>
  <data name="Letter_Space_Text0" xml:space="preserve">
    <value>Letter or space.</value>
  </data>
  <data name="Letter_Text0" xml:space="preserve">
    <value>Letter.</value>
  </data>
  <data name="ListBox_Description_Text0" xml:space="preserve">
    <value>The ListBox control displays a list of items and allows you to select items using your
            mouse and keyboard. Like the AutoComplete and ComboBox controls, you must specify the
            ListBox's &lt;b&gt;Bind&lt;/b&gt; property in order to use the control.</value>
  </data>
  <data name="ListBox_Description_Text1" xml:space="preserve">
    <value>The example below allows you to select an item within the ListBox control, and also displays
            the control's &lt;b&gt;SelectedIndex&lt;/b&gt; and &lt;b&gt;SelectedValue&lt;/b&gt; properties.</value>
  </data>
  <data name="Literals_Text0" xml:space="preserve">
    <value>Literals.</value>
  </data>
  <data name="Localized_Currency_Symbol_Text0" xml:space="preserve">
    <value>Localized currency symbol.</value>
  </data>
  <data name="Localized_Date_Separator_Text0" xml:space="preserve">
    <value>Localized date separator.</value>
  </data>
  <data name="Localized_Decimal_Point_Text0" xml:space="preserve">
    <value>Localized decimal point.</value>
  </data>
  <data name="Localized_Thousand_Separator_Text0" xml:space="preserve">
    <value>Localized thousand separator.</value>
  </data>
  <data name="Localized_Time_Separator_Text0" xml:space="preserve">
    <value>Localized time separator.</value>
  </data>
  <data name="Menu_Description_Text0" xml:space="preserve">
    <value>The Menu control allows you to create a simple drop-down list with clickable items. The Menu's
            items can be defined directly or by using the &lt;b&gt;Bind&lt;/b&gt; property similar to the ComboBox.
            To specify the text displayed on the Menu, you can set the &lt;b&gt;Header&lt;/b&gt; property.</value>
  </data>
  <data name="Menu_Description_Text1" xml:space="preserve">
    <value>The example below demonstrates how to use both approaches.</value>
  </data>
  <data name="Menu_Handling_Text0" xml:space="preserve">
    <value>&lt;b&gt;executeCommand(param)&lt;/b&gt;: A method that executes the command.</value>
  </data>
  <data name="Menu_Handling_Text1" xml:space="preserve">
    <value>&lt;b&gt;canExecuteCommand(param)&lt;/b&gt;: A method that returns a Boolean value specifying whether or
                not the command can be executed. If the return value is false, the menu item is disabled automatically.</value>
  </data>
  <data name="Menu_Handling_Title_Text0" xml:space="preserve">
    <value>The Menu control offers two ways to handle user selections, specifying a command on each menu item
            and the &lt;b&gt;ItemClicked&lt;/b&gt; event. Unlike the &lt;b&gt;ItemClicked&lt;/b&gt; event, commands are objects that
            implement two methods:</value>
  </data>
  <data name="To_Lowercase_Text0" xml:space="preserve">
    <value>Converts characters that follow to lowercase.</value>
  </data>
  <data name="To_Uppercase_Text0" xml:space="preserve">
    <value>Converts characters that follow to uppercase.</value>
  </data>
  <data name="Bind_Only_Text0" xml:space="preserve">
    <value>Bind Only</value>
  </data>
  <data name="Bound_Calendar_Text0" xml:space="preserve">
    <value>Bound Calendar with Min &amp;amp; Max</value>
  </data>
  <data name="Bound_Format_Text0" xml:space="preserve">
    <value>Bound with min (0), max (10), step, and "c2" format</value>
  </data>
  <data name="Bound_InputDate_Text0" xml:space="preserve">
    <value>Bound InputDate with Min &amp;amp; Max</value>
  </data>
  <data name="Bound_N0_Format_Text0" xml:space="preserve">
    <value>Bound with "n" format</value>
  </data>
  <data name="Editable_Text0" xml:space="preserve">
    <value>Editable</value>
  </data>
  <data name="Enter_Input_Mask_Placeholder_Text0" xml:space="preserve">
    <value>Enter an input mask...</value>
  </data>
  <data name="InputDateTime_Format_Text0" xml:space="preserve">
    <value>Bound InputDateTime with Min, Max, TimeMin, TimeMax, Format, &amp;amp; TimeStep</value>
  </data>
  <data name="InputDate_Format_Text0" xml:space="preserve">
    <value>Bound InputDate with Min, Max, &amp;amp; Format</value>
  </data>
  <data name="InputDate_Mask_Text0" xml:space="preserve">
    <value>InputDate with Mask</value>
  </data>
  <data name="InputTime_Format_Text0" xml:space="preserve">
    <value>Bound InputTime with Min, Max, &amp;amp; Step</value>
  </data>
  <data name="InputTime_Mask_Text0" xml:space="preserve">
    <value>InputTime with Mask</value>
  </data>
  <data name="Non_Editable_Text0" xml:space="preserve">
    <value>Non-Editable</value>
  </data>
  <data name="Phone_Number_Text0" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="Result_Live_Text0" xml:space="preserve">
    <value>Result (live)</value>
  </data>
  <data name="Selected_Date_And_Time_Text0" xml:space="preserve">
    <value>Selected Date &amp;amp; Time</value>
  </data>
  <data name="Social_Security_Number_Text0" xml:space="preserve">
    <value>Social Security Number</value>
  </data>
  <data name="Try_Your_Input_Mask_Placeholder_Text0" xml:space="preserve">
    <value>Try your input mask...</value>
  </data>
  <data name="Try_Your_Own_Text0" xml:space="preserve">
    <value>Try your own</value>
  </data>
  <data name="Unbound_N0_Format_Text0" xml:space="preserve">
    <value>Unbound with "n0" format</value>
  </data>
  <data name="Unbound_Placeholder_IsRequired_Text0" xml:space="preserve">
    <value>Unbound with placeholder and isRequired="false"</value>
  </data>
  <data name="Valid_Range_Text0" xml:space="preserve">
    <value>Valid Range:</value>
  </data>
</root>