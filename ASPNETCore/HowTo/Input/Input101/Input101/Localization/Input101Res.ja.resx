<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Project_Name_Text0" xml:space="preserve">
    <value>Input入門</value>
    <comment>ASP.NET MVC Input 101</comment>
  </data>
  <data name="Project_Short_Description_Text0" xml:space="preserve">
    <value>このページでは、Inputコントロールの使用を開始する方法を説明します。</value>
    <comment>This page shows how to get started with MVC's Input controls.</comment>
  </data>
  <data name="All_Others_Text0" xml:space="preserve">
    <value>その他すべて</value>
    <comment>All others</comment>
  </data>
  <data name="Alphanumeric_Space_Text0" xml:space="preserve">
    <value>英数字またはスペース。</value>
    <comment>Alphanumeric or space.</comment>
  </data>
  <data name="Alphanumeric_Text0" xml:space="preserve">
    <value>英数字。</value>
    <comment>Alphanumeric.</comment>
  </data>
  <data name="AutoComplete_Description_Text0" xml:space="preserve">
    <value>AutoCompleteコントロールはオートコンプリートコントロールです。キー入力時に項目リストをフィルタ処理し、ドロップダウンリストから値を直接選択することができます。</value>
    <comment>The AutoComplete control is an auto-complete control that allows you to filter its
            item list as you type, as well as select a value directly from its drop-down list.</comment>
  </data>
  <data name="AutoComplete_Description_Text1" xml:space="preserve">
    <value>AutoCompleteコントロールを使用するには、項目リストを作成するために、最小限のプロパティとして&lt;b&gt;Bind&lt;/b&gt;プロパティをデータの配列に設定する必要があります。 AutoCompleteコントロールには、動作を変更するためのプロパティも複数用意されています。たとえば、&lt;b&gt;CssMatch&lt;/b&gt;プロパティです。 &lt;b&gt;CssMatch&lt;/b&gt;プロパティを使用して、検索語に一致するコンテンツ部分の強調表示に使用されるCSSクラスを指定できます。</value>
    <comment>To use the AutoComplete control, you must minimally set the &lt;b&gt;Bind&lt;/b&gt;
            property to an array of data in order to populate its item list. The AutoComplete
            control also offers several other properties to alter its behavior, such as the
            &lt;b&gt;CssMatch&lt;/b&gt; property. The &lt;b&gt;CssMatch&lt;/b&gt; property allows you to specify the CSS
            class that is used to highlight parts of the content that match your search terms.</comment>
  </data>
  <data name="AutoComplete_Description_Text2" xml:space="preserve">
    <value>次の例では、文字列のリストを使用することにより、&lt;b&gt;Bind&lt;/b&gt;プロパティを使ってAutoCompleteコントロールの項目リストを作成します。候補のリストを表示するには、次のAutoCompleteコントロールに&lt;b&gt;「ab」&lt;/b&gt;や&lt;b&gt;「za」&lt;/b&gt;とキー入力してください。</value>
    <comment>The example below uses List of strings to populate the AutoComplete control's
            item list using the &lt;b&gt;Bind&lt;/b&gt; property. To see a list of suggestions, type
            &lt;b&gt;"ab"&lt;/b&gt; or &lt;b&gt;"za"&lt;/b&gt; in the AutoComplete controls below.</comment>
  </data>
  <data name="ComboBox_Description_Text0" xml:space="preserve">
    <value>ComboBoxコントロールはAutoCompleteコントロールによく似ていますが、キー入力時に候補のリストを表示するのではなく、キー入力に伴って自動的にエントリを補完し、選択します。</value>
    <comment>The ComboBox control is very similar to the AutoComplete control, but rather than
            providing a list of suggestions as you type, the ComboBox will automatically complete
            and select the entry as you type.</comment>
  </data>
  <data name="ComboBox_Description_Text1" xml:space="preserve">
    <value>AutoCompleteコントロールと同様に、項目リストを作成するためには、最小限のプロパティとしてComboBoxの&lt;b&gt;Bind&lt;/b&gt;プロパティをデータの配列に設定する必要があります。 また、ComboBoxを編集可能にするかどうかを&lt;b&gt;IsEditable&lt;/b&gt;プロパティによって指定できます。 &lt;b&gt;IsEditable&lt;/b&gt;プロパティは、ComboBoxの項目リストにない値をユーザーが入力できるかどうかを決定します。</value>
    <comment>Like the AutoComplete control, you must minimally set the ComboBox's &lt;b&gt;Bind&lt;/b&gt;
            property to an array of data in order to populate its item list. You may also want to
            specify whether the ComboBox is editable via the &lt;b&gt;IsEditable&lt;/b&gt; property. The
            &lt;b&gt;IsEditable&lt;/b&gt; property determines whether or not a user can enter values that do
            not appear in the ComboBox's item list.</comment>
  </data>
  <data name="ComboBox_Description_Text2" xml:space="preserve">
    <value>次の例では、上記のAutoCompleteコントロールと同じデータソースに連結された２つのComboBoxを使用します。 最初のComboBoxの&lt;b&gt;isEditable&lt;/b&gt;プロパティをfalseに、２つ目のComboBoxの&lt;b&gt;IsEditable&lt;/b&gt;をtrueに設定します。</value>
    <comment>The example below uses two ComboBoxes bound to the same data source as the AutoComplete
            control above. The first ComboBox's &lt;b&gt;isEditable&lt;/b&gt; property is set to false, while the
            second ComboBox's &lt;b&gt;IsEditable&lt;/b&gt; property is set to true.</comment>
  </data>
  <data name="Digit_Sign_Space_Text0" xml:space="preserve">
    <value>数字、符号、またはスペース。</value>
    <comment>Digit, sign, or space.</comment>
  </data>
  <data name="Digit_Space_Text0" xml:space="preserve">
    <value>数字またはスペース</value>
    <comment>Digit or space.</comment>
  </data>
  <data name="Digit_Text0" xml:space="preserve">
    <value>数字。</value>
    <comment>Digit.</comment>
  </data>
  <data name="Disables_Case_Conversion_Text" xml:space="preserve">
    <value>大文字小文字の変換を無効にします。</value>
    <comment>Disables case conversion.</comment>
  </data>
  <data name="Escapes_Character_Text0" xml:space="preserve">
    <value>任意の文字をエスケープしてリテラルに変えます。</value>
    <comment>Escapes any character, turning it into a literal.</comment>
  </data>
  <data name="Getting_Started_Step1_Text0" xml:space="preserve">
    <value>ComponentOne ASP.NET MVCアプリケーションテンプレートを使用して、新しいMVCプロジェクトを作成します。</value>
    <comment>Create a new MVC project using the C1 ASP.NET MVC application template.</comment>
  </data>
  <data name="Getting_Started_Step2_Text0" xml:space="preserve">
    <value>プロジェクトに、コントローラおよび対応するビューを追加します。</value>
    <comment>Add controller and corresponding  view to the project.</comment>
  </data>
  <data name="Getting_Started_Step3_Text0" xml:space="preserve">
    <value>razor構文を使用して、ビューのinputコントロールを初期化します。</value>
    <comment>Initialize the input control in view using razor syntax.</comment>
  </data>
  <data name="Getting_Started_Step4_Text0" xml:space="preserve">
    <value>（オプション）CSSを追加して、inputコントロールの外観をカスタマイズします。</value>
    <comment>(Optional) Add some CSS to customize the input control's appearance.</comment>
  </data>
  <data name="Getting_Started_Step_Title_Text0" xml:space="preserve">
    <value>ASP.NET MVCアプリケーションでInputコントロールの使用を開始する際の手順。</value>
    <comment>Steps for getting started with Input controls in ASP.NET MVC applications:</comment>
  </data>
  <data name="Getting_Started_Text0" xml:space="preserve">
    <value>はじめに</value>
    <comment>Getting Started</comment>
  </data>
  <data name="InputDateTime_Description_Text0" xml:space="preserve">
    <value>InputDateコントロールと同様に、InputTimeコントロールを使用してJavaScriptの日付の時間部分を変更できます。 InputTimeコントロールは、&lt;b&gt;Format&lt;/b&gt;、&lt;b&gt;Min&lt;/b&gt;、&lt;b&gt;Max&lt;/b&gt;、&lt;b&gt;Value&lt;/b&gt;など、多くのプロパティをInputDateコントロールと共有しています。 InputTimeコントロールには、ドロップダウンリストのエントリ間の分数を指定できる&lt;b&gt;Step&lt;/b&gt;プロパティも用意されています。</value>
    <comment>Similar to the InputDate control, the InputTime control allows you to modify the time portion of
            a JavaScript date. The InputTime control shares many of the same properties as the InputDate control,
            including &lt;b&gt;Format&lt;/b&gt;, &lt;b&gt;Min&lt;/b&gt;, &lt;b&gt;Max&lt;/b&gt;, and &lt;b&gt;Value&lt;/b&gt;. The InputTime control also offers a
            &lt;b&gt;Step&lt;/b&gt; property that allows you to specify the number of minutes between entries in its drop-down
            list.</comment>
  </data>
  <data name="InputDateTime_Description_Text1" xml:space="preserve">
    <value>InputDateTimeコントロールはInputDateとInputTimeコントロールを組み合わせて、日付と時刻を設定できます。InputDateTimeコントロールは2つのドロップダウンを持ち、日付をカレンダーで、時刻をリストで選択します。</value>
    <comment>The InputDateTime control combines the InputDate and InputTime controls, allowing you to set the date
            and time portions. The InputDateTime control has two drop-downs: a Calendar
            for picking dates, and a list for picking times.</comment>
  </data>
  <data name="InputDateTime_Description_Text2" xml:space="preserve">
    <value>次の例では、InputTimeコントロールとInputDateコントロールを組み合わせた使用方法を示します。 これらのコントロールは協調して機能することにより、同じJavaScriptのDateTimeオブジェクトを編集しますが、DateTimeのそれぞれの担当部分のみを更新することに注意してください。</value>
    <comment>The example below illustrates how to use the InputTime control in conjunction with the InputDate
            control. Notice that these controls work together to edit the same DateTime JavaScript Object
            and only update the part of the DateTime that they are responsible for.</comment>
  </data>
  <data name="InputDateTime_Description_Text3" xml:space="preserve">
    <value>また、以下の例は、InputDateTimeコントロールが日付と時刻の両方を編集することを示します。</value>
    <comment>The example also shows an InputDateTime that updates both the date and time parts.</comment>
  </data>
  <data name="InputDateTime_Title_Text0" xml:space="preserve">
    <value>InputDate, InputTime and InputDateTim</value>
    <comment>InputDate, InputTime and InputDateTim</comment>
  </data>
  <data name="InputDate_Calendar_Description_Text0" xml:space="preserve">
    <value>InputDateコントロールを使用すると、ドロップダウンカレンダーを介して日付を編集および選択でき、不正な値の入力を防止できます。 InputDateのドロップダウンカレンダーは個別のコントロールとして開発されたもので、InputDateコントロールから独立して使用できます。</value>
    <comment>The InputDate control allows you to edit and select dates via a drop-down calendar,
            preventing you from entering an incorrect value. The InputDate's drop-down calendar
            was developed as a separate control and can be used be used independently
            from the InputDate control.</comment>
  </data>
  <data name="InputDate_Calendar_Description_Text1" xml:space="preserve">
    <value>次の例は、これらの各プロパティの使用方法を示します。</value>
    <comment>The example below demonstrates how to use each of these properties.</comment>
  </data>
  <data name="InputDate_Calendar_Property_Text0" xml:space="preserve">
    <value>&lt;b&gt;Value&lt;/b&gt;: コントロールの日付値を指定します。</value>
    <comment>&lt;b&gt;Value&lt;/b&gt;: Specifies the date value for the control.</comment>
  </data>
  <data name="InputDate_Calendar_Property_Text1" xml:space="preserve">
    <value>&lt;b&gt;Min&lt;/b&gt;: コントロールに入力可能な最小の日付値を指定します。</value>
    <comment>&lt;b&gt;Min&lt;/b&gt;: Specifies the minimum date value that can be entered in the control.</comment>
  </data>
  <data name="InputDate_Calendar_Property_Text2" xml:space="preserve">
    <value>&lt;b&gt;Max&lt;/b&gt;: コントロールに入力可能な最大の日付値を指定します。</value>
    <comment>&lt;b&gt;Max&lt;/b&gt;: Specifies the maximum date value that can be entered in the control.</comment>
  </data>
  <data name="InputDate_Calendar_Property_Title_Text0" xml:space="preserve">
    <value>InputDateとCalendarは両方とも、複数のプロパティを指定してコントロールの動作を変更します。
            最もよく使用されるプロパティは次のとおりです。</value>
    <comment>Both InputDate and Calendar, specify several properties to alter the controls' behavior.
            The most commonly used properties include:</comment>
  </data>
  <data name="InputMask_Description_Text0" xml:space="preserve">
    <value>InputMaskコントロールを使用すると、キー入力と同時にユーザー入力を検証および書式設定でき、不正なデータを防止できます。  InputMaskコントロールはプロパティを何も指定しなくても使用できますが、通常は&lt;b&gt;Value&lt;/b&gt;プロパティと&lt;b&gt;Mask&lt;/b&gt;プロパティを設定します。他のMVC入力コントロールと同様に、&lt;b&gt;Value&lt;/b&gt;プロパティはInputMaskコントロールの値を指定します。  &lt;b&gt;Mask&lt;/b&gt;プロパティはコントロールのマスクを指定し、以下の文字の組み合わせをサポートします。</value>
    <comment>The InputMask control allows you to validate and format user input as it is entered, preventing
            invalid data.  The InputMask control can be used without specifying any of its properties; however,
            you will typically set its &lt;b&gt;Value&lt;/b&gt; and &lt;b&gt;Mask&lt;/b&gt; properties.  Like the other MVC input
            controls, the &lt;b&gt;Value&lt;/b&gt; property specifies the value for the InputMask control.  The &lt;b&gt;Mask&lt;/b&gt; property
            specifies the control's mask and supports a combination of the following characters:</comment>
  </data>
  <data name="InputMask_Description_Text1" xml:space="preserve">
    <value>次の例は、InputMaskコントロール、InputDateコントロール、およびInputTimeコントロールで&lt;b&gt;Value&lt;/b&gt;プロパティと&lt;b&gt;Mask&lt;/b&gt;プロパティを使用する方法を示します。</value>
    <comment>The examples below demonstrates how to use the &lt;b&gt;Value&lt;/b&gt; and &lt;b&gt;Mask&lt;/b&gt; properties with the
            InputMask, InputDate, and InputTime controls.</comment>
  </data>
  <data name="InputNumber_Description_Text0" xml:space="preserve">
    <value>InputNumberコントロールを使用して数字を編集できます。その際、無効なデータの入力を防止でき、また、オプションで入力と同時に数値の書式を設定できます。InputNumberはプロパティを何も指定しなくても使用できますが、通常は、&lt;b&gt;Value&lt;/b&gt;プロパティを使ってデータに連結します。</value>
    <comment>The InputNumber control allows you to edit numbers, preventing you from entering invalid
            data and optionally formatting the numeric value as it is edited. The InputNumber can be
            used without specifying any of its properties; however, you'll typically want to bind it
            to some data using the &lt;b&gt;Value&lt;/b&gt; property.</comment>
  </data>
  <data name="InputNumber_Description_Text1" xml:space="preserve">
    <value>次の例は、これらすべてのプロパティの使用方法を示します。</value>
    <comment>The example below demonstrates how to use all of these properties.</comment>
  </data>
  <data name="InputNumber_Property_Text0" xml:space="preserve">
    <value>&lt;b&gt;Min&lt;/b&gt;: 入力可能な最小数値を指定します。</value>
    <comment>&lt;b&gt;Min&lt;/b&gt;: Specifies the minimum numeric value that can be entered.</comment>
  </data>
  <data name="InputNumber_Property_Text1" xml:space="preserve">
    <value>&lt;b&gt;Max&lt;/b&gt;: 入力可能な最大数値を指定します。</value>
    <comment>&lt;b&gt;Max&lt;/b&gt;: Specifies the maximum numeric value that can be entered.</comment>
  </data>
  <data name="InputNumber_Property_Text2" xml:space="preserve">
    <value>&lt;b&gt;Step&lt;/b&gt;: スピナーボタンがクリックされたときに現在の値に加算または減算する量を指定します。</value>
    <comment>&lt;b&gt;Step&lt;/b&gt;: Specifies the amount to add or subtract from the current
                value when the spinner buttons are clicked.</comment>
  </data>
  <data name="InputNumber_Property_Text3" xml:space="preserve">
    <value>&lt;b&gt;Format&lt;/b&gt;: 編集中の数値を表示するために使用される数値書式を指定します。formatプロパティには、.NET形式の&lt;a href="http://msdn.microsoft.com/ja-jp/library/dwhawy9k(v=vs.110).aspx" target="_blank"&gt;数値書式文字列&lt;/a&gt;を使用します。</value>
    <comment>&lt;b&gt;Format&lt;/b&gt;: Specifies the numeric format used to display the number being
                edited. The format property uses a .NET-style
                &lt;a href="http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx" target="_blank"&gt;numeric format string&lt;/a&gt;.</comment>
  </data>
  <data name="InputNumber_Property_Title_Text0" xml:space="preserve">
    <value>&lt;b&gt;value&lt;/b&gt;プロパティに加えて、InputNumberコントロールはいくつかのプロパティを備えており、動作を変更するために使用できます。たとえば、次のとおりです。</value>
    <comment>In addition to the &lt;b&gt;value&lt;/b&gt; property, the InputNumber control offers several other
            properties that can be used to alter its behavior, such as:</comment>
  </data>
  <data name="Letter_Space_Text0" xml:space="preserve">
    <value>英字またはスペース。</value>
    <comment>Letter or space.</comment>
  </data>
  <data name="Letter_Text0" xml:space="preserve">
    <value>英字。</value>
    <comment>Letter.</comment>
  </data>
  <data name="ListBox_Description_Text0" xml:space="preserve">
    <value>ListBoxコントロールには項目のリストが表示され、マウスとキーボードを使って項目を選択できます。 ListBoxコントロールを使用するためには、AutoCompleteコントロールやComboBoxコントロールと同様に、&lt;b&gt;Bind&lt;/b&gt;プロパティを指定する必要があります。</value>
    <comment>The ListBox control displays a list of items and allows you to select items using your
            mouse and keyboard. Like the AutoComplete and ComboBox controls, you must specify the
            ListBox's &lt;b&gt;Bind&lt;/b&gt; property in order to use the control.</comment>
  </data>
  <data name="ListBox_Description_Text1" xml:space="preserve">
    <value>次の例では、ListBoxコントロール内の項目を選択でき、コントロールの&lt;b&gt;SelectedIndex&lt;/b&gt;プロパティと&lt;b&gt;SelectedValue&lt;/b&gt;プロパティも表示できます。</value>
    <comment>The example below allows you to select an item within the ListBox control, and also displays
            the control's &lt;b&gt;SelectedIndex&lt;/b&gt; and &lt;b&gt;SelectedValue&lt;/b&gt; properties.</comment>
  </data>
  <data name="Literals_Text0" xml:space="preserve">
    <value>リテラル。</value>
    <comment>Literals.</comment>
  </data>
  <data name="Localized_Currency_Symbol_Text0" xml:space="preserve">
    <value>ローカライズされた通貨記号。</value>
    <comment>Localized currency symbol.</comment>
  </data>
  <data name="Localized_Date_Separator_Text0" xml:space="preserve">
    <value>ローカライズされた日付の区切り文字。</value>
    <comment>Localized date separator.</comment>
  </data>
  <data name="Localized_Decimal_Point_Text0" xml:space="preserve">
    <value>ローカライズされた小数点。</value>
    <comment>Localized decimal point.</comment>
  </data>
  <data name="Localized_Thousand_Separator_Text0" xml:space="preserve">
    <value>ローカライズされた桁区切り。</value>
    <comment>Localized thousand separator.</comment>
  </data>
  <data name="Localized_Time_Separator_Text0" xml:space="preserve">
    <value>ローカライズされた時刻区切り。</value>
    <comment>Localized time separator.</comment>
  </data>
  <data name="Menu_Description_Text0" xml:space="preserve">
    <value>Menuコントロールを使用して、クリック可能な項目を含む単純なドロップダウンリストを作成できます。 Menuの項目は、直接定義するか、ComboBoxと同様に&lt;b&gt;Bind&lt;/b&gt;プロパティを使用して定義します。
            Menuに表示されるテキストを指定するには、&lt;b&gt;Header&lt;/b&gt;プロパティを設定します。</value>
    <comment>The Menu control allows you to create a simple drop-down list with clickable items. The Menu's
            items can be defined directly or by using the &lt;b&gt;Bind&lt;/b&gt; property similar to the ComboBox.
            To specify the text displayed on the Menu, you can set the &lt;b&gt;Header&lt;/b&gt; property.</comment>
  </data>
  <data name="Menu_Description_Text1" xml:space="preserve">
    <value>次の例は、両方のアプローチの使用方法を示します。</value>
    <comment>The example below demonstrates how to use both approaches.</comment>
  </data>
  <data name="Menu_Handling_Text0" xml:space="preserve">
    <value>&lt;b&gt;executeCommand(param)&lt;/b&gt;: コマンドを実行するメソッド。</value>
    <comment>&lt;b&gt;executeCommand(param)&lt;/b&gt;: A method that executes the command.</comment>
  </data>
  <data name="Menu_Handling_Text1" xml:space="preserve">
    <value>&lt;b&gt;canExecuteCommand(param)&lt;/b&gt;: コマンドが実行できるかどうかを指定するBoolean値を返すメソッド。 戻り値がfalseの場合、メニュー項目は自動的に無効になります。</value>
    <comment>&lt;b&gt;canExecuteCommand(param)&lt;/b&gt;: A method that returns a Boolean value specifying whether or
                not the command can be executed. If the return value is false, the menu item is disabled automatically.</comment>
  </data>
  <data name="Menu_Handling_Title_Text0" xml:space="preserve">
    <value>Menuコントロールには、ユーザーの選択内容を処理するための方法が２つ用意されています。各メニュー項目のコマンドを指定する方法と、&lt;b&gt;ItemClicked&lt;/b&gt;イベントです。 &lt;b&gt;ItemClicked&lt;/b&gt;イベントとは異なり、コマンドは２つのメソッドを実装するオブジェクトです。</value>
    <comment>The Menu control offers two ways to handle user selections, specifying a command on each menu item
            and the &lt;b&gt;ItemClicked&lt;/b&gt; event. Unlike the &lt;b&gt;ItemClicked&lt;/b&gt; event, commands are objects that
            implement two methods:</comment>
  </data>
  <data name="To_Lowercase_Text0" xml:space="preserve">
    <value>後続の文字を小文字に変換します。</value>
    <comment>Converts characters that follow to lowercase.</comment>
  </data>
  <data name="To_Uppercase_Text0" xml:space="preserve">
    <value>後続の文字を大文字に変換します。</value>
    <comment>Converts characters that follow to uppercase.</comment>
  </data>
  <data name="Bind_Only_Text0" xml:space="preserve">
    <value>Bindのみ</value>
    <comment>Bind Only</comment>
  </data>
  <data name="Bound_Calendar_Text0" xml:space="preserve">
    <value>MinおよびMaxを連結したCalendar</value>
    <comment>Bound Calendar with Min &amp;amp; Max</comment>
  </data>
  <data name="Bound_Format_Text0" xml:space="preserve">
    <value>min (0)、max (10)、step、および「c2」形式での連結</value>
    <comment>Bound with min (0), max (10), step, and "c2" format</comment>
  </data>
  <data name="Bound_InputDate_Text0" xml:space="preserve">
    <value>MinおよびMaxを連結したInputDate</value>
    <comment>Bound InputDate with Min &amp;amp; Max</comment>
  </data>
  <data name="Bound_N0_Format_Text0" xml:space="preserve">
    <value>「n」形式での連結</value>
    <comment>Bound with "n" format</comment>
  </data>
  <data name="Editable_Text0" xml:space="preserve">
    <value>編集可</value>
    <comment>Editable</comment>
  </data>
  <data name="Enter_Input_Mask_Placeholder_Text0" xml:space="preserve">
    <value>マスク文字を入力</value>
    <comment>Enter an input mask...</comment>
  </data>
  <data name="InputDateTime_Format_Text0" xml:space="preserve">
    <value>Min, Max, TimeMin, TimeMax, Format,およびTimeStepを連結したInputDateTime</value>
    <comment>Bound InputDateTime with Min, Max, TimeMin, TimeMax, Format, &amp;amp; TimeStep</comment>
  </data>
  <data name="InputDate_Format_Text0" xml:space="preserve">
    <value>Min, Max,およびFormatを連結したInputDate</value>
    <comment>Bound InputDate with Min, Max, &amp;amp; Format</comment>
  </data>
  <data name="InputDate_Mask_Text0" xml:space="preserve">
    <value>Maskを設定したInputDate</value>
    <comment>InputDate with Mask</comment>
  </data>
  <data name="InputTime_Format_Text0" xml:space="preserve">
    <value>Min, Max,およびStepを連結したInputTime</value>
    <comment>Bound InputTime with Min, Max, &amp;amp; Step</comment>
  </data>
  <data name="InputTime_Mask_Text0" xml:space="preserve">
    <value>Maskを設定したInputTime</value>
    <comment>InputTime with Mask</comment>
  </data>
  <data name="Non_Editable_Text0" xml:space="preserve">
    <value>編集不可</value>
    <comment>Non-Editable</comment>
  </data>
  <data name="Phone_Number_Text0" xml:space="preserve">
    <value>電話番号</value>
    <comment>Phone Number</comment>
  </data>
  <data name="Result_Live_Text0" xml:space="preserve">
    <value>結果（ライブ）</value>
    <comment>Result (live)</comment>
  </data>
  <data name="Selected_Date_And_Time_Text0" xml:space="preserve">
    <value>選択された日付と時刻</value>
    <comment>Selected Date &amp;amp; Time</comment>
  </data>
  <data name="Social_Security_Number_Text0" xml:space="preserve">
    <value>社会保障番号</value>
    <comment>Social Security Number</comment>
  </data>
  <data name="Try_Your_Input_Mask_Placeholder_Text0" xml:space="preserve">
    <value>マスクの動作を試す</value>
    <comment>Try your input mask...</comment>
  </data>
  <data name="Try_Your_Own_Text0" xml:space="preserve">
    <value>試してみる</value>
    <comment>Try your own</comment>
  </data>
  <data name="Unbound_N0_Format_Text0" xml:space="preserve">
    <value>「n0」形式での非連結</value>
    <comment>Unbound with "n0" format</comment>
  </data>
  <data name="Unbound_Placeholder_IsRequired_Text0" xml:space="preserve">
    <value>プレースホルダでの非連結、isRequiredは"false"</value>
    <comment>Unbound with placeholder and isRequired="false"</comment>
  </data>
  <data name="Valid_Range_Text0" xml:space="preserve">
    <value>有効な範囲：</value>
    <comment>Valid Range</comment>
  </data>
</root>