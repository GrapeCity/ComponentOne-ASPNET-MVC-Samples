@using C1.Web.Mvc.Grid
@{
    IEnumerable<Sale> taggedFlexGridData = ViewBag.TaggedFlexGridData;
    FullCountry taggedCountry = ViewBag.taggedCountry;
    IEnumerable<Sale> taggedSumByProducts = ViewBag.TaggedSumByProducts;
}

@section Styles{
    <style>
        .fixed-top {
            z-index: 999;
            position: fixed;
            top: 0px;
        }

        .reduce {
            padding-bottom: 0px;
        }
    </style>
}

@section Scripts{
    <script>
        var taggedGrid, taggedFlexPie, exportSettings, settingsDiv, securitySettingsDiv;

        c1.documentReady(function () {
            taggedGrid = wijmo.Control.getControl("#taggedFlexGrid");
            taggedFlexPie = wijmo.Control.getControl("#taggedFlexPie");
            settingsDiv = document.getElementById("exportSettingsDiv");
            securitySettingsDiv = document.getElementById("securitySettingsDiv");
            exportSettings = {
                exportMode: wijmo.grid.pdf.ExportMode.All,
                orientation: wijmo.pdf.PdfPageOrientation.Portrait,
                scaleMode: wijmo.grid.pdf.ScaleMode.ActualSize,
                version: "v1_4",
            };
        });

        function setPermissionPrinting(menu) {
            menu.header = "@Resources.FlexGrid.PDFExport_Printing: <b>" + menu.selectedItem.Header + "</b>";
            exportSettings.permissionPrinting = menu.selectedItem.Header;
        }

		function setVersion(menu) {
            menu.header = "PDF version: <b>" + menu.selectedItem.Header + "</b>";
            switch (menu.selectedItem.Header) {
                case "1.3":
                    exportSettings.version = "v1_3";
                    break;
                case "1.4":
                    exportSettings.version = "v1_4";
                    break;
                case "1.5":
                    exportSettings.version = "v1_5";
                    break;
                case "1.6":
                    exportSettings.version = "v1_6";
                    break;
                case "1.7":
                    exportSettings.version = "v1_7";
                    break;
                case "1.7 ExtensionLevel 3":
                    exportSettings.version = "v1_7Ext3";
                    break;
            }
        }

        function getPassword(user) {
            return document.querySelector('#tb' + user + 'Password').value;
        }

        function getPermission(permissionName) {
            if (permissionName == 'Printing') {
                return exportSettings.permissionPrinting || 'NotAllowed';
            } else {
                return document.querySelector('#cb' + permissionName).checked;
            }
        }

        function formatItemOfTaggedGrid(args) {
            if (args.panel.columns[args.col].binding != "Discount") {
                return;
            }
            var data = parseFloat(args.data);
            if (!isNaN(data)) {
                var r = args.clientRect,
                    x = r.right + 2,
                    y = r.top + (r.bottom - r.top) / 2 - 3;

                args.tagContent = args.canvas.beginTagContent(wijmo.pdf.PdfTagType.P);
                args.canvas.drawText(data > 10 ? "High discount" : (data < 8 ? "Low discount" : "Medium discount"), x, y, {
                    font: new wijmo.pdf.PdfFont('times', 10, 'italic', 'normal'),
                    brush: wijmo.Color.fromString(data > 10 ? "#FF0000" : (data < 8 ? "#448800" : "#888800"))
                });
            }
            args.canvas.endTagContent();
        }

        function exportTaggedGrid() {
            var fontFile = { source: 'https://demo.grapecity.com/wijmo/sample/fonts/ipaexg.ttf', name: 'ipaexg' },
                font = new wijmo.pdf.PdfFont('ipaexg'),
                fontNormal = new wijmo.pdf.PdfFont('times', 12, 'normal', 'normal'),
                fontBold = new wijmo.pdf.PdfFont('times', 12, 'normal', 'bold'),
                fontHeader = new wijmo.pdf.PdfFont('times', 20, 'normal', 'bold');

            var doc = new wijmo.pdf.PdfDocument({
                userPassword: getPassword('User'),
                ownerPassword: getPassword('Owner'),
                version: exportSettings.version,
                tagged: true,
                permissions: {
                    annotating: getPermission('Annotating'),
                    contentAccessibility: getPermission('ContentAccessibility'),
                    copying: getPermission('Copying'),
                    documentAssembly: getPermission('DocumentAssembly'),
                    fillingForms: getPermission('FillingForms'),
                    modifying: getPermission('Modifying'),
                    printing: getPermission('Printing')
                },
                pageSettings: {
                    margins: {
                        left: 50,
                        right: 20,
                        top: 20,
                        bottom: 20
                    }
                },
                header: {
                    declarative: {
                        text: '&[Page]\\&[Pages]\theader\t&[Page]\\&[Pages]'
                    }
                },
                footer: {
                    declarative: {
                        text: '&[Page]\\&[Pages]\tfooter\t&[Page]\\&[Pages]'
                    }
                },
                info: {
                    author: 'C1',
                    title: 'PdfDocument sample',
                    keywords: 'PDF, C1, sample',
                    subject: 'PdfDocument'
                },
                ended: function (_, args) {
                    wijmo.pdf.saveBlob(args.blob, 'FlexGrid.pdf');
                }
            });

            // Title and summary
            doc.addTag(doc.tag(wijmo.pdf.PdfTagType.H1, function() {
                doc.drawText('Sale Report', undefined, undefined, { font: fontHeader });
            }));

            doc.addTag(doc.tag(wijmo.pdf.PdfTagType.P, function() {
                doc.drawText('This report shows the state of sales in a country.', undefined, undefined, { font: fontNormal });
            }));

            doc.moveDown(2);

            // Country information
            doc.addTag(doc.tag(wijmo.pdf.PdfTagType.P, function() {
                doc.drawText('Country: ', undefined, undefined, { font: fontBold, continued: true });
                doc.drawText('@taggedCountry.Name', undefined, undefined, { font: fontNormal });
            }));

            doc.addTag(doc.tag(wijmo.pdf.PdfTagType.P, function() {
                doc.drawText('Name: ', undefined, undefined, { font: fontBold, continued: true });
                doc.drawText('United States of America', undefined, undefined, { font: fontNormal });
            }));

            doc.addTag(doc.tag(wijmo.pdf.PdfTagType.P, function() {
                doc.drawText('Area: ', undefined, undefined, { font: fontBold, continued: true });
                doc.drawText('9.834 million km²', undefined, undefined, { font: fontNormal });
            }));

            doc.addTag(doc.tag(wijmo.pdf.PdfTagType.P, function() {
                doc.drawText('Population: ', undefined, undefined, { font: fontBold, continued: true });
                doc.drawText('333,733,637', undefined, undefined, { font: fontNormal });
            }));

            doc.moveDown(2);

            // Add grid content
            doc.addTag(doc.tag(wijmo.pdf.PdfTagType.P, function () {
                doc.drawText('Sale details: ', undefined, undefined, { font: fontBold });
            }));
            wijmo.grid.pdf.FlexGridPdfConverter.draw(taggedGrid, doc, doc.width+200, null, {
                embeddedFonts: [fontFile],
                styles: {
                    cellStyle: {
                        backgroundColor: '#ffffff',
                        borderColor: '#c6c6c6',
                        font: font
                    },
                    altCellStyle: {
                        backgroundColor: '#f9f9f9'
                    },
                    groupCellStyle: {
                        backgroundColor: '#dddddd'
                    },
                    headerCellStyle: {
                        backgroundColor: '#eaeaea'
                    }
                },
                formatItem: formatItemOfTaggedGrid
            });

            doc.moveDown(2);

            // Add Chart
            taggedFlexPie.saveImageToDataUrl(wijmo.chart.ImageFormat.Png, function(url) {
                doc.addTag(doc.tag(wijmo.pdf.PdfTagType.Figure, [
                    doc.tag(wijmo.pdf.PdfTagType.Caption, function() {
                        doc.drawText('Total revenues by products:', 0, doc.y, { font: fontBold });
                    }),
                    function() {
                        doc.drawImage(url, 15, doc.y, { height: doc.height * 0.4 });
                    }
                ], { actual: 'The chart' }));

                // Finish the document.
                doc.end();
            });
        }

    </script>
}

<div class="copy well" id="exportSettingsDiv">
    <div id="securitySettingsDiv">
        <b>@Html.Raw(Resources.FlexGrid.PDFExport_SecuritySettings)</b>
        <div class="panel-body reduce">
            <div class="row">
                <div class="col-sm-3">
                    <input type="text" id="tbUserPassword" class="form-control" placeholder="@Resources.FlexGrid.PDFExport_UserPassword" />
                </div>
                <div class="col-sm-3">
                    <input type="text" id="tbOwnerPassword" class="form-control" placeholder="@Resources.FlexGrid.PDFExport_OwnerPassword" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-sm-3">

                    @(Html.C1().Menu().Header("PDF version: <b>1.4</b>").OnClientItemClicked("setVersion")
						.MenuItems(items =>
						{
							items.Add("1.3");
							items.Add("1.4");
							items.Add("1.5");
							items.Add("1.6");
							items.Add("1.7");
							items.Add("1.7 ExtensionLevel 3");
						}).SelectedIndex(1))
                </div>
            </div>
            <div class="panel-body reduce">
                <div class="row">
                    <div class="col">
                        <b>@Resources.FlexGrid.PDFExport_Permissions</b> (<i>@Resources.FlexGrid.PDFExport_PermissionsNote</i>)
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label><input type="checkbox" id="cbAnnotating" />@Resources.FlexGrid.PDFExport_Annotating</label>
                        </div>
                        <div class="checkbox">
                            <label><input type="checkbox" id="cbContentAccessibility" />@Resources.FlexGrid.PDFExport_ContentAccessibility</label>
                        </div>
                        <div class="checkbox">
                            <label><input type="checkbox" id="cbCopying" />@Resources.FlexGrid.PDFExport_Copying</label>
                        </div>
                        <div class="checkbox">
                            <label><input type="checkbox" id="cbDocumentAssembly" />@Resources.FlexGrid.PDFExport_DocumentAssembly</label>
                        </div>
                        <div class="checkbox">
                            <label><input type="checkbox" id="cbFillingForms" />@Resources.FlexGrid.PDFExport_FillingForms</label>
                        </div>
                        <div class="checkbox">
                            <label><input type="checkbox" id="cbModifying" />@Resources.FlexGrid.PDFExport_Modifying</label>
                        </div>
                    </div>
                </div>

                @(Html.C1().Menu().Header(Resources.FlexGrid.PDFExport_Printing + ": <b>NotAllowed</b>").OnClientItemClicked("setPermissionPrinting")
                    .MenuItems(items =>
                    {
                        items.Add("NotAllowed");
                        items.Add("AllowLowResolution");
                        items.Add("AllowHighResolution");
                    }))
            </div>
        </div>
    </div>
</div>

<button class="btn btn-default" onclick="exportTaggedGrid()">@Html.Raw(Resources.FlexGrid.PDFExport_Export)</button>
<br />
@(Html.C1().FlexGrid<Sale>().Id("taggedFlexGrid")
        .Bind(taggedFlexGridData)
        .SelectionMode(SelectionMode.ListBox)
        .HeadersVisibility(HeadersVisibility.All)
        .CssClass("grid")
        .Height("200px")
        .AutoGenerateColumns(false)
        .Columns(bl =>
        {
            bl.Add(cb => cb.Binding("ID").Width("60"));
            bl.Add(cb => cb.Binding("Start").Header("Start Date").Format("d").Width("100"));
            bl.Add(cb => cb.Binding("End").Header("End Date").Format("d").Width("100"));
            bl.Add(cb => cb.Binding("Product").Width("80"));
            bl.Add(cb => cb.Binding("Color").Width("60"));
            bl.Add(cb => cb.Binding("Amount2").Header("Revenue").Format("c2").Width("100"));
            bl.Add(cb => cb.Binding("Discount").Format("p1").Width("80"));
        })
    )
@(Html.C1().FlexPie<Sale>().Id("taggedFlexPie")
        .InnerRadius(0.65f)
        .Bind("Product", "Amount2", taggedSumByProducts)
        .DataLabel(dl => dl.Content("{value:c1}").Position(C1.Web.Mvc.Chart.PieLabelPosition.Inside))
        .Width("50%")
    )

@section Summary{
    <p>@Html.Raw(Resources.FlexGrid.PDFExport_Summary) @Html.Raw(Resources.FlexGrid.PDFExport_Title4).</p>
}

@section Description{
    <p>@Html.Raw(Resources.FlexGrid.PDFExport_Text9)</p>
    <p><b>@Html.Raw(Resources.FlexGrid.PDFExport_Text10)</b></p>
    <p>@Html.Raw(Resources.FlexGrid.PDFExport_Text8)</p>
}