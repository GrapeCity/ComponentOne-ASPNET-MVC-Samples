<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutoScale_Text0" xml:space="preserve">
    <value>この例は、startAngle、sweepAngle、autoScale の各プロパティを RadialGauge コントロールで使用する方法を示します。</value>
    <comment>This example demonstrates how to use the startAngle, sweepAngle, and autoScale properties with the RadialGauge controls.</comment>
  </data>
  <data name="Editing_Text0" xml:space="preserve">
    <value>この例は、isReadOnly プロパティと step プロパティを RadialGauge コントロールで使用する方法を示します。</value>
    <comment>This example demonstrates how to use the isReadOnly and step properties with the RadialGauge controls.</comment>
  </data>
  <data name="Editing_Text1" xml:space="preserve">
    <value>&lt;b&gt;ShowTicks：&lt;/b&gt;ゲージに各ステップで目盛りを表示するかtickSpacing値を表示するかを決定します。</value>
    <comment>&lt;b&gt;ShowTicks:&lt;/b&gt; determines whether the gauge should display tickmarks at each step or tickSpacing value.</comment>
  </data>
  <data name="Editing_Text2" xml:space="preserve">
    <value>&lt;b&gt;ShowTickText：&lt;/b&gt;ゲージに各目盛りのテキスト値を表示するかどうかを決定します。</value>
    <comment>&lt;b&gt;ShowTickText:&lt;/b&gt; determines whether the gauge should display the text value of each tick mark.</comment>
  </data>
  <data name="Editing_Text3" xml:space="preserve">
    <value>&lt;b&gt;NeedleShape：&lt;/b&gt;ゲージの針要素の形状を決定します。</value>
    <comment>&lt;b&gt;NeedleShape:&lt;/b&gt; determines the shape of the gauge's needle element.</comment>
  </data>
  <data name="Editing_Text4" xml:space="preserve">
    <value>&lt;b&gt;NeedleLength：&lt;/b&gt;ポインター範囲に対するゲージ針要素の長さを決定します。</value>
    <comment>&lt;b&gt;NeedleLength:&lt;/b&gt; determines the length of the gauge's needle element with respect to the pointer range.</comment>
  </data>
  <data name="Index_Text0" xml:space="preserve">
    <value>このサンプルは、RadialGauge コントロールの基本的な使用方法を示します。</value>
    <comment>This sample shows the basic usage of the RadialGauge control.</comment>
  </data>
  <data name="Ranges_Text0" xml:space="preserve">
    <value>この例は、RadialGauge で範囲を使用する方法を示します。</value>
    <comment>The example demonstrates how to use ranges with the RadialGauge.</comment>
  </data>
  <data name="Scaling_Text0" xml:space="preserve">
    <value>この例では、RadialGauge コントロールのスケールを移動する方法を示します。</value>
    <comment>This example demonstrates how to scale RadialGauge controls.</comment>
  </data>
  <data name="ShowText_Text0" xml:space="preserve">
    <value>この例は、RadialGauge コントロールで showText プロパティを使用する方法を示します。</value>
    <comment>This example demonstrates how to use the showText properties with the RadialGauge controls.</comment>
  </data>
  <data name="Styling_Text0" xml:space="preserve">
    <value>この例では、「カスタムゲージ」の CSS クラスを RadialGauge に追加し、CSS ルールを定義して両方にオレンジ色のポインタを作成しました。</value>
    <comment>In this example, we added the "custom-gauge" CSS class to the RadialGauge, and define some CSS rules to create an orange pointer for both.</comment>
  </data>
</root>