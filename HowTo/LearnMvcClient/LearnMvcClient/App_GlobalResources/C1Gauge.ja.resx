<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Architecture_Text1" xml:space="preserve">
    <value>ゲージクラスの階層は次のようになります。</value>
    <comment>The hierarchy of gauge classes is as follows:</comment>
  </data>
  <data name="Architecture_Text10" xml:space="preserve">
    <value>&lt;b&gt;face&lt;/b&gt;：ゲージの背景を表します。face 範囲の "min" プロパティと "max" プロパティは、ゲージの "min" プロパティと "max" プロパティに対応しており、ゲージに表示できる値を制限します。</value>
    <comment>&lt;b&gt;face&lt;/b&gt;:
        Represents the gauge background. The "min" and "max" properties
        of the face range correspond to the "min" and "max" properties
        of the gauge, and limit the values that the gauge can display.</comment>
  </data>
  <data name="Architecture_Text11" xml:space="preserve">
    <value>&lt;b&gt;pointer&lt;/b&gt;：ゲージの現在の値を示します。pointer 範囲の "max" プロパティは、ゲージの "value" プロパティに対応します。</value>
    <comment>&lt;b&gt;pointer&lt;/b&gt;:
        Indicates the gauge's current value. The "max" property of
        the pointer range corresponds to the "value" property of
        the gauge.</comment>
  </data>
  <data name="Architecture_Text12" xml:space="preserve">
    <value>この 2 つの特殊な範囲のほかに、任意の数の範囲をゲージの "ranges" コレクションに追加できます。</value>
    <comment>In addition to these two special ranges, gauges may have any number
    of additional ranges added to their ranges" collection."</comment>
  </data>
  <data name="Architecture_Text2" xml:space="preserve">
    <value>&lt;b&gt;Gauge&lt;/b&gt;：抽象基本クラス。</value>
    <comment>&lt;b&gt;Gauge&lt;/b&gt;: Abstract base class.</comment>
  </data>
  <data name="Architecture_Text3" xml:space="preserve">
    <value>&lt;b&gt;RadialGauge&lt;/b&gt;：円形の目盛りに沿って値を表示します。</value>
    <comment>&lt;b&gt;RadialGauge&lt;/b&gt;: Displays values along a circular scale.</comment>
  </data>
  <data name="Architecture_Text4" xml:space="preserve">
    <value>&lt;b&gt;LinearGauge&lt;/b&gt;：直線の目盛りに沿って値を表示します。</value>
    <comment>&lt;b&gt;LinearGauge&lt;/b&gt;: Displays values along a linear scale.</comment>
  </data>
  <data name="Architecture_Text5" xml:space="preserve">
    <value>&lt;b&gt;BulletGraph&lt;/b&gt;：直線の目盛りに沿って実際の値とターゲット値を表示します。</value>
    <comment>&lt;b&gt;BulletGraph&lt;/b&gt;: Displays actual and target values
                        along a linear scale.</comment>
  </data>
  <data name="Architecture_Text6" xml:space="preserve">
    <value>ルート Gauge クラスは、すべての Gauge クラスで共有される次のような基本的な要素を提供します。</value>
    <comment>The root Gauge class provides basic elements shares by all
    Gauge classes:</comment>
  </data>
  <data name="Architecture_Text7" xml:space="preserve">
    <value>カスタマイズ可能なパーツを持つ SVG ベースのコントロールテンプレート。</value>
    <comment>An SVG-based control template with customizable parts.</comment>
  </data>
  <data name="Architecture_Text8" xml:space="preserve">
    <value>"min"、"max"、"value"、"ranges" など、共通するプロパティ、イベント、メソッドの一式。</value>
    <comment>A common set of properties, events and methods including
        min", "max", "value", and "ranges"."</comment>
  </data>
  <data name="Architecture_Text9" xml:space="preserve">
    <value>ComponentOne MVC ゲージはいくつかの &lt;b&gt;Range&lt;/b&gt; オブジェクトで構成されています。どのゲージにも、少なくとも "face" および "pointer" という 2 つの範囲があります。</value>
    <comment>C1 MVC gauges are composed of &lt;b&gt;Range&lt;/b&gt; objects.
    Every gauge has at least two ranges: the "face" and
    the "pointer":</comment>
  </data>
  <data name="Architecture_Title" xml:space="preserve">
    <value>ゲージのアーキテクチャ</value>
    <comment>Gauge Architecture</comment>
  </data>
  <data name="Architecture_Title1" xml:space="preserve">
    <value>ゲージの範囲</value>
    <comment>Gauge Ranges</comment>
  </data>
  <data name="BasicProperties_Text1" xml:space="preserve">
    <value>すべての ComponentOne MVC ゲージクラスに共通する主要なプロパティは以下のとおりです。</value>
    <comment>The main properties common to all C1 MVC gauge classes are:</comment>
  </data>
  <data name="BasicProperties_Text10" xml:space="preserve">
    <value>isReadOnly</value>
    <comment>isReadOnly</comment>
  </data>
  <data name="BasicProperties_Text11" xml:space="preserve">
    <value>step</value>
    <comment>step</comment>
  </data>
  <data name="BasicProperties_Text12" xml:space="preserve">
    <value>isAnimated</value>
    <comment>isAnimated</comment>
  </data>
  <data name="BasicProperties_Text2" xml:space="preserve">
    <value>&lt;dt&gt;min&lt;/dt&gt;
    &lt;dd&gt;ゲージに表示可能な最小値。&lt;/dd&gt;
    &lt;dt&gt;max&lt;/dt&gt;
    &lt;dd&gt;ゲージに表示可能な最大値。&lt;/dd&gt;
    &lt;dt&gt;value&lt;/dt&gt;
    &lt;dd&gt;ゲージに表示されている現在の値。&lt;/dd&gt;
    &lt;dt&gt;showText&lt;/dt&gt;
    &lt;dd&gt;ゲージ上に min/max/value プロパティをテキストとして表示するかどうか。&lt;/dd&gt;</value>
    <comment>&lt;dt&gt;min&lt;/dt&gt;
    &lt;dd&gt;The smallest value that can be displayed on the gauge.&lt;/dd&gt;
    &lt;dt&gt;max&lt;/dt&gt;
    &lt;dd&gt;The largest value that can be displayed on the gauge.&lt;/dd&gt;
    &lt;dt&gt;value&lt;/dt&gt;
    &lt;dd&gt;The current value displayed on the gauge.&lt;/dd&gt;
    &lt;dt&gt;showText&lt;/dt&gt;
    &lt;dd&gt;Whether to show the min/max/value properties as text on the gauge.&lt;/dd&gt;</comment>
  </data>
  <data name="BasicProperties_Text3" xml:space="preserve">
    <value>ComponentOne MVC ゲージは、値エディタとして使用できます。編集機能は、以下のプロパティによって制御されます。</value>
    <comment>C1 MVC gauges can be used as value editors. The editing features
    are controlled by these properties:</comment>
  </data>
  <data name="BasicProperties_Text4" xml:space="preserve">
    <value>&lt;dt&gt;isReadOnly&lt;/dt&gt;
    &lt;dd&gt;ユーザーがゲージ値を変更できるかどうか。&lt;/dd&gt;
    &lt;dt&gt;step&lt;/dt&gt;
    &lt;dd&gt;ゲージ値を変更する際の増減値。&lt;/dd&gt;
    &lt;dt&gt;isAnimated&lt;/dt&gt;
    &lt;dd&gt;アニメーションを使用して値の変化を表示するかどうか。&lt;/dd&gt;</value>
    <comment>&lt;dt&gt;isReadOnly&lt;/dt&gt;
    &lt;dd&gt;Whether users can change the gauge value.&lt;/dd&gt;
    &lt;dt&gt;step&lt;/dt&gt;
    &lt;dd&gt;The step to use then changing the gauge value.&lt;/dd&gt;
    &lt;dt&gt;isAnimated&lt;/dt&gt;
    &lt;dd&gt;Whether to use animations to display value changes.&lt;/dd&gt;</comment>
  </data>
  <data name="BasicProperties_Text5" xml:space="preserve">
    <value>以下のパネルを使用して、これらのプロパティがさまざまなタイプのゲージに与える効果を確認してください。</value>
    <comment>Use the panel below to see the effect of each of these properties
    on different types of Gauge:</comment>
  </data>
  <data name="BasicProperties_Text6" xml:space="preserve">
    <value>min</value>
    <comment>min</comment>
  </data>
  <data name="BasicProperties_Text7" xml:space="preserve">
    <value>max</value>
    <comment>max</comment>
  </data>
  <data name="BasicProperties_Text8" xml:space="preserve">
    <value>value</value>
    <comment>value</comment>
  </data>
  <data name="BasicProperties_Text9" xml:space="preserve">
    <value>showText</value>
    <comment>showText</comment>
  </data>
  <data name="BasicProperties_Title" xml:space="preserve">
    <value>ゲージの基本</value>
    <comment>Gauge Basics</comment>
  </data>
  <data name="BulletGraphs_Text1" xml:space="preserve">
    <value>BulletGraph は直線型ゲージの一種で、特にダッシュボードで使用することを意図して設計されています。1 つの重要な測定値を比較用の値および定性的な範囲と共に表示して、値の良、否などの状態を一目でわかるように示します。</value>
    <comment>The BulletGraph is a type of linear gauge designed specifically
    for use in dashboards. It displays a single key measure along
    with a comparative measure and qualitative ranges to instantly
    signal whether the measure is good, bad, or in some other state.</comment>
  </data>
  <data name="BulletGraphs_Text2" xml:space="preserve">
    <value>ブレットグラフは、ダッシュボード設計エキスパートの Stephen Few 氏によって作成されて普及しました。</value>
    <comment>Bullet Graphs were created and popularized by dashboard design
    expert Stephen Few.</comment>
  </data>
  <data name="BulletGraphs_Title" xml:space="preserve">
    <value>ブレットグラフ</value>
    <comment>Bullet Graphs</comment>
  </data>
  <data name="ElementsFace_Text1" xml:space="preserve">
    <value>"face" は、ゲージの背景を表す範囲です。face 範囲の "min" プロパティと "max" プロパティは、ゲージコントロールの "min" プロパティと "max" プロパティに対応しており、ゲージに表示できる値を制限します。</value>
    <comment>The "face" is a range that represents the gauge background.
    The "min" and "max" properties of the face range correspond
    to the "min" and "max" properties of the gauge control, and
    limit the values that the gauge can display.</comment>
  </data>
  <data name="ElementsFace_Text2" xml:space="preserve">
    <value>色</value>
    <comment>Color</comment>
  </data>
  <data name="ElementsFace_Text3" xml:space="preserve">
    <value>太さ</value>
    <comment>Thickness</comment>
  </data>
  <data name="ElementsFace_Title" xml:space="preserve">
    <value>フェース要素</value>
    <comment>Face Element</comment>
  </data>
  <data name="ElementsPointer_Text1" xml:space="preserve">
    <value>"pointer" は、ゲージの現在の値を示す範囲です。pointer 範囲の "max" プロパティは、ゲージの "value" プロパティに対応します。</value>
    <comment>The "pointer" is a range that indicates the gauge's current
    value. The "max" property of the pointer range corresponds
    to the "value" property of the gauge.</comment>
  </data>
  <data name="ElementsPointer_Text2" xml:space="preserve">
    <value>色</value>
    <comment>Color</comment>
  </data>
  <data name="ElementsPointer_Text3" xml:space="preserve">
    <value>太さ</value>
    <comment>Thickness</comment>
  </data>
  <data name="ElementsPointer_Title" xml:space="preserve">
    <value>ポインタ要素</value>
    <comment>Pointer Element</comment>
  </data>
  <data name="ElementsRanges_Text1" xml:space="preserve">
    <value>"face" 範囲と "pointer" 範囲のほかに、ゲージ内にいくつかのゾーン（「不良」、「標準」、「良好」など）を表示するための範囲を追加できます。</value>
    <comment>In addition to the "face" and "pointer" ranges, gauges may
    contain additional ranges that show zones within the gauge
    (like 'bad', 'average', and 'good').</comment>
  </data>
  <data name="ElementsRanges_Text2" xml:space="preserve">
    <value>「showRanges」プロパティの設定に基づいて、これらの追加範囲を常時表示することも、現在のゲージ値に基づいて「pointer」範囲の色を決定するために使用することもできます。</value>
    <comment>Depending on the setting of the 'showRanges' property, these
    additional ranges may be shown at all times or used to determine
    the color of the 'pointer' range based on the current gauge
    value.</comment>
  </data>
  <data name="ElementsRanges_Text3" xml:space="preserve">
    <value>範囲の表示</value>
    <comment>Show Ranges</comment>
  </data>
  <data name="ElementsRanges_Text4" xml:space="preserve">
    <value>範囲</value>
    <comment>Ranges</comment>
  </data>
  <data name="ElementsRanges_Title" xml:space="preserve">
    <value>範囲</value>
    <comment>Ranges</comment>
  </data>
  <data name="ElementsTextValues_Text1" xml:space="preserve">
    <value>ComponentOne MVC ゲージには、テキスト表示に影響を与える 3 つのプロパティがあります。</value>
    <comment>C1 MVC gauges have three properties that affect text display:</comment>
  </data>
  <data name="ElementsTextValues_Text2" xml:space="preserve">
    <value>&lt;b&gt;showText&lt;/b&gt;：ゲージに最小値、最大値、現在値の一部または全部をテキスト要素として表示するかどうかを決定します。</value>
    <comment>&lt;b&gt;showText&lt;/b&gt;:
        Determines whether the gauge should show min, max, and/or
        current values as text elements,</comment>
  </data>
  <data name="ElementsTextValues_Text3" xml:space="preserve">
    <value>&lt;b&gt;format&lt;/b&gt;：数値を文字列に変換するために使用される書式文字列を取得または設定します。</value>
    <comment>&lt;b&gt;format&lt;/b&gt;:
        Gets or sets the format string used to convert numeric values
        into strings, and</comment>
  </data>
  <data name="ElementsTextValues_Text4" xml:space="preserve">
    <value>&lt;b&gt;getText&lt;/b&gt;：値を表示するためのカスタム文字列を提供するコールバック関数。</value>
    <comment>&lt;b&gt;getText&lt;/b&gt;:
        A callback function used to provide custom strings to display
        the values.</comment>
  </data>
  <data name="ElementsTextValues_Text5" xml:space="preserve">
    <value>テキスト表示</value>
    <comment>Show Text</comment>
  </data>
  <data name="ElementsTextValues_Text6" xml:space="preserve">
    <value>書式</value>
    <comment>Format</comment>
  </data>
  <data name="ElementsTextValues_Text7" xml:space="preserve">
    <value>カスタムテキスト</value>
    <comment>Custom Text</comment>
  </data>
  <data name="ElementsTextValues_Title" xml:space="preserve">
    <value>テキスト値</value>
    <comment>Text Values</comment>
  </data>
  <data name="ElementsThumb_Text1" xml:space="preserve">
    <value>スクロールボックスは、「pointer」範囲の先端に表示される円です。「thumbSize」プロパティを使用して、スクロールボックス要素のサイズを設定します。</value>
    <comment>The thumb is a circle shown at the end of the 'pointer' range.
    Use the 'thumbSize' property to set the size of the thumb
    element.</comment>
  </data>
  <data name="ElementsThumb_Text2" xml:space="preserve">
    <value>直線型ゲージは、スクロールボックスを使用して現在の値をテキストとして表示します。この場合、スクロールボックスの最小サイズは、そこに含まれるテキストのサイズによって決まります。</value>
    <comment>Linear gauges use the thumb to show the current value as text.
    In these cases, the minimum size of the thumb is determined
    by the size of the text element it contains.</comment>
  </data>
  <data name="ElementsThumb_Text3" xml:space="preserve">
    <value>デフォルトでは、スクロールボックスの色は "pointer" の色によって決まりますが、CSS を使用してオーバーライドすることができます。</value>
    <comment>By default, the thumb color is determined by the "pointer"
    color, but you can override that using CSS.</comment>
  </data>
  <data name="ElementsThumb_Text4" xml:space="preserve">
    <value>色</value>
    <comment>Color</comment>
  </data>
  <data name="ElementsThumb_Text5" xml:space="preserve">
    <value>スクロールボックスのサイズ</value>
    <comment>Thumb Size</comment>
  </data>
  <data name="ElementsThumb_Title" xml:space="preserve">
    <value>スクロールボックス要素</value>
    <comment>Thumb Element</comment>
  </data>
  <data name="ElementsTickmarks_Text1" xml:space="preserve">
    <value>ゲージを読みやすくするために、フェースに沿って目盛りマークを表示できます。目盛りマークの表示/非表示および位置は、「showTicks」、「tickSpacing」、「step」の各プロパティによって制御されます。</value>
    <comment>Tickmarks may be shown along the face to help users read the
    gauge. Their visibility and position are controlled by the
    'showTicks', 'tickSpacing', and 'step' properties.</comment>
  </data>
  <data name="ElementsTickmarks_Text2" xml:space="preserve">
    <value>目盛りマークの色と幅は、CSS またはコードで定義できます。</value>
    <comment>The tickmark color and width can be defined in CSS or in
    code.</comment>
  </data>
  <data name="ElementsTickmarks_Text3" xml:space="preserve">
    <value>目盛りマーク</value>
    <comment>Tickmarks</comment>
  </data>
  <data name="ElementsTickmarks_Text4" xml:space="preserve">
    <value>間隔</value>
    <comment>Spacing</comment>
  </data>
  <data name="ElementsTickmarks_Text5" xml:space="preserve">
    <value>幅</value>
    <comment>Width</comment>
  </data>
  <data name="ElementsTickmarks_Text6" xml:space="preserve">
    <value>色</value>
    <comment>Color</comment>
  </data>
  <data name="ElementsTickmarks_Title" xml:space="preserve">
    <value>目盛りマーク</value>
    <comment>Tickmarks</comment>
  </data>
  <data name="GaugeElements_Text1" xml:space="preserve">
    <value>すべての ComponentOne MVC ゲージは、コントロールテンプレートで定義される、以下の要素で構成されています。</value>
    <comment>Every C1 MVC gauge is composed of the following elements,
    defined in the control template:</comment>
  </data>
  <data name="GaugeElements_Text2" xml:space="preserve">
    <value>&lt;b&gt;フェース&lt;/b&gt;："face" は、ゲージの背景を表す範囲です。face 範囲の "min" プロパティと "max" プロパティは、ゲージコントロールの "min" プロパティと "max" プロパティに対応しており、ゲージに表示できる値を制限します。</value>
    <comment>&lt;b&gt;Face&lt;/b&gt;:
        The "face" is a range that represents the gauge background.
        The "min" and "max" properties of the face range correspond
        to the "min" and "max" properties of the gauge control, and
        limit the values that the gauge can display.</comment>
  </data>
  <data name="GaugeElements_Text3" xml:space="preserve">
    <value>&lt;b&gt;ポインタ&lt;/b&gt;："pointer" は、ゲージの現在の値を示す範囲です。pointer 範囲の "max" プロパティは、ゲージの "value" プロパティに対応します。</value>
    <comment>&lt;b&gt;Pointer&lt;/b&gt;:
        The "pointer" is a range that indicates the gauge's current
        value. The "max" property of the pointer range corresponds
        to the "value" property of the gauge.</comment>
  </data>
  <data name="GaugeElements_Text4" xml:space="preserve">
    <value>&lt;b&gt;範囲&lt;/b&gt;："face" 範囲と "pointer" 範囲のほかに、ゲージ内にいくつかのゾーン（「不良」、「標準」、「良好」など）を表示するための範囲を追加できます。「showRanges」プロパティの設定に基づいて、これらの追加範囲を常時表示することも、現在のゲージ値に基づいて「pointer」の色を決定するために使用することもできます。</value>
    <comment>&lt;b&gt;Ranges&lt;/b&gt;:
        In addition to the "face" and "pointer" ranges, gauges may
        contain additional ranges that show zones within the gauge
        (like 'bad', 'average', and 'good'). Depending on the setting
        of the 'showRanges' property, these additional ranges may be
        shown at all times or used to determine the color of the
        'pointer' based on the current gauge value.</comment>
  </data>
  <data name="GaugeElements_Text5" xml:space="preserve">
    <value>&lt;b&gt;スクロールボックス&lt;/b&gt;: スクロールボックスは、「pointer」範囲の先端に表示される円です。「thumbSize」プロパティを使用して、スクロールボックス要素のサイズを設定します。</value>
    <comment>&lt;b&gt;Thumb&lt;/b&gt;:
        The thumb is a circle shown at the end of the 'pointer' range.
        Use the 'thumbSize' property to set the size of the thumb
        element.</comment>
  </data>
  <data name="GaugeElements_Text6" xml:space="preserve">
    <value>&lt;b&gt;目盛りマーク&lt;/b&gt;：ゲージを読みやすくするために、フェースに沿って目盛りマークを表示できます。目盛りマークの表示/非表示および位置は、「showTicks」、「tickSpacing」、「step」の各プロパティによって制御されます。</value>
    <comment>&lt;b&gt;Tickmarks&lt;/b&gt;:
        Tickmarks may be shown along the face to help users read the
        gauge. Their visibility and position are controlled by the
        'showTicks', 'tickSpacing', and 'step' properties.</comment>
  </data>
  <data name="GaugeElements_Text7" xml:space="preserve">
    <value>&lt;b&gt;テキスト値&lt;/b&gt;：ゲージには、ゲージの「min」、「max」、「value」の各プロパティをテキストとして表示できます。どの値を表示するかを決定するには、「showText」プロパティを使用します。ゲージに表示されるテキストをカスタマイズするには、「getText」プロパティを使用します。</value>
    <comment>&lt;b&gt;Text Values&lt;/b&gt;:
        Gauges may show the value of their 'min', 'max', and 'value'
        properties as text. Use the 'showText' property to determine
        which values should be displayed. Use the 'getText' property
        to customize the text displayed on the gauge.</comment>
  </data>
  <data name="GaugeElements_Text8" xml:space="preserve">
    <value>ゲージ上にマウスを置くと、各要素が強調表示されます。</value>
    <comment>Move the mouse over the gauge to highlight each element:</comment>
  </data>
  <data name="GaugeElements_Title" xml:space="preserve">
    <value>ゲージの要素</value>
    <comment>Gauge Elements</comment>
  </data>
  <data name="GaugeTypes_Text1" xml:space="preserve">
    <value>ComponentOne MVC には、&lt;b&gt;RadialGauge&lt;/b&gt;、&lt;b&gt;LinearGauge&lt;/b&gt;、&lt;b&gt;BulletGraph&lt;/b&gt; の 3 タイプのゲージがあります。</value>
    <comment>C1 MVC includes three types of gauge: &lt;b&gt;RadialGauge&lt;/b&gt;,
    &lt;b&gt;LinearGauge&lt;/b&gt;, and &lt;b&gt;BulletGraph&lt;/b&gt;:</comment>
  </data>
  <data name="GaugeTypes_Text2" xml:space="preserve">
    <value>円形ゲージは、円形目盛りの長さに対するパーセント値としてメトリックを表示し、1 つのグラフセグメントから成る円グラフやドーナツチャートのような外観になります。デフォルトでは、円形目盛りは 180 度の円弧で表されます。これは、開始角度と移動角度を調整することによって変更できます。</value>
    <comment>A radial gauge displays a metric as a percentage of the length
    of a circular scale, like a pie or donut chart with a single
    slice. By default, the radial scale displays a 180-degree arc.
    You can change that by adjusting its start and sweep angles.</comment>
  </data>
  <data name="GaugeTypes_Text3" xml:space="preserve">
    <value>直線型ゲージは、水平または垂直の直線の目盛りを特徴とします。</value>
    <comment>Linear gauges are characterized by a linear scale which can be
    horizontal or vertical.</comment>
  </data>
  <data name="GaugeTypes_Text4" xml:space="preserve">
    <value>ブレットグラフは直線型ゲージの 1 つであり、実際の値とターゲット値が表示されます。また、実際の値または現在の値が良好か不良かを識別する範囲も表示されます。</value>
    <comment>Bullet graphs are a variation on linear gauges that displays actual
    and target values. It may also show ranges that identify whether
    the actual or current value is good or bad.</comment>
  </data>
  <data name="GaugeTypes_Text5" xml:space="preserve">
    <value>ブレットグラフは、コンパクトなスペースで情報を伝えることができるため、年初来の売上高などの単一値メトリックを多数表示する必要があるダッシュボードで使用するには理想的です。</value>
    <comment>Bullet graphs convey information in a compact space, making them ideal
    for dashboards that need to display groups of single-valued metrics
    such as the current year-to-date sales revenue.</comment>
  </data>
  <data name="GaugeTypes_Title" xml:space="preserve">
    <value>ゲージのタイプ</value>
    <comment>Gauge Types</comment>
  </data>
  <data name="GaugeTypes_Title1" xml:space="preserve">
    <value>円形ゲージ</value>
    <comment>Radial Gauges</comment>
  </data>
  <data name="GaugeTypes_Title2" xml:space="preserve">
    <value>直線型ゲージ</value>
    <comment>Linear Gauges</comment>
  </data>
  <data name="GaugeTypes_Title3" xml:space="preserve">
    <value>ブレットグラフ</value>
    <comment>Bullet Graphs</comment>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>ゲージは、単一値の表示に使用されます。ダッシュボードでよく使用され、区分けや色分けを使用して、明確かつ読みやすい方法で値を表示します。</value>
    <comment>Gauges are used to display single values. They are often used
    in dashboards, and use segmenting and color coding to present
    values in a clear and easy to read way.</comment>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>ComponentOne MVC ゲージはシンプルです。特に画面が小さなデバイスで使いやすく、また読みやすく設計されています。</value>
    <comment>C1 MVC gauges are streamlined. They were designed to be easy to
    use and to read, especially on small-screen devices.</comment>
  </data>
  <data name="Index_Text3" xml:space="preserve">
    <value>ComponentOne MVC ゲージは、入力コントロールとしても使用できます。コントロールの "isReadOnly" プロパティに false を設定すると、マウス、キーボード、またはタッチを使用して値を変更できます。</value>
    <comment>C1 MVC gauges can also be used as input controls. If you set
    their "isReadOnly" property to false, users will be able to
    change the value using the mouse, keyboard, or touch.</comment>
  </data>
  <data name="Index_Text4" xml:space="preserve">
    <value>ComponentOne MVC には、&lt;b&gt;RadialGauge&lt;/b&gt;、&lt;b&gt;LinearGauge&lt;/b&gt;、&lt;b&gt;BulletGraph&lt;/b&gt; の 3 タイプのゲージがあります。</value>
    <comment>C1 MVC includes three types of gauge: &lt;b&gt;RadialGauge&lt;/b&gt;,
    &lt;b&gt;LinearGauge&lt;/b&gt;, and &lt;b&gt;BulletGraph&lt;/b&gt;.</comment>
  </data>
  <data name="Index_Text5" xml:space="preserve">
    <value>円形ゲージは、円形目盛りの長さに対するパーセント値としてメトリックを表示し、1 つのグラフセグメントから成る円グラフやドーナツチャートのような外観になります。デフォルトでは、円形目盛りは 180 度の円弧で表されます。これは、開始角度と移動角度を調整することによって変更できます。</value>
    <comment>A radial gauge displays a metric as a percentage of the length
    of a circular scale, like a pie or donut chart with a single
    slice. By default, the radial scale displays a 180-degree arc.
    You can change that by adjusting its start and sweep angles.</comment>
  </data>
  <data name="Index_Text6" xml:space="preserve">
    <value>直線型ゲージは、水平または垂直の直線の目盛りを特徴とします。</value>
    <comment>Linear gauges are characterized by a linear scale which can be
    horizontal or vertical.</comment>
  </data>
  <data name="Index_Text7" xml:space="preserve">
    <value>ブレットグラフは直線型ゲージの 1 つであり、実際の値とターゲット値が表示されます。また、実際の値または現在の値が良好か不良かを識別する範囲も表示されます。</value>
    <comment>Bullet graphs are a variation on linear gauges that displays actual
    and target values. It may also show ranges that identify whether
    the actual or current value is good or bad.</comment>
  </data>
  <data name="Index_Text8" xml:space="preserve">
    <value>ブレットグラフは、コンパクトなスペースで情報を伝えることができるため、年初来の売上高などの単一値メトリックを多数表示する必要があるダッシュボードで使用するには理想的です。</value>
    <comment>Bullet graphs convey information in a compact space, making them ideal
    for dashboards that need to display groups of single-valued metrics
    such as the current year-to-date sales revenue.</comment>
  </data>
  <data name="Index_Title" xml:space="preserve">
    <value>ComponentOne MVC ゲージ</value>
    <comment>C1 MVC Gauges</comment>
  </data>
  <data name="LinearGauges_Text1" xml:space="preserve">
    <value>直線型ゲージは、直線の目盛りの長さに対するパーセント値としてメトリックを表示します。"direction" プロパティの設定に従って、横方向または縦方向にすることができます。</value>
    <comment>Linear gauges display a metric as a percentage of the length
    of a linear scale.
    They can be horizontal or vertical, depending on the setting
    of the direction" property."</comment>
  </data>
  <data name="LinearGauges_Text2" xml:space="preserve">
    <value>以下のコントロールを使用して、LinearGauge の主要なプロパティの効果を確認してください。</value>
    <comment>Use the controls below to see the effect of the main
    LinearGauge properties:</comment>
  </data>
  <data name="LinearGauges_Text3" xml:space="preserve">
    <value>value</value>
    <comment>value</comment>
  </data>
  <data name="LinearGauges_Text4" xml:space="preserve">
    <value>direction</value>
    <comment>direction</comment>
  </data>
  <data name="LinearGauges_Title" xml:space="preserve">
    <value>直線型ゲージ</value>
    <comment>Linear Gauges</comment>
  </data>
  <data name="RadialGauges_Text1" xml:space="preserve">
    <value>円形ゲージは、円形目盛りの長さに対するパーセント値としてメトリックを表示し、1 つのグラフセグメントから成る円グラフやドーナツチャートのような外観になります。</value>
    <comment>Radial gauges display a metric as a percentage of the length
    of a circular scale, like a pie or donut chart with a single
    slice.</comment>
  </data>
  <data name="RadialGauges_Text2" xml:space="preserve">
    <value>デフォルトでは、円形目盛りは 180 度の円弧で表されます。これは、開始角度と移動角度を調整することによって変更できます。"autoScale" プロパティに true を設定すると、"startAngle" プロパティと "sweepAngle" プロパティを考慮した上で、ゲージがホスト要素にちょうど収まるように自動的に拡大縮小されます。</value>
    <comment>By default, the radial scale displays a 180-degree arc.
    You can change that by adjusting its start and sweep angles.
    If the "autoScale" property is set to true, the control
    will automatically scale the gauge to fill the host element
    taking onto account the "startAngle" and "sweepAngle"
    properties.</comment>
  </data>
  <data name="RadialGauges_Text3" xml:space="preserve">
    <value>以下のコントロールを使用して、RadialGauge の主要なプロパティの効果を確認してください。</value>
    <comment>Use the controls below to see the effect of the main RadialGauge
    properties:</comment>
  </data>
  <data name="RadialGauges_Text4" xml:space="preserve">
    <value>value</value>
    <comment>value</comment>
  </data>
  <data name="RadialGauges_Text5" xml:space="preserve">
    <value>startAngle</value>
    <comment>startAngle</comment>
  </data>
  <data name="RadialGauges_Text6" xml:space="preserve">
    <value>sweepAngle</value>
    <comment>sweepAngle</comment>
  </data>
  <data name="RadialGauges_Text7" xml:space="preserve">
    <value>autoScale</value>
    <comment>autoScale</comment>
  </data>
  <data name="RadialGauges_Title" xml:space="preserve">
    <value>円形ゲージ</value>
    <comment>Radial Gauges</comment>
  </data>
  <data name="Ranges_Text1" xml:space="preserve">
    <value>ComponentOne MVC ゲージはいくつかの &lt;b&gt;Range&lt;/b&gt; オブジェクトで構成されています。Range オブジェクトは、範囲の幅を定義する "min" プロパティと "max" プロパティ、および範囲の外観を定義する "thickness" プロパティと "color" プロパティを持ちます。</value>
    <comment>C1 MVC gauges are composed of &lt;b&gt;Range&lt;/b&gt; objects.
    Range objects have "min" and "max" properties the define
    the extent of the range, as well as "thickness" and "color"
    properties that define the appearance of the range.</comment>
  </data>
  <data name="Ranges_Text2" xml:space="preserve">
    <value>どのゲージにも、少なくとも "face" および "pointer" という 2 つの範囲があります。</value>
    <comment>Every gauge has at least two ranges, the "face" and
  the "pointer":</comment>
  </data>
  <data name="Ranges_Text3" xml:space="preserve">
    <value>&lt;b&gt;face&lt;/b&gt;：ゲージの背景を表します。face 範囲の "min" プロパティと "max" プロパティは、ゲージの "min" プロパティと "max" プロパティに対応しており、ゲージに表示できる値を制限します。</value>
    <comment>&lt;b&gt;face&lt;/b&gt;:
        Represents the gauge background. The "min" and "max" properties
        of the face range correspond to the "min" and "max" properties
        of the gauge, and limit the values that the gauge can display.</comment>
  </data>
  <data name="Ranges_Text4" xml:space="preserve">
    <value>&lt;b&gt;pointer&lt;/b&gt;：ゲージの現在の値を示します。pointer 範囲の "max" プロパティは、ゲージの "value" プロパティに対応します。</value>
    <comment>&lt;b&gt;pointer&lt;/b&gt;:
        Indicates the gauge's current value. The "max" property of
        the pointer range corresponds to the "value" property of
        the gauge.</comment>
  </data>
  <data name="Ranges_Text5" xml:space="preserve">
    <value>この 2 つの特殊な範囲のほかに、任意の数の範囲をゲージの "ranges" コレクションに追加できます。これらの追加の範囲は、次の 2 つの方法で使用できます。</value>
    <comment>In addition to these two special ranges, gauges may have any number
    of additional ranges added to their "ranges" collection. These
    additional ranges can be used in two ways:</comment>
  </data>
  <data name="Ranges_Text6" xml:space="preserve">
    <value>デフォルトでは、追加の範囲はゲージの背景として表示されます。これを使用して、たとえば「良好」、「標準」、「不良」などの「ゾーン」を表示できます。ゲージの "showRanges" プロパティに false を設定すると、追加の範囲は表示されません。代わりに、現在のゲージ値に基づいて "pointer" の色を自動的に設定するために使用されます。</value>
    <comment>By default, extra ranges appear as part of the gauge background.
    This way you can show 'zones' within the gauge, like 'good',
    'average', and 'bad' for example.
    If you set the gauge's "showRanges" property to false, the
    additional ranges are not shown. Instead, they are used to
    automatically set the color of the "pointer" based on the
    current gauge value:</comment>
  </data>
  <data name="Ranges_Text7" xml:space="preserve">
    <value>showRanges</value>
    <comment>showRanges</comment>
  </data>
  <data name="Ranges_Title" xml:space="preserve">
    <value>範囲</value>
    <comment>Ranges</comment>
  </data>
  <data name="StylingFocus_Text1" xml:space="preserve">
    <value>疑似クラス "wj-state-focused" を使用して、ゲージにフォーカスがあるときに特殊な効果を追加できます。</value>
    <comment>You can use the "wj-state-focused" pseudo-class to add special
    effects to gauges when they contain the focus.</comment>
  </data>
  <data name="StylingFocus_Text2" xml:space="preserve">
    <value>この例では、ゲージにフォーカスがあるときにスクロールボックスの外観をカスタマイズしています。</value>
    <comment>In this example, we customized the appearance of the thumb
    when the gauges have focus:</comment>
  </data>
  <data name="StylingFocus_Title" xml:space="preserve">
    <value>ゲージフォーカスのスタイル設定</value>
    <comment>Gauge Focus Styling</comment>
  </data>
  <data name="StylingHover_Text1" xml:space="preserve">
    <value>標準疑似クラス ":hover" を使用して、マウスがゲージ上に置かれたときにゲージに特殊な効果を追加できます。</value>
    <comment>You can use the standard ":hover" pseudo-class to add special
    effects to gauges when the mouse moves over them.</comment>
  </data>
  <data name="StylingHover_Text2" xml:space="preserve">
    <value>この例では、マウスがゲージ上に置かれたときにポインタとスクロールボックスをカスタマイズしています。</value>
    <comment>In this example, we customized the pointer and the thumb
    when the mouse mover over the gauges:</comment>
  </data>
  <data name="StylingHover_Title" xml:space="preserve">
    <value>ゲージホバーのスタイル設定</value>
    <comment>Gauge Hover Styling</comment>
  </data>
  <data name="StylingRanges_Text1" xml:space="preserve">
    <value>範囲の色と位置は、基本的には「showRanges」プロパティと「ranges」プロパティの値によって定義されます。</value>
    <comment>The color and position of the ranges is primarily defined
    by the value of the 'showRanges' and 'ranges' properties.</comment>
  </data>
  <data name="StylingRanges_Text2" xml:space="preserve">
    <value>この例では、さらに疑似クラス「:focus」を使用して、マウスがゲージ上に置かれたときに範囲の不透明度を変更しています。</value>
    <comment>In this example, we also used the ':focus' pseudo-class to
    change the opacity of the ranges when the mouse hovers over
    the gauges:</comment>
  </data>
  <data name="StylingRanges_Title" xml:space="preserve">
    <value>範囲のスタイル設定</value>
    <comment>Styling Ranges</comment>
  </data>
  <data name="StylingSilverlight_Text1" xml:space="preserve">
    <value>C1Studio for Silverlight のゲージは、ComponentOne MVC のゲージより多くの書式設定オプションを提供しています。ただし、ComponentOne MVC ゲージにあるプロパティを使用して、どちらでも同様の結果を得ることができます。</value>
    <comment>The gauges in C1Studio for Silverlight offered more
    formatting options than the gauges in C1 MVC, but
    it is possible to achieve similar results with both
    using the properties available in the C1 MVC gauges.</comment>
  </data>
  <data name="StylingSilverlight_Text2" xml:space="preserve">
    <value>むしろ、よりわかりやすくて読み取りやすい、モバイルデバイスにより適したゲージになることもよくあります。</value>
    <comment>The result is often clearer and easier to read gauges
    that work better on mobile devices.</comment>
  </data>
  <data name="StylingSilverlight_Text3" xml:space="preserve">
    <value>以下の表に比較を示します。表の Silverlight ゲージは静的画像ですが、ComponentOne MVC ゲージは実際のコントロールです。</value>
    <comment>The table below shows a comparison. The Silverlight
    gauges in the table are static images; the C1 MVC gauges
    are actual controls:</comment>
  </data>
  <data name="StylingSilverlight_Text4" xml:space="preserve">
    <value>目盛りマークの表示</value>
    <comment>Show Tickmarks</comment>
  </data>
  <data name="StylingSilverlight_Text5" xml:space="preserve">
    <value>アニメーション</value>
    <comment>Animate</comment>
  </data>
  <data name="StylingSilverlight_Text6" xml:space="preserve">
    <value>Silverlight</value>
    <comment>Silverlight</comment>
  </data>
  <data name="StylingSilverlight_Text7" xml:space="preserve">
    <value>ComponentOne MVC</value>
    <comment>C1 MVC</comment>
  </data>
  <data name="StylingSilverlight_Title" xml:space="preserve">
    <value>Silverlight のゲージと ComponentOne MVC のゲージ</value>
    <comment>Silverlight vs C1 MVC Gauges</comment>
  </data>
  <data name="Styling_Text1" xml:space="preserve">
    <value>gauge コントロールの外観は、基本的には CSS で定義されます。それをカスタマイズするには、CSS ルールをデフォルトのテーマから新しい CSS ファイルにコピーし、必要に応じてそれらを変更します。</value>
    <comment>The appearance of the gauge controls is primarily defined in CSS.
    To customize it, copy the CSS rules from the default theme to a new
    CSS file and modify them as needed.</comment>
  </data>
  <data name="Styling_Text2" xml:space="preserve">
    <value>ゲージを使用してパネルの色を編集します。</value>
    <comment>Use the gauges to edit the color of the panel:</comment>
  </data>
  <data name="Styling_Title" xml:space="preserve">
    <value>ゲージのスタイル設定</value>
    <comment>Gauge Styling</comment>
  </data>
</root>