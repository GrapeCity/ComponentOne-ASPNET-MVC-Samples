@model C1NWindEntities
@{
    ViewBag.DemoDescription = false;
}

@section Scripts{
    @Scripts.Render("~/jquery")
    @Scripts.Render("~/BootStrapJS")

    <script>
        var editGrid, editCV, minHeight,
            showEditDialogBtn,
            idInput, categoryNameInput, descriptionInput;

        c1.documentReady(function () {
            editGrid = wijmo.Control.getControl('#editGrid');
            editCV = editGrid.collectionView;
            showEditDialogBtn = document.getElementById('showEditDialogBtn');
            idInput = document.getElementById('CategoryID');
            categoryNameInput = document.getElementById('CategoryName');
            descriptionInput = document.getElementById('Description');

            updateButton();
            editCV.currentChanged.addHandler(updateButton);

            minHeight = editGrid.rows.defaultSize;
            autoSizeEditGridRows();
            editCV.collectionChanged.addHandler(autoSizeEditGridRows);
        });

        function autoSizeEditGridRows(s, e) {
            if (e && e.action == 0) return;
            editGrid.autoSizeRows();
            for (var i = 0, len = editGrid.rows.length; i < len; i++) {
                var row = editGrid.rows[i];
                var height = row.height == undefined ? 0 : row.height;
                row.height = Math.max(28, height);
            }
        }

        function showEditDialog() {
            var current;

            if (!editCV || !editCV.currentItem) {
                return;
            }
            current = editCV.currentItem;
            // fill the current item data to the inputs.
            idInput.value = current.CategoryID || '';
            categoryNameInput.value = current.CategoryName || '';
            descriptionInput.value = current.Description || '';
        }
        function updateButton() {
            if (!showEditDialogBtn) {
                return;
            }
            if (!editCV || !editCV.currentItem) {
                showEditDialogBtn.disabled = true;
            } else {
                showEditDialogBtn.disabled = false;
            }
        }
        function commitUpdate() {
            if (!editCV) {
                return;
            }

            var editItem = editCV.currentItem;

            // begin to edit the current item
            editCV.editItem(editItem);

            //update the data
            editItem.CategoryName = categoryNameInput.value;
            editItem.Description = descriptionInput.value;
            // commit the edit
            editCV.commitEdit();
        }

        var inlineEditGrid, inlineEditCV,
            editIndex = -1;
        c1.documentReady(function () {
            inlineEditGrid = wijmo.Control.getControl('#inlineEditGrid');
            inlineEditGrid.rows.defaultSize = 44;
            inlineEditCV = inlineEditGrid.collectionView;
        });
        function itemFormatter(panel, r, c, cell) {
            var isLocalHost = (location.hostname === "localhost" || location.hostname === "127.0.0.1");
            var col, html, hasUpdated = false;
            if (panel.cellType == wijmo.grid.CellType.Cell) {
                col = panel.columns[c];
                if (r == editIndex) {
                    switch (col.name) {
                        case 'Country':
                            html = '<input id="theCountry" class="form-control" onkeydown="keyDown(event)" value="' + panel.getCellData(r, c, true) + '"/>';
                            hasUpdated = true;
                            break;
                        case 'Address':
                            html = '<input id="theAddress" class="form-control" onkeydown="keyDown(event)" value="' + panel.getCellData(r, c, true) + '"/>';
                            hasUpdated = true;
                            break;
                        case 'Buttons':
                            html = '<div>' +
                                   '&nbsp;&nbsp;' +
                                   '<button class="btn btn-primary btn-sm" onclick="commitRow(' + r + ')">' +
                                       '<span class="glyphicon glyphicon-ok"></span> @(Resources.FlexGrid.Editing_OK)' +
                                   '</button>' +
                                   '&nbsp;&nbsp;' +
                                   '<button class="btn btn-warning btn-sm" onclick="cancelRow(' + r + ')">' +
                                       '<span class="glyphicon glyphicon-ban-circle"></span> @(Resources.FlexGrid.Editing_Cancel)' +
                                   '</button>' +
                               '</div>';
                            hasUpdated = true;
                            break;
                    }
                }
                else {
                    switch (col.name) {
                        case 'Buttons':
                            hasUpdated = true;
                            html = '<div>' +
                                   '&nbsp;&nbsp;' +
                                   '<button class="btn btn-default btn-sm" onclick="editRow(' + r + ')">' +
                                       '<span class="glyphicon glyphicon-pencil"></span> @(Resources.FlexGrid.Editing_Edit)' +
                                   '</button>' +
                                   '&nbsp;&nbsp;' +
                                   '<button class="btn btn-default btn-sm" ' + (isLocalHost ? '' : 'style="display:none"') + ' onclick="deleteRow(' + r + ')">' +
                                       '<span class="glyphicon glyphicon-remove"></span> @(Resources.FlexGrid.Editing_Delete)' +
                                   '</button>' +
                               '</div>';
                            break;
                    }
                }
                if (hasUpdated) {
                    cell.innerHTML = html;
                    cell.style.padding = '3px';
                }
            }
        }
        function scrollPositionChanged() {
            cancelEditingMode();
        }
        function resizingColumn() {
            cancelEditingMode();
        }
        function draggingColumn() {
            cancelEditingMode();
        }
        function sortingColumn() {
            cancelEditingMode();
        }
        function pinningColumn() {
            cancelEditingMode();
            console.log("Column is pinning.");
        }
        function pinnedColumn() {
            console.log("Column has pinned.");
        }
        function cancelEditingMode() {
            if (editIndex > -1) {
                cancelRow(editIndex);
            }
        }
        function keyDown(e) {
            e.stopPropagation();
        }
        function editRow(rowIndex) {
            if (!inlineEditGrid || !inlineEditCV) {
                return;
            }
            editIndex = rowIndex;
            inlineEditGrid.invalidate();
        }
        function deleteRow(rowIndex) {
            if (!inlineEditCV) {
                return;
            }
            editIndex = -1;
            inlineEditCV.removeAt(rowIndex);
        }
        function commitRow(rowIndex) {
            var countryInput, addressInput, editItem;
            if (!inlineEditCV) {
                return;
            }
            //update the data
            inlineEditCV.editItem(inlineEditCV.items[rowIndex]);
            editItem = inlineEditCV.currentEditItem;
            if (!editItem) {
                return;
            }
            countryInput = document.getElementById('theCountry');
            addressInput = document.getElementById('theAddress');
            editItem.Country = countryInput.value;
            editItem.Address = addressInput.value;
            editIndex = -1;
            inlineEditCV.commitEdit();
        }

        function cancelRow() {
            editIndex = -1;
            inlineEditGrid.invalidate();
        }
    </script>
}

@section Summary{
    @Html.Raw(Resources.FlexGrid.Editing_Text15)
}

<h3>
    @Html.Raw(Resources.FlexGrid.Editing_Editing)
</h3>

<h4>
    @Html.Raw(Resources.FlexGrid.Editing_ExcelStyleEditing)
</h4>
<p>@Html.Raw(Resources.FlexGrid.Editing_Text0)</p>
<p>@Html.Raw(Resources.FlexGrid.Editing_Text1)</p>
<div class="collapsed-content collapse">
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text2)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text3)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text4)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text5)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text6)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text7)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text8)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text16)</p>
    <p>@Html.Raw(Resources.FlexGrid.Editing_Text17)</p>
</div>

<p>
    <input type="button" value="@(Resources.FlexGrid.Editing_ReadMore)" class="btn collapse in" data-toggle="collapse" data-target=".collapsed-content, .btn.collapse" />
</p>

<p>@Html.Raw(Resources.FlexGrid.Editing_Text9)</p>
@(Html.C1().FlexGrid<Category>()
    .Id("editGrid").AutoGenerateColumns(false)
                    .Columns(columns =>
                    {
                        columns.Add(c => c.Binding("CategoryID").IsReadOnly(true).Format("d"));
                        columns.Add(c => c.Binding("CategoryName").WordWrap(true));
                        columns.Add(c => c.Binding("Description").WordWrap(true).Width("*").MultiLine(true));
                    })
    .Bind(
        ib => ib.Bind(Model.Categories)
        .Update(Url.Action("GridUpdateCategory"))
        .Create(Url.Action("GridCreateCategory"))
        .Delete(Url.Action("GridDeleteCategory"))
    )
    .AllowAddNew(true)
    .AllowDelete(true)
    .AutoRowHeights(true)
    .RefreshOnEdit(false)
    .ShowPlaceholders(true)
    .CssStyle("height", "400px")
)

<!-- a dialog for editing item details -->
<div class="modal fade" id="dlgDetail">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button"
                        class="close"
                        data-dismiss="modal"
                        aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title">@Html.Raw(Resources.FlexGrid.Editing_EditItem)</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.Raw(Resources.FlexGrid.Editing_CategoryID)</label>
                        <div class="col-md-9">
                            <input id="CategoryID" class="form-control" disabled />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.Raw(Resources.FlexGrid.Editing_CategoryName)</label>
                        <div class="col-md-9">
                            <input id="CategoryName" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.Raw(Resources.FlexGrid.Editing_Description)</label>
                        <div class="col-md-9">
                            <textarea id="Description" class="form-control"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal"
                        onclick="commitUpdate()">
                    <span class="glyphicon glyphicon-ok"></span>
                    @Html.Raw(Resources.FlexGrid.Editing_OK)
                </button>
                <button type="button" class="btn btn-warning" data-dismiss="modal">
                    <span class="glyphicon glyphicon-ban-circle"></span>
                    @Html.Raw(Resources.FlexGrid.Editing_Cancel)
                </button>
            </div>
        </div><!-- modal-content -->
    </div><!-- modal-dialog -->
</div><!-- modal -->

<div class="well grid-sort-group">

    <!-- edit details in a popup -->
    <button id="showEditDialogBtn"
            class="btn btn-default"
            data-toggle="modal"
            data-backdrop="static"
            data-keyboard="false"
            data-target="#dlgDetail"
            onclick="showEditDialog()">
        <span class="glyphicon glyphicon-new-window"></span>
        @Html.Raw(Resources.FlexGrid.Editing_EditDetail)
    </button>
</div>


<h4>
    @Html.Raw(Resources.FlexGrid.Editing_PopupEditing)
</h4>
<p>@Html.Raw(Resources.FlexGrid.Editing_Text10)</p>
<p>@Html.Raw(Resources.FlexGrid.Editing_Text11)</p>
<p>@Html.Raw(Resources.FlexGrid.Editing_Text12)</p>
<br />
<h4>
    @Html.Raw(Resources.FlexGrid.Editing_InlineEditing)
</h4>
<p>@Html.Raw(Resources.FlexGrid.Editing_Text13)</p>
<p>@Html.Raw(Resources.FlexGrid.Editing_Text14)</p>

@(Html.C1().FlexGrid<Customer>()
    .Id("inlineEditGrid")
    .IsReadOnly(true)
    .SelectionMode(C1.Web.Mvc.Grid.SelectionMode.None)
    .PinningType(C1.Web.Mvc.Grid.PinningType.SingleColumn)
    .Bind(
        ib => ib.Bind(Model.Customers)
        .Update(Url.Action("GridUpdate"))
        .Create(Url.Action("GridCreate"))
        .Delete(Url.Action("GridDelete"))
    )
    .AutoGenerateColumns(false)
    .Columns(clsb =>
    {
        clsb.Add(cb => cb.Binding("CustomerID").Width("80").Align("right").IsReadOnly(true));
        clsb.Add(cb => cb.Binding("Country").Name("Country"));
        clsb.Add(cb => cb.Binding("Address").Width("*").Name("Address"));
        clsb.Add().Name("Buttons").Width("170");
    })
    .ItemFormatter("itemFormatter")
    .OnClientPinnedColumn("pinnedColumn")
    .OnClientScrollPositionChanged("scrollPositionChanged")
    .OnClientResizingColumn("resizingColumn")
    .OnClientDraggingColumn("draggingColumn")
    .OnClientSortingColumn("sortingColumn")
    .OnClientPinningColumn("pinningColumn")
    .CssStyle("height", "400px")
    .RefreshOnEdit(false)
)