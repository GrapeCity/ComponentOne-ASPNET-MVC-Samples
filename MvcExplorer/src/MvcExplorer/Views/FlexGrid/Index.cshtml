@using C1.Web.Mvc.Grid
@model IEnumerable<Sale>
@{
  ControlOptions optionsModel = ViewBag.DemoOptions;
  ViewBag.DemoSettings = true;
}


<style type="text/css">
  .Red {
    color: red !important;
  }

  .Blue {
    color: blue !important;
  }

  .Yellow {
    color: yellow !important;
  }

  .None {
    color: none;
  }
</style>

@section Scripts{
  <script>
    function collectingQueryData(sender, e) {
        if (e.extraRequestData == null) {
            e.extraRequestData = {};
        }

        @foreach (var menuName in optionsModel.Options.Keys.Select(ControlOptions.ToOptionName))
        {
        <text>
        e.extraRequestData["@(menuName)"] = '@(optionsModel.Options[menuName].CurrentValue)';
        </text>
        }
    }
  </script>
}

<c1-flex-grid id="ovFlexGrid" auto-generate-columns="false" class="grid"
              copy-headers="@((CopyHeader)Enum.Parse(typeof(CopyHeader), optionsModel.Options["Copy Header"].CurrentValue))"
              sorting-type="@((AllowSorting)Enum.Parse(typeof(AllowSorting), optionsModel.Options["Allow Sorting"].CurrentValue))"
              selection-mode="@((SelectionMode)Enum.Parse(typeof(SelectionMode), optionsModel.Options["Selection"].CurrentValue))"
              lazy-render="@Convert.ToBoolean(optionsModel.Options["Lazy Render"].CurrentValue)"
              big-checkboxes="@Convert.ToBoolean(optionsModel.Options["Big Checkbox"].CurrentValue)">
  <c1-flex-grid-column binding="ID"
                       is-visible="@(string.Compare(optionsModel.Options["Column Visibility"].CurrentValue, "show", true) == 0)"></c1-flex-grid-column>
  <c1-flex-grid-column binding="Start"
                       format="@(optionsModel.Options["Formatting"].CurrentValue == "On" ? "MMM d yy" : "")"></c1-flex-grid-column>
  <c1-flex-grid-column binding="End"
                       format="@(optionsModel.Options["Formatting"].CurrentValue == "On" ? "HH:mm" : "")"></c1-flex-grid-column>
  <c1-flex-grid-column binding="Country"
                       width="@optionsModel.Options["Column Resize"].CurrentValue"></c1-flex-grid-column>
  <c1-flex-grid-column binding="Product" css-class-all="@optionsModel.Options["Css Class All"].CurrentValue"></c1-flex-grid-column>
  <c1-flex-grid-column binding="Color"></c1-flex-grid-column>
  <c1-flex-grid-column binding="Amount" format="c"></c1-flex-grid-column>
  <c1-flex-grid-column binding="Amount2" format="c"></c1-flex-grid-column>
  <c1-flex-grid-column binding="Active"></c1-flex-grid-column>
  <c1-items-source initial-items-count="100" read-action-url="@Url.Action("Index_Bind")" query-data="collectingQueryData"></c1-items-source>
</c1-flex-grid>

@section Settings {
  @await Html.PartialAsync("_OptionsMenu", optionsModel)
}

@section Summary{
  <p>@Html.Raw(FlexGridRes.Index_Text0)</p>
}

@section Description{
  @Html.Raw(FlexGridRes.Index_Text1)
  <br />
  @Html.Raw(FlexGridRes.Index_Text2)
}
