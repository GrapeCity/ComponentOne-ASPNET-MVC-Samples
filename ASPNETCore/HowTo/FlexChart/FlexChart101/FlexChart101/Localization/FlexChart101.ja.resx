<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TXT_Chart_Types" xml:space="preserve">
    <value>チャートタイプ</value>
    <comment>Chart Types</comment>
  </data>
  <data name="TXT_Chart_Types_0" xml:space="preserve">
    <value>FlexChartコントロールには、チャートタイプをカスタマイズするための３つのプロパティがあります。</value>
    <comment>The FlexChart control has three properties that allow you to customize the chart type:</comment>
  </data>
  <data name="TXT_Chart_Types_1" xml:space="preserve">
    <value>&lt;b&gt;ChartType&lt;/b&gt;: すべての系列で使用されるデフォルトのチャートタイプを選択します。
                個々の系列では、これをオーバーライドできます。</value>
    <comment>&lt;b&gt;ChartType&lt;/b&gt;: Selects the default chart type to be used for all series.
                Individual series may override this.</comment>
  </data>
  <data name="TXT_Chart_Types_2" xml:space="preserve">
    <value>&lt;b&gt;Stacking&lt;/b&gt;: 系列のプロット方法が個別、積層、合計が100%になる積層のどれであるかを決定します。</value>
    <comment>&lt;b&gt;Stacking&lt;/b&gt;: Determines whether series are plotted independently,
                stacked, or stacked so their sum is 100%.</comment>
  </data>
  <data name="TXT_Chart_Types_3" xml:space="preserve">
    <value>&lt;b&gt;Rotated&lt;/b&gt;: X軸とY軸を反転して、Xが縦軸、Yが横軸になるようにします。</value>
    <comment>&lt;b&gt;Rotated&lt;/b&gt;: Flips the X and Y axes so X becomes vertical and Y horizontal.</comment>
  </data>
  <data name="TXT_Chart_Types_4" xml:space="preserve">
    <value>次の例は、これらのプロパティを変更するとどうなるかを示します。</value>
    <comment>The example below allows you to see what happens when you change these properties:</comment>
  </data>
  <data name="TXT_Customizing_Axes" xml:space="preserve">
    <value>軸のカスタマイズ</value>
    <comment>Customizing Axes</comment>
  </data>
  <data name="TXT_Customizing_Axes_0" xml:space="preserve">
    <value>範囲（最小と最大）、ラベル書式、目盛りマークの間隔、グリッド線など、チャートの軸をカスタマイズするには、軸のプロパティを使用します。</value>
    <comment>Use axis properties to customize the chart's axes, including ranges (minimum and maximum),
            label format, tickmark spacing, and gridlines.</comment>
  </data>
  <data name="TXT_Customizing_Axes_1" xml:space="preserve">
    <value>&lt;b&gt;Axis&lt;/b&gt;クラスにはbooleanプロパティがあり、機能をオンまたはオフにできます（&lt;b&gt;AxisLine&lt;/b&gt;、&lt;b&gt;MajorTickMarks&lt;/b&gt;、および&lt;b&gt;MajorGrid&lt;/b&gt;）。
            CSSを使用して、オンにする機能の外観のスタイルを設定できます。</value>
    <comment>The &lt;b&gt;Axis&lt;/b&gt; class has boolean properties that allow you to turn features on
            or off (&lt;b&gt;AxisLine&lt;/b&gt;, &lt;b&gt;MajorTickMarks&lt;/b&gt; and &lt;b&gt;MajorGrid&lt;/b&gt;.)
            You can style the appearance of the features that are turned on using CSS.</comment>
  </data>
  <data name="TXT_Downloads" xml:space="preserve">
    <value>Downloads</value>
    <comment>Downloads</comment>
  </data>
  <data name="TXT_Expenses" xml:space="preserve">
    <value>Expenses</value>
    <comment>Expenses</comment>
  </data>
  <data name="TXT_FlexChart_Header" xml:space="preserve">
    <value>FlexChart入門</value>
    <comment>ASP.NET MVC FlexChart 101</comment>
  </data>
  <data name="TXT_FlexChart_Header_0" xml:space="preserve">
    <value>このページでは、FlexChartコントロールの使用を開始する方法を説明します。</value>
    <comment>This page shows how to get started with ASP.NET MVC's FlexChart control.</comment>
  </data>
  <data name="TXT_FreeTrial" xml:space="preserve">
    <value>トライアル版</value>
    <comment>Download Free Trial</comment>
  </data>
  <data name="TXT_Getting_Started" xml:space="preserve">
    <value>はじめに</value>
    <comment>Getting Started</comment>
  </data>
  <data name="TXT_Getting_Started_0" xml:space="preserve">
    <value>MVCアプリケーションでFlexChartコントロールの使用を開始する際の手順。</value>
    <comment>Steps for getting started with the FlexChart control in MVC applications:</comment>
  </data>
  <data name="TXT_Getting_Started_1" xml:space="preserve">
    <value>ComponentOne ASP.NET MVCアプリケーションテンプレートを使用して、新しいMVCプロジェクトを作成します。</value>
    <comment>Create a new MVC project using the C1 ASP.NET MVC application template.</comment>
  </data>
  <data name="TXT_Getting_Started_2" xml:space="preserve">
    <value>プロジェクトに、コントローラおよび対応するビューを追加します。</value>
    <comment>Add controller and corresponding view to the project.</comment>
  </data>
  <data name="TXT_Getting_Started_3" xml:space="preserve">
    <value>razor構文を使用して、ビューのChartコントロールを初期化します。</value>
    <comment>Initialize the Chart control in view using razor syntax.</comment>
  </data>
  <data name="TXT_Getting_Started_4" xml:space="preserve">
    <value>（オプション）CSSを追加して、FlexChartコントロールの外観をカスタマイズします。</value>
    <comment>(Optional) Add some CSS to customize the FlexChart control's appearance.</comment>
  </data>
  <data name="TXT_Legend_and_Titles" xml:space="preserve">
    <value>凡例とタイトル</value>
    <comment>Legend and Titles</comment>
  </data>
  <data name="TXT_Legend_and_Titles_0" xml:space="preserve">
    <value>チャートの汎用の外観をカスタマイズするには、&lt;b&gt;Legend&lt;/b&gt;プロパティを使用します。チャートにタイトルを追加するには、&lt;b&gt;Header&lt;/b&gt;、&lt;b&gt;Footer&lt;/b&gt;、および軸の&lt;b&gt;Title&lt;/b&gt;プロパティを使用します。</value>
    <comment>Use the &lt;b&gt;Legend&lt;/b&gt; properties to customize the appearance of the chart legend, and
            the &lt;b&gt;Header&lt;/b&gt;, &lt;b&gt;Footer&lt;/b&gt;, and axis &lt;b&gt;Title&lt;/b&gt; properties to add titles
            to your charts.</comment>
  </data>
  <data name="TXT_Legend_and_Titles_1" xml:space="preserve">
    <value>CSSを使用して凡例とタイトルのスタイルを設定できます。 次のCSSタブは、凡例とタイトルの外観のカスタマイズに使用されるルールを示しています。 これらはSVG要素なので、「color」ではなく「fill」などのCSS属性を使用する必要があることに注意してください。</value>
    <comment>You can style the legend and titles using CSS. The CSS tab below shows the rules
            used to customize the appearance of the legend and titles. Notice that these are
            SVG elements, so you have to use CSS attributes such as "fill" instead of "color."</comment>
  </data>
  <data name="TXT_Mixed_Chart_Types" xml:space="preserve">
    <value>複合チャートタイプ</value>
    <comment>Mixed Chart Types</comment>
  </data>
  <data name="TXT_Mixed_Chart_Types_0" xml:space="preserve">
    <value>系列自体の&lt;b&gt;ChartType&lt;/b&gt;プロパティを設定して、チャート系列ごとに異なるチャートタイプを使用できます。 これは、チャートのデフォルトのチャートタイプをオーバーライドします。</value>
    <comment>You can use different chart types for each chart series by setting the &lt;b&gt;ChartType&lt;/b&gt;
            property on the series itself. This overrides the chart's default chart type.</comment>
  </data>
  <data name="TXT_Mixed_Chart_Types_1" xml:space="preserve">
    <value>次の例では、チャートの&lt;b&gt;ChartType&lt;/b&gt;プロパティは&lt;b&gt;Column&lt;/b&gt;に設定されていますが、&lt;b&gt;Downloads&lt;/b&gt;系列がそれをオーバーライドして、&lt;b&gt;LineSymbols&lt;/b&gt;チャートタイプが使用されます。</value>
    <comment>In the example below, the chart's &lt;b&gt;ChartType&lt;/b&gt; property is set to &lt;b&gt;Column&lt;/b&gt;,
            but the &lt;b&gt;Downloads&lt;/b&gt; series overrides that to use the &lt;b&gt;LineSymbols&lt;/b&gt; chart type:</comment>
  </data>
  <data name="TXT_Result_Live" xml:space="preserve">
    <value>結果（ライブ）:</value>
    <comment>Result (live):</comment>
  </data>
  <data name="TXT_Sales" xml:space="preserve">
    <value>Sales</value>
    <comment>Sales</comment>
  </data>
  <data name="TXT_SelectionModes" xml:space="preserve">
    <value>選択モード</value>
    <comment>Selection Modes</comment>
  </data>
  <data name="TXT_SelectionModes_0" xml:space="preserve">
    <value>FlexChartを使用すると、クリックまたはタッチすることで系列やデータポイントを選択できます。
            &lt;b&gt;SelectionMode&lt;/b&gt;プロパティを使用して、系列単位で選択するか、データポイント単位で選択するか、または何も選択しないかを指定します（デフォルトでは選択はオフ）。</value>
    <comment>The FlexChart allows you to select series or data points by clicking or touching them.
            Use the &lt;b&gt;SelectionMode&lt;/b&gt; property to specify whether you want to allow selection
            by series, by data point, or no selection at all (selection is off by default.)</comment>
  </data>
  <data name="TXT_SelectionModes_1" xml:space="preserve">
    <value>&lt;b&gt;SelectionMode&lt;/b&gt;プロパティを&lt;b&gt;Series&lt;/b&gt;または&lt;b&gt;Point&lt;/b&gt;に設定すると、ユーザーがマウスをクリックしたとき、FlexChartは&lt;b&gt;Selection&lt;/b&gt;プロパティを更新し、選択されたチャート要素に「wj-state-selected」クラスを適用します。</value>
    <comment>Setting the &lt;b&gt;SelectionMode&lt;/b&gt; property to &lt;b&gt;Series&lt;/b&gt; or &lt;b&gt;Point&lt;/b&gt; causes
            the FlexChart to update the &lt;b&gt;Selection&lt;/b&gt; property when the user clicks the
            mouse, and to apply the "wj-state-selected" class to selected chart elements.</comment>
  </data>
  <data name="TXT_SelectionModes_2" xml:space="preserve">
    <value>例に示すように、&lt;b&gt;Series.collectionView.currentItem&lt;/b&gt;プロパティを使用することにより、選択された系列内で現在選択されている項目を取得します。</value>
    <comment>The &lt;b&gt;Selection&lt;/b&gt; property returns the currently selected series. To get the
            currently selected data point, get the currently selected item within the
            selected series using the &lt;b&gt;Series.collectionView.currentItem&lt;/b&gt; property
            as shown in the example.</comment>
  </data>
  <data name="TXT_Styling_Series" xml:space="preserve">
    <value>系列のスタイル設定</value>
    <comment>Styling Series</comment>
  </data>
  <data name="TXT_Styling_Series_0" xml:space="preserve">
    <value>FlexChartはデフォルトのパレットに基づいて系列ごとにカラーを自動的に選択しますが、これはオーバーライドできます。それには、&lt;b&gt;Palette&lt;/b&gt;プロパティを設定します。
            しかし、デフォルト設定もオーバーライドできます。それには、任意の系列の&lt;b&gt;Style&lt;/b&gt;プロパティを、&lt;b&gt;Fill&lt;/b&gt;、&lt;b&gt;Stroke&lt;/b&gt;、&lt;b&gt;StrokeThickness&lt;/b&gt;などのSVGスタイル設定属性を指定するオブジェクトに指定します。</value>
    <comment>The FlexChart automatically picks colors for each series based on a default
            palette, which you can override by setting the &lt;b&gt;Palette&lt;/b&gt; property.
            But you can also override the default settings by setting the &lt;b&gt;Style&lt;/b&gt;
            property of any series to an object that specifies SVG styling attributes,
            including &lt;b&gt;Fill&lt;/b&gt;, &lt;b&gt;Stroke&lt;/b&gt;, &lt;b&gt;StrokeThickness&lt;/b&gt;, and so on.</comment>
  </data>
  <data name="TXT_Styling_Series_1" xml:space="preserve">
    <value>&lt;b&gt;Series.Style&lt;/b&gt;プロパティは、MVCコントロール内のすべてのスタイル設定はCSSを使用して行うという原則の例外です。 この例外は、多くのチャートには動的系列があり、事前にスタイル設定を行うのは不可能であるということに基づくものです。 たとえば株式チャートは、アプリケーションの実行中、ユーザーによって選択された系列を表示することがあります。</value>
    <comment>The &lt;b&gt;Series.Style&lt;/b&gt; property is an exception to the general rule that
            all styling in MVC Controls is done through CSS. The exception reflects the fact
            that many charts have dynamic series, which would be impossible to style
            in advance. For example, a stock chart may show series selected by the
            user while running the application.</comment>
  </data>
  <data name="TXT_Styling_Series_2" xml:space="preserve">
    <value>この例のチャートは、&lt;b&gt;Style&lt;/b&gt;プロパティと&lt;b&gt;SymbolStyle&lt;/b&gt;プロパティを使用して、系列ごとにスタイル属性を選択します。</value>
    <comment>The chart in this example uses the &lt;b&gt;Style&lt;/b&gt; and &lt;b&gt;SymbolStyle&lt;/b&gt; properties
            to select style attributes for each series:</comment>
  </data>
  <data name="TXT_Theming" xml:space="preserve">
    <value>テーマ</value>
    <comment>Theming</comment>
  </data>
  <data name="TXT_Theming_0" xml:space="preserve">
    <value>FlexChartの外観はCSSで定義されます。 デフォルトのテーマに加えて、プロのデザインによる12種類ほどのテーマが組み込まれており、すべてのMVCコントロールの外観を統一感のある魅力的な見た目にカスタマイズできます。</value>
    <comment>The appearance of the FlexChart is defined in CSS. In addition to the default theme, we
            include about a dozen professionally designed themes that customize the appearance of
            all MVC controls to achieve a consistent, attractive look.</comment>
  </data>
  <data name="TXT_Theming_1" xml:space="preserve">
    <value>チャートの外観をカスタマイズするには、スタイル設定する要素を調査し、それらの要素に適用するCSSルールを作成します。</value>
    <comment>To customize the appearance of the chart, inspect the elements you want to style and
            create some CSS rules that apply to those elements.</comment>
  </data>
  <data name="TXT_Theming_2" xml:space="preserve">
    <value>たとえば、Webブラウザの開発者ツールでX軸のラベルのDOMを解析すると、それが「wj-label」クラスを持つ要素であること、「wj-axis-x」クラスを持つ要素に含まれていること、その要素は最上位のコントロール要素に含まれていること、その要素は「wj-flexchart」クラスを持つことがわかります。 この例の最初のCSSルールは、この情報を使用してXラベルをカスタマイズします。 ルールセレクタは、親要素が「wj-flexchart」クラス&lt;b&gt;および&lt;/b&gt;「custom-flex-chart」クラスを持つ必要があるという追加要件を追加します。 これを使用しない場合は、そのページのすべてのチャートにルールが適用されます。</value>
    <comment>For example, if you right-click one of the labels on the X axis in IE or Chrome, you
            will see that it is an element with the "wj-label" class, that it is contained in an
            element with the "wj-axis-x" class, which is contained in the the top-level control
            element, which has the "wj-flexchart" class. The first CSS rule in this example uses
            this information to customize the X labels. The rule selector adds the additional
            requirement that the parent element must be have the "wj-flexchart" &lt;b&gt;and&lt;/b&gt; the
            "custom-flex-chart" classes. Without this, the rule would apply to all charts on the
            page.</comment>
  </data>
  <data name="TXT_Toggle_Series" xml:space="preserve">
    <value>系列の表示切り替え</value>
    <comment>Toggle Series</comment>
  </data>
  <data name="TXT_Toggle_Series_0" xml:space="preserve">
    <value>&lt;b&gt;Series&lt;/b&gt;クラスには&lt;b&gt;Visibility&lt;/b&gt;プロパティがあり、系列をチャート内と凡例内に表示するか、凡例内にのみ表示するか、または完全に非表示にするかを決定できます。</value>
    <comment>The &lt;b&gt;Series&lt;/b&gt; class has a &lt;b&gt;Visibility&lt;/b&gt; property that allows you to
            determine whether a series should be shown in the chart and in the legend,
            only in the legend, or completely hidden.</comment>
  </data>
  <data name="TXT_Toggle_Series_1" xml:space="preserve">
    <value>この例は、&lt;b&gt;Visibility&lt;/b&gt;プロパティを使用して系列の表示/非表示を切り替える２つの方法を示しています。</value>
    <comment>This sample shows how you can use the &lt;b&gt;Visibility&lt;/b&gt; property to toggle
            the visibility of a series using two methods:</comment>
  </data>
  <data name="TXT_Toggle_Series_2" xml:space="preserve">
    <value>凡例エントリをクリックする。&lt;br /&gt;
                チャートの&lt;b&gt;option.legendToggle&lt;/b&gt;プロパティがtrueに設定されていると、系列の凡例エントリがクリックされたとき、その&lt;b&gt;Visibility&lt;/b&gt;プロパティが切り替わります。</value>
    <comment>Clicking on legend entries:&lt;br /&gt;
                The chart sets the chart's &lt;b&gt;option.legendToggle&lt;/b&gt; property to true,
                which toggles the &lt;b&gt;Visibility&lt;/b&gt; property of a series when its legend entry is
                clicked.</comment>
  </data>
  <data name="TXT_Toggle_Series_3" xml:space="preserve">
    <value>チェックボックスを使用する。&lt;br /&gt;
                &lt;b&gt;checked&lt;/b&gt;状態が変更されると、各系列の&lt;b&gt;Visibility&lt;/b&gt;プロパティがその&lt;b&gt;checked&lt;/b&gt;状態によって設定されます。</value>
    <comment>Using checkboxes:&lt;br /&gt;
                When the &lt;b&gt;checked&lt;/b&gt; state changed, it will set the &lt;b&gt;Visibility&lt;/b&gt; property of each series by the &lt;b&gt;checked&lt;/b&gt; state.</comment>
  </data>
  <data name="TXT_Tooltips" xml:space="preserve">
    <value>ツールチップ</value>
    <comment>Tooltips</comment>
  </data>
  <data name="TXT_Tooltips_0" xml:space="preserve">
    <value>FlexChartでは、ツールチップが組み込みでサポートされています。 ユーザーがデータポイントにタッチするか、その上にカーソルを置くと、コントロールはデフォルトでツールチップを表示します。</value>
    <comment>The FlexChart has built-in support for tooltips. By default, the control displays
            tooltips when the user touches or hovers the mouse on a data point.</comment>
  </data>
  <data name="TXT_Tooltips_1" xml:space="preserve">
    <value>ツールチップの内容はテンプレートを使用して生成されます。このテンプレートは、次のパラメータを含むことができます。</value>
    <comment>The tooltip content is generated using a template that may contain the following
            parameters:</comment>
  </data>
  <data name="TXT_Tooltips_2" xml:space="preserve">
    <value>&lt;b&gt;SeriesName&lt;/b&gt;: チャート要素を含む系列の名前。</value>
    <comment>&lt;b&gt;SeriesName&lt;/b&gt;: The name of the series that contains the chart element.</comment>
  </data>
  <data name="TXT_Tooltips_3" xml:space="preserve">
    <value>&lt;b&gt;PointIndex&lt;/b&gt;: 系列内のチャート要素のインデックス。</value>
    <comment>&lt;b&gt;PointIndex&lt;/b&gt;: The index of the chart element within the series.</comment>
  </data>
  <data name="TXT_Tooltips_4" xml:space="preserve">
    <value>&lt;b&gt;AxisX&lt;/b&gt;: チャート要素の&lt;b&gt;x&lt;/b&gt;値。</value>
    <comment>&lt;b&gt;AxisX&lt;/b&gt;: The &lt;b&gt;x&lt;/b&gt; value of the chart element.</comment>
  </data>
  <data name="TXT_Tooltips_5" xml:space="preserve">
    <value>&lt;b&gt;AxisY&lt;/b&gt;: チャート要素の&lt;b&gt;y&lt;/b&gt;値。</value>
    <comment>&lt;b&gt;AxisY&lt;/b&gt;: The &lt;b&gt;y&lt;/b&gt; value of the chart element.</comment>
  </data>
  <data name="TXT_Tooltips_6" xml:space="preserve">
    <value>デフォルトでは、ツールチップテンプレートは&lt;code&gt;&amp;lt;b&amp;gt;{seriesName}&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;{x} {y}&lt;/code&gt;に設定され、これがどのように機能するかは上記のチャートで確認できます。
            この例では、ツールチップテンプレートを&lt;code&gt;&amp;lt;b&amp;gt;{seriesName}&amp;lt;/b&amp;gt; &amp;lt;img src='"+@@Url.Content("~/Content/images/{x}.png")+"'/&amp;gt;&amp;lt;br/&amp;gt;{y}&lt;/code&gt;に設定し、国名を国旗で置き換えます。</value>
    <comment>By default, the tooltip template is set to
            &lt;code&gt;&amp;lt;b&amp;gt;{seriesName}&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;{x} {y}&lt;/code&gt;,
            and you can see how that works in the  charts above.
            In this example, we set the tooltip template to
            &lt;code&gt;&amp;lt;b&amp;gt;{seriesName}&amp;lt;/b&amp;gt; &amp;lt;img src='"+@@Url.Content("~/Content/images/{x}.png")+"'/&amp;gt;&amp;lt;br/&amp;gt;{y}&lt;/code&gt;,
            which replaces the country name with the country's flag.</comment>
  </data>
  <data name="TXT_Tooltips_7" xml:space="preserve">
    <value>チャートのツールチップを無効にできます。それには、テンプレートを空の文字列に設定します。</value>
    <comment>You can disable the chart tooltips by setting the template to an empty string.</comment>
  </data>
</root>