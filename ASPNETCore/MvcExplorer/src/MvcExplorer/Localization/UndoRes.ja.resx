<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UndoStack_Form_Text0" xml:space="preserve">
    <value>HTML入力要素</value>
    <comment>HTML Input Elements</comment>
  </data>
  <data name="UndoStack_Form_Text1" xml:space="preserve">
    <value>名字</value>
    <comment>First Name</comment>
  </data>
  <data name="UndoStack_Form_Text10" xml:space="preserve">
    <value>MVCコントロール</value>
    <comment>MVC Controls</comment>
  </data>
  <data name="UndoStack_Form_Text11" xml:space="preserve">
    <value>国</value>
    <comment>Country</comment>
  </data>
  <data name="UndoStack_Form_Text12" xml:space="preserve">
    <value>金額</value>
    <comment>Amount</comment>
  </data>
  <data name="UndoStack_Form_Text13" xml:space="preserve">
    <value>日付</value>
    <comment>Date</comment>
  </data>
  <data name="UndoStack_Form_Text14" xml:space="preserve">
    <value>コンボボックス</value>
    <comment>Color</comment>
  </data>
  <data name="UndoStack_Form_Text15" xml:space="preserve">
    <value>複数選択</value>
    <comment>Colors</comment>
  </data>
  <data name="UndoStack_Form_Text17" xml:space="preserve">
    <value>コードで行を追加</value>
    <comment>Add Row in Code</comment>
  </data>
  <data name="UndoStack_Form_Text18" xml:space="preserve">
    <value>コードで行を削除</value>
    <comment>Delete Row in Code</comment>
  </data>
  <data name="UndoStack_Form_Text19" xml:space="preserve">
    <value>新しい行を先頭に表示</value>
    <comment>New Row At Top</comment>
  </data>
  <data name="UndoStack_Form_Text2" xml:space="preserve">
    <value>名前</value>
    <comment>Last Name</comment>
  </data>
  <data name="UndoStack_Form_Text3" xml:space="preserve">
    <value>選択</value>
    <comment>Fruits</comment>
  </data>
  <data name="UndoStack_Form_Text4" xml:space="preserve">
    <value>リンゴ;オレンジ;ブドウ</value>
    <comment>Apples;Oranges;Grapes</comment>
  </data>
  <data name="UndoStack_Form_Text5" xml:space="preserve">
    <value>メモ</value>
    <comment>Note</comment>
  </data>
  <data name="UndoStack_Form_Text6" xml:space="preserve">
    <value>赤;緑;青</value>
    <comment>Red;Green;Blue</comment>
  </data>
  <data name="UndoStack_Form_Text7" xml:space="preserve">
    <value>あたたかい;つめたい;常温</value>
    <comment>Hot;Cold;Medium</comment>
  </data>
  <data name="UndoStack_Text0" xml:space="preserve">
    <value>このビューは、UndoStackの使用方法を示します。</value>
    <comment>This view shows how to use UndoStack.</comment>
  </data>
  <data name="UndoStack_Text1" xml:space="preserve">
    <value>UndoStackクラスを使用すると、ページ、フォーム、任意の要素で元に戻す／やり直しを行うことができます。通常のHTML入力要素やほとんどのMVCコントロールへの変更を追跡し、元に戻す／やり直しのショートカットキーを自動的に処理し、元に戻す／やり直しの操作をプログラムで実行するためのコマンドを提供します。</value>
    <comment>The UndoStack class lets you add undo/redo stack to a page, a form, or any element. It tracks changes to regular HTML input elements as well as most MVC controls, handles the undo/redo keys automatically, and provides commands for executing undo and redo actions programmatically.</comment>
  </data>
  <data name="UndoStack_Toolbar_Text0" xml:space="preserve">
    <value>元に戻す（Ctrl+Z）</value>
    <comment> Undo (ctrl+Z)</comment>
  </data>
  <data name="UndoStack_Toolbar_Text1" xml:space="preserve">
    <value>やり直し（Ctrl+Y）</value>
    <comment> Redo (ctrl+Y)</comment>
  </data>
  <data name="UndoStack_Toolbar_Text2" xml:space="preserve">
    <value>アクション回数： </value>
    <comment>Action Count: </comment>
  </data>
  <data name="UndoStack_Toolbar_Text3" xml:space="preserve">
    <value>リセット</value>
    <comment>Clear Undo/Redo Stack</comment>
  </data>
</root>