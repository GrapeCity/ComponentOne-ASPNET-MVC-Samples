@using FinancialChartExplorer.Models
@model List<FinanceData>
@{
    ViewBag.DemoSettings = false;
    ClientSettingsModel demoSettingsModel = ViewBag.DemoSettingsModel;
    C1.Web.Mvc.Finance.ChartType chartType = ViewBag.ChartType;
}
<script>
    function rangeChangedHandler(sender, e) {
        var stChart = wijmo.Control.getControl("#@demoSettingsModel.ControlId"),
            rs = c1.getExtender(wijmo.Control.getControl("#rs"), "RangeSelector"),
            yRange;
        if (stChart && rs) {
            // update main chart's x & y range
            yRange = findRenderedYRange(stChart.collectionView.sourceCollection,
                                                rs.min, rs.max);
            stChart.axisX.min = rs.min;
            stChart.axisX.max = rs.max;
            stChart.axisY.min = yRange.min;
            stChart.axisY.max = yRange.max;
            stChart.invalidate();
        }
    }

    function findRenderedYRange(data, xmin, xmax) {
        var item, i, ymin = null, ymax = null, xValue;

        for (i = 0; i < data.length; i++) {
            item = data[i];
            if (item.X.constructor == Date) {
                xValue = item.X.getTime();
            } else {
                xValue = i;
            }

            if (xmin > xValue || xValue > xmax) {
                continue;
            }

            if (ymax === null || item.High > ymax) {
                ymax = item.High;
            }
            if (ymin === null || item.Low < ymin) {
                ymin = item.Low;
            }
        }
        return {
            min: ymin,
            max: ymax
        };
    }
</script>

@(Html.C1().FinancialChart()
.Id("rs")
.Height("200px")
.Bind(Model)
.BindingX("X")
.SymbolSize(6)
.ChartType(@chartType)
.Series(sers =>
    {
        sers.Add().Binding("High,Low,Open,Close,Volume");
    })
.AddRangeSelector(rs => rs.OnClientRangeChanged("rangeChangedHandler").Id("RangeSelector").Seamless(true))
.Tooltip(t => t.Content("")))
