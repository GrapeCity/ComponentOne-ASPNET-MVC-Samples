<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
   
		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Index_Text0" xml:space="preserve">
    <value>Hello Popup&lt;br&gt;This is a multiline message!</value>
  </data>
  <data name="Index_Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>Popups may have owner elements that can be used to control their visibility. The show-trigger and hide-trigger attributes determine whether the Popups should be shown or hidden when the owner element is clicked or when the popup loses the focus.</value>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>Popovers (Popups with owner elements)</value>
  </data>
  <data name="Index_ClickToShowPopupForm" xml:space="preserve">
    <value>Click to show Popup form</value>
  </data>
  <data name="Index_Description1" xml:space="preserve">
    <value>(ShowTrigger=Click, HideTrigger=Click, IsResizable=True)</value>
  </data>
  <data name="Index_Description2" xml:space="preserve">
    <value>(ShowTrigger=Click, HideTrigger=Blur)</value>
  </data>
  <data name="Index_Description3" xml:space="preserve">
    <value>ShowTrigger=Click, HideTrigger=None)</value>
  </data>
  <data name="Index_Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Index_SaveChanges" xml:space="preserve">
    <value>Save changes</value>
  </data>
  <data name="Index_EnterEmail" xml:space="preserve">
    <value>Enter email</value>
  </data>
  <data name="PopupDialog_Text0" xml:space="preserve">
    <value>Dialogs (Popups with no owner)</value>
  </data>
  <data name="PopupDialog_LogIn" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="PopupDialog_Email" xml:space="preserve">
    <value>Email:</value>
  </data>
  <data name="PopupDialog_Password" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="PopupDialog_RememberMe" xml:space="preserve">
    <value>Remember Me</value>
  </data>
  <data name="PopupDialog_Text1" xml:space="preserve">
    <value>Don't have an account yet?</value>
  </data>
  <data name="PopupDialog_Text2" xml:space="preserve">
    <value>Log in using your Facebook account</value>
  </data>
  <data name="PopupDialog_Text3" xml:space="preserve">
    <value>logging in via Facebook...</value>
  </data>
  <data name="PopupDialog_Text4" xml:space="preserve">
    <value>Log in using your Google account</value>
  </data>
  <data name="PopupDialog_Text5" xml:space="preserve">
    <value>logging in via Google...</value>
  </data>
  <data name="PopupDialog_CreateAccount" xml:space="preserve">
    <value>Create Account</value>
  </data>
  <data name="PopupDialog_EditAccount" xml:space="preserve">
    <value>Edit Account</value>
  </data>
  <data name="PopupDialog_Name" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="PopupDialog_ConfirmPassword" xml:space="preserve">
    <value>Confirm Password:</value>
  </data>
  <data name="PopupDialog_CurrentPassword" xml:space="preserve">
    <value>Current Password:</value>
  </data>
  <data name="PopupDialog_NewName" xml:space="preserve">
    <value>New Name:</value>
  </data>
  <data name="PopupDialog_NewPassword" xml:space="preserve">
    <value>New Password:</value>
  </data>
  <data name="PopupDialog_ConfirmNewPassword" xml:space="preserve">
    <value>Confirm New Password:</value>
  </data>
  <data name="PopupDialog_UpdateAccount" xml:space="preserve">
    <value>Update Account</value>
  </data>
  <data name="PopupDialog_Text6" xml:space="preserve">
    <value>Dialogs are Popups with no owner element. They must be shown by calling the show method.&lt;br /&gt;
    Dialogs can be modal or modeless. Modal dialogs have a dark backdrop, and if their hide-trigger attribute is set to None, they cannot lose focus and must be dismissed by the user, either by pressing escape or by clicking an element on the dialog itself.</value>
  </data>
  <data name="PopupDialog_Title4" xml:space="preserve">
    <value>Please enter 4 characters or more.</value>
  </data>
  <data name="PopupDialog_Title2" xml:space="preserve">
    <value>Please enter 2 characters or more.</value>
  </data>
  <data name="Index_Text3" xml:space="preserve">
    <value>&lt;b&gt;IsResizable&lt;/b&gt;: Gets or sets a value that determines whether the popup can be resized by dragging its edges with the mouse.</value>
  </data>
  <data name="Index_Description4" xml:space="preserve">
    <value>ShowTrigger and HideTrigger properties will follow the Settings below</value>
  </data>
  <data name="Index_Description5" xml:space="preserve">
    <value>Please select the Trigger properties, to change whenever the Popup will show or hidden.</value>
  </data>
  <data name="Index_Title4" xml:space="preserve">
    <value>Customize Trigger</value>
  </data>
  <data name="PopupPosition_Description" xml:space="preserve">
    <value>Change Popup position to set where the popup should be displayed with respect to the owner element.</value>
  </data>
  <data name="Index_ClickToShowPopupWithEvents" xml:space="preserve">
    <value>Click to show Popup with Events</value>
  </data>
  <data name="Index_IsDraggable_Description" xml:space="preserve">
    <value>&lt;b&gt;IsDraggable&lt;/b&gt;: Gets or sets a value that determines whether the popup can be dragged with the mouse by its header. The header is identified by the '.wj-dialog-header' or '.modal-header' CSS selectors. If the dialog does not contain any elements with the 'wj-dialog-header'or 'modal-header' classes, users will not be able to drag the popup.</value>
  </data>
  <data name="Index_OnClientDragged_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientDragged&lt;/b&gt;: Gets or sets the client function which occurs after the Popup has been dragged.</value>
  </data>
  <data name="Index_OnClientDragging_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientDragging&lt;/b&gt;: Gets or sets the client function which occurs when the Popup is about to be dragged.</value>
  </data>
  <data name="Index_OnClientPositionChanged_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientPositionChanged&lt;/b&gt;: Gets or sets the client function which occurs while the user moves the Popup, between the Dragging and Dragged events, after the PositionChanging event.</value>
  </data>
  <data name="Index_OnClientPositionChanging_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientPositionChanging&lt;/b&gt;: Gets or sets the client function which occurs while the user moves the Popup, between the Dragging and Dragged events.</value>
  </data>
  <data name="Index_OnClientResized_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientResized&lt;/b&gt;: Gets or sets the client function which occurs after the Popup has been resized.</value>
  </data>
  <data name="Index_OnClientResizing_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientResizing&lt;/b&gt;: Gets or sets the client function which occurs when the Popup is about to be resized.</value>
  </data>
  <data name="Index_OnClientSizeChanged_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientSizeChanged&lt;/b&gt;: Gets or sets the client function which occurs while the user resizes the Popup, between the resizing and resized events, after the SizeChanging event.</value>
  </data>
  <data name="Index_OnClientSizeChanging_Description" xml:space="preserve">
    <value>&lt;b&gt;OnClientSizeChanging&lt;/b&gt;: Gets or sets the client function which occurs while the user resizes the Popup, between the resizing and resized events.</value>
  </data>
  <data name="PopupDialog_CustomInput" xml:space="preserve">
    <value>Input any text:</value>
  </data>
  <data name="PopupDialog_ResultSubmit" xml:space="preserve">
    <value>The form is submitted with custom submit result and inputted text is</value>
  </data>
  <data name="PopupDialog_Title5" xml:space="preserve">
    <value>Custom Submit Result</value>
  </data>
  <data name="PopupDialog_Custom" xml:space="preserve">
    <value>Custom Submit Result</value>
  </data>
</root>