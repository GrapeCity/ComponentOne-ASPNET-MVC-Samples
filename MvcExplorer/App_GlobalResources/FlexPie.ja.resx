<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
 
		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChartAnimation_Text0" xml:space="preserve">
    <value>このビューは、&lt;b&gt;FlexPie&lt;/b&gt; の ChartAnimation を示します。</value>
    <comment>This view shows ChartAnimation for &lt;b&gt;FlexPie&lt;/b&gt;.</comment>
  </data>
  <data name="ChartAnimation_Text1" xml:space="preserve">
    <value>ChartAnimation の &lt;b&gt;AnimationMode&lt;/b&gt; プロパティを設定することで、FlexPie でさまざまなアニメーションモードを使用できます。</value>
    <comment>You can use different animation modes for FlexPie by setting the &lt;b&gt;AnimationMode&lt;/b&gt; property of ChartAnimation.</comment>
  </data>
  <data name="ChartAnimation_Text2" xml:space="preserve">
    <value>ChartAnimation クラスには、アニメーションの継続時間をミリ秒単位で設定できる &lt;b&gt;Duration&lt;/b&gt; プロパティがあります。</value>
    <comment>The ChartAnimation class has a &lt;b&gt;Duration&lt;/b&gt; property that allows you to set the length of animation in milliseconds.</comment>
  </data>
  <data name="Index_Text0" xml:space="preserve">
    <value>このビューは、FlexPie の基本機能を示します。これは、チャートをデータモデルに連結します。</value>
    <comment>This view shows the FlexPie's basic features. It binds the chart to a data model.</comment>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>マウスをチャート要素の上に移動すると、そのデータポイントの詳細を示すツールチップが表示されます。</value>
    <comment>If you move the mouse over a chart element, a tooltip will appear showing details about the data point.</comment>
  </data>
  <data name="Selection_Text0" xml:space="preserve">
    <value>このビューは、FlexPie の選択機能を示します。</value>
    <comment>This view shows the FlexPie's selection feature.</comment>
  </data>
  <data name="ChartAnimation_AnimationMode" xml:space="preserve">
    <value>ンモード</value>
    <comment>AnimationMode</comment>
  </data>
  <data name="ChartAnimation_Easing" xml:space="preserve">
    <value>イージング</value>
    <comment>Easing</comment>
  </data>
  <data name="ChartAnimation_Duration" xml:space="preserve">
    <value>継続時間</value>
    <comment>Duration</comment>
  </data>
  <data name="ChartAnimation_InnerRadius" xml:space="preserve">
    <value>内部半径</value>
    <comment>InnerRadius</comment>
  </data>
  <data name="ItemFormatter_Text0" xml:space="preserve">
    <value>このビューは、ItemFormatter を使用して作成された FlexPie のラベルを示します。</value>
    <comment>This view shows the FlexPie's labels created using ItemFormatter.</comment>
  </data>
  <data name="RemoteBind_Text0" xml:space="preserve">
    <value>このビューは、FlexPie をリモートデータに連結する方法を示します。</value>
    <comment>This view shows how to bind FlexPie to a remote data.</comment>
  </data>
  <data name="Multiple_Text0" xml:space="preserve">
    <value>このサンプルは、同じデータソースに基づいて複数の円グラフを作成する方法を示しています。 複数の円グラフを作成するには、バインドで複数のコンマ区切りプロパティを指定するだけです。</value>
    <comment>The sample shows how to create multiple pie charts based on the same data source. To create multiple pie charts, just specify several comma-separated properties in Binding.</comment>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>&lt;b&gt;InnerRadius&lt;/b&gt; プロパティをゼロより大きい値に設定すると、円グラフの中央に穴が開き、&lt;b&gt;InnerText&lt;/b&gt;がヘッダテキストではなく円グラフの中央に表示されます。円グラフ内のテキストのスタイルを設定するには、&lt;b&gt;InnerTextStyle&lt;/b&gt;プロパティを使用します。</value>
    <comment>If you select &lt;b&gt;InnerRadius&lt;/b&gt; greater than 0 then the &lt;b&gt;InnerText&lt;/b&gt; will appears inside center of the pie instead of Header text at the top and it's styled by &lt;b&gt;InnerTextStyle&lt;/b&gt;.</comment>
  </data>
  <data name="Multiple_Text1" xml:space="preserve">
    <value>1行あたりのチャート</value>
    <comment>Charts Per Line</comment>
  </data>
</root>