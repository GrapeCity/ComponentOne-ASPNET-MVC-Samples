<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComplexType_Text0" xml:space="preserve">
    <value>システムカラー名をキー入力します。「red」と入力してみます。</value>
  <comment>Type in a system color name. Try to type in "red".</comment></data>
  <data name="CustomAction_Text0" xml:space="preserve">
    <value>mscorlib で型を検索します。</value>
  <comment>Search for types in mscorlib:</comment></data>
  <data name="Index_Text0" xml:space="preserve">
    <value>国名をキー入力します。</value>
  <comment>Type in a country name</comment></data>
  <data name="Index_Text1" xml:space="preserve">
    <value>国名をキー入力します。</value>
  <comment>Type in a country name</comment></data>
  <data name="ComplexType_Text1" xml:space="preserve">
    <value>複合型リストへの連結</value>
    <comment>Bind to a list of complex type</comment>
  </data>
  <data name="ComplexType_Text2" xml:space="preserve">
    <value>このサンプルは、「DisplayMemberPath」と「SelectedValuePath」を使用して複合型のリストに連結する方法を示します。</value>
    <comment>This sample shows how to bind to a list of complex type using "DisplayMemberPath" and "SelectedValuePath".</comment>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>ItemsSource のみ</value>
    <comment>ItemsSource Only</comment>
  </data>
  <data name="Index_Text3" xml:space="preserve">
    <value>ItemsSource と CssMatch</value>
    <comment>ItemsSource &amp;amp; CssMatch</comment>
  </data>
  <data name="Index_Text4" xml:space="preserve">
    <value>このサンプルは、AutoComplete コントロールの基本的な使用方法を示します。</value>
    <comment>This sample shows the basic usage of the AutoComplete control.</comment>
  </data>
  <data name="CustomAction_Text1" xml:space="preserve">
    <value>カスタムアクション</value>
    <comment>Custom action</comment>
  </data>
  <data name="CustomAction_Text2" xml:space="preserve">
    <value>MaxItems を設定したカスタムアクション</value>
    <comment>Custom action with MaxItems</comment>
  </data>
  <data name="CustomAction_Text3" xml:space="preserve">
    <value>このサンプルでは、カスタムアクションを AutoComplete のデータソースとして使用して、インクリメンタルサーチを提供する方法を示します。</value>
    <comment>This sample shows how to provide incremental search by using custom action as data source of AutoComplete.</comment>
  </data>
  <data name="CaseSensitiveSearchDescription_Text0" xml:space="preserve">
    <value>CaseSensitiveSearch プロパティを<b>true</b>に設定した場合、検索では大文字と小文字が区別されます。</value>
    <comment>When Case Sensitive Search is &lt;b&gt;true&lt;/b&gt;, the user types are searched as case-sensitive</comment>
  </data>
  <data name="BeginsWithSearchDescription_Text0" xml:space="preserve">
    <value>BeginsWithSearchプロパティが&lt;b&gt;true&lt;/b&gt;の場合、コントロールは指定された検索用語で始まる項目を検索します。</value>
    <comment>When Begins With Search is &lt;b&gt;true&lt;/b&gt;, the user types are searched as beginning</comment>
  </data>
</root>