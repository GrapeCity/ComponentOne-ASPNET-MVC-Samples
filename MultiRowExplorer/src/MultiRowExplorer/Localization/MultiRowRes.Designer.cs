//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiRowExplorer.Localization {
    using System;
    using System.Reflection;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class MultiRowRes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MultiRowRes() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MultiRowExplorer.Localization.MultiRowRes", typeof(MultiRowRes).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sample.
        /// </summary>
        public static string _ControlLayout_Text0 {
            get {
                return ResourceManager.GetString("_ControlLayout_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source.
        /// </summary>
        public static string _ControlLayout_Text1 {
            get {
                return ResourceManager.GetString("_ControlLayout_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation.
        /// </summary>
        public static string _ControlLayout_Text2 {
            get {
                return ResourceManager.GetString("_ControlLayout_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string _ControlLayout_Text3 {
            get {
                return ResourceManager.GetString("_ControlLayout_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description.
        /// </summary>
        public static string _ControlLayout_Text4 {
            get {
                return ResourceManager.GetString("_ControlLayout_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Features.
        /// </summary>
        public static string _ControlsNav_Text0 {
            get {
                return ResourceManager.GetString("_ControlsNav_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComponentOne.
        /// </summary>
        public static string _Layout_Text0 {
            get {
                return ResourceManager.GetString("_Layout_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MVC MultiRow Explorer.
        /// </summary>
        public static string _Layout_Text1 {
            get {
                return ResourceManager.GetString("_Layout_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C1 ASP.NET MVC.
        /// </summary>
        public static string _Layout_Text10 {
            get {
                return ResourceManager.GetString("_Layout_Text10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASP.NET MVC Edition MultiRow Explorer.
        /// </summary>
        public static string _Layout_Text2 {
            get {
                return ResourceManager.GetString("_Layout_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation.
        /// </summary>
        public static string _Layout_Text3 {
            get {
                return ResourceManager.GetString("_Layout_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GrapeCity, Inc. All Rights Reserved.&lt;br /&gt;
        ///            All product and company names here in may be trademarks of their respective owners..
        /// </summary>
        public static string _Layout_Text4 {
            get {
                return ResourceManager.GetString("_Layout_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sample.
        /// </summary>
        public static string _Layout_Text5 {
            get {
                return ResourceManager.GetString("_Layout_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source.
        /// </summary>
        public static string _Layout_Text6 {
            get {
                return ResourceManager.GetString("_Layout_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string _Layout_Text7 {
            get {
                return ResourceManager.GetString("_Layout_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description.
        /// </summary>
        public static string _Layout_Text8 {
            get {
                return ResourceManager.GetString("_Layout_Text8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.grapecity.com/en/aspnet-mvc.
        /// </summary>
        public static string _Layout_Text9 {
            get {
                return ResourceManager.GetString("_Layout_Text9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string _SiteNav_Text0 {
            get {
                return ResourceManager.GetString("_SiteNav_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Support.
        /// </summary>
        public static string _SiteNav_Text1 {
            get {
                return ResourceManager.GetString("_SiteNav_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pricing.
        /// </summary>
        public static string _SiteNav_Text2 {
            get {
                return ResourceManager.GetString("_SiteNav_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FREE TRIAL.
        /// </summary>
        public static string _SiteNav_Text3 {
            get {
                return ResourceManager.GetString("_SiteNav_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit Theme &amp;gt;.
        /// </summary>
        public static string _SiteNav_Text4 {
            get {
                return ResourceManager.GetString("_SiteNav_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.grapecity.com/en/aspnet-mvc.
        /// </summary>
        public static string _SiteNav_Text5 {
            get {
                return ResourceManager.GetString("_SiteNav_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://supportone.componentone.com/login.
        /// </summary>
        public static string _SiteNav_Text6 {
            get {
                return ResourceManager.GetString("_SiteNav_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.grapecity.com/en/pricing.
        /// </summary>
        public static string _SiteNav_Text7 {
            get {
                return ResourceManager.GetString("_SiteNav_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.grapecity.com/en/download/componentone-studio.
        /// </summary>
        public static string _SiteNav_Text8 {
            get {
                return ResourceManager.GetString("_SiteNav_Text8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Excel-Style editing:&lt;/b&gt;&lt;/br&gt;The &lt;b&gt;MultiRow&lt;/b&gt; has built-in support for Excel-like, fast, in-cell editing.&lt;/br&gt;There is no need to add extra columns with &apos;Edit&apos; buttons that switch&lt;/br&gt;between display and edit modes..
        /// </summary>
        public static string BatchEditing_Text0 {
            get {
                return ResourceManager.GetString("BatchEditing_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Users can start editing simply by typing into any cell. This is called &apos;quick-edit&apos; mode.&lt;/br&gt;In this mode, the cursor keys finish the editing and the grid moves the selection.&lt;/br&gt;They can also start editing by pressing F2 or by clicking a cell twice.&lt;/br&gt;This is called &apos;full-edit&apos; mode.&lt;/br&gt;In this mode, the cursor keys move the caret within the editor and the user must&lt;/br&gt;press the Enter, Tab, or Escape keys to finish editing..
        /// </summary>
        public static string BatchEditing_Text1 {
            get {
                return ResourceManager.GetString("BatchEditing_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows the BatchEditing mode for editing the data..
        /// </summary>
        public static string BatchEditing_Text10 {
            get {
                return ResourceManager.GetString("BatchEditing_Text10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update.
        /// </summary>
        public static string BatchEditing_Text11 {
            get {
                return ResourceManager.GetString("BatchEditing_Text11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating....
        /// </summary>
        public static string BatchEditing_Text12 {
            get {
                return ResourceManager.GetString("BatchEditing_Text12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No changes..
        /// </summary>
        public static string BatchEditing_Text13 {
            get {
                return ResourceManager.GetString("BatchEditing_Text13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Done..
        /// </summary>
        public static string BatchEditing_Text14 {
            get {
                return ResourceManager.GetString("BatchEditing_Text14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are two modes for editing the data..
        /// </summary>
        public static string BatchEditing_Text2 {
            get {
                return ResourceManager.GetString("BatchEditing_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows how to edit cell data with various ways..
        /// </summary>
        public static string BatchEditing_Text25 {
            get {
                return ResourceManager.GetString("BatchEditing_Text25", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Editing.
        /// </summary>
        public static string BatchEditing_Text26 {
            get {
                return ResourceManager.GetString("BatchEditing_Text26", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Excel-Style editing.
        /// </summary>
        public static string BatchEditing_Text27 {
            get {
                return ResourceManager.GetString("BatchEditing_Text27", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit Detail....
        /// </summary>
        public static string BatchEditing_Text28 {
            get {
                return ResourceManager.GetString("BatchEditing_Text28", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Popup editing.
        /// </summary>
        public static string BatchEditing_Text29 {
            get {
                return ResourceManager.GetString("BatchEditing_Text29", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this mode, the item updated or created will be commit to the server after the corresponding row finishes editing. The removed row will be commit to the server immediately..
        /// </summary>
        public static string BatchEditing_Text3 {
            get {
                return ResourceManager.GetString("BatchEditing_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline editing.
        /// </summary>
        public static string BatchEditing_Text30 {
            get {
                return ResourceManager.GetString("BatchEditing_Text30", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the user wants to update the data, the Update action Url should be provided. If he wants to add or remove the data, the Create or Delete action Url should be provided.&lt;/br&gt;And the user should edit the data in the corresponding action. It is default mode..
        /// </summary>
        public static string BatchEditing_Text4 {
            get {
                return ResourceManager.GetString("BatchEditing_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;MultiRow&lt;/b&gt; has in-built support for &lt;b&gt;BatchEditing&lt;/b&gt;, the user can update, create or remove multiple items and commit all changes to the data source once .&lt;/br&gt;The user can commit multiple modifications by sorting, paging or filtering the grid or simply on a button click..
        /// </summary>
        public static string BatchEditing_Text5 {
            get {
                return ResourceManager.GetString("BatchEditing_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;BatchEditing&lt;/b&gt; action Url should be provided in this mode..
        /// </summary>
        public static string BatchEditing_Text6 {
            get {
                return ResourceManager.GetString("BatchEditing_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Note:&lt;/b&gt; To disable data update during sort/filter/page operations, set the &lt;b&gt;DisableServerRead&lt;/b&gt; property of MultiRow&apos;s &lt;b&gt;ItemSource&lt;/b&gt; to True.&lt;/br&gt;This will enable client-side sorting, filtering, paging and data will only be submitted when the collectionView&apos;s &lt;b&gt;commi&lt;/b&gt;t method is explicitly called from client-side..
        /// </summary>
        public static string BatchEditing_Text7 {
            get {
                return ResourceManager.GetString("BatchEditing_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal.
        /// </summary>
        public static string BatchEditing_Text8 {
            get {
                return ResourceManager.GetString("BatchEditing_Text8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Batch.
        /// </summary>
        public static string BatchEditing_Text9 {
            get {
                return ResourceManager.GetString("BatchEditing_Text9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MultiRow control can collapse the column headers to a single line, showing only the group names rather than individual cells..
        /// </summary>
        public static string CollapsedHeaders_Text0 {
            get {
                return ResourceManager.GetString("CollapsedHeaders_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, the &lt;b&gt;MultiRow&lt;/b&gt; control creates column headers that span multiple rows and shows the header for each cell defined in the layoutDefinition..
        /// </summary>
        public static string CollapsedHeaders_Text1 {
            get {
                return ResourceManager.GetString("CollapsedHeaders_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These cell-specific column headers may be used to sort or filter the data as you would do in a conventional grid..
        /// </summary>
        public static string CollapsedHeaders_Text2 {
            get {
                return ResourceManager.GetString("CollapsedHeaders_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In some cases, you may want to collapse the column headers to a single line, showing only the group names rather than individual cells.&lt;/br&gt;This saves space at the expense of having individual cell headers. To collapse the column headers, set the &lt;b&gt;CollapsedHeaders&lt;/b&gt; property to true.&lt;/br&gt;In these scenarios, remember to set the &lt;b&gt;Header&lt;/b&gt; property on the groups in order to avoid empty column headers..
        /// </summary>
        public static string CollapsedHeaders_Text3 {
            get {
                return ResourceManager.GetString("CollapsedHeaders_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting the &lt;b&gt;CollapsedHeaders&lt;/b&gt; property to &lt;b&gt;null&lt;/b&gt; causes the grid to show all header information (groups and columns).&lt;/br&gt;In this case, the first row will show the group headers and the remaining rows will show the individual column headers..
        /// </summary>
        public static string CollapsedHeaders_Text4 {
            get {
                return ResourceManager.GetString("CollapsedHeaders_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows how you can customize the way to add rows or change the values in the cells of &lt;b&gt;MultiRow&lt;/b&gt; control..
        /// </summary>
        public static string CustomCells_Text0 {
            get {
                return ResourceManager.GetString("CustomCells_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample uses the &lt;b&gt;TemplateId&lt;/b&gt; property to specify the id of the template for the &quot;Trends&quot; column..
        /// </summary>
        public static string CustomCells_Text1 {
            get {
                return ResourceManager.GetString("CustomCells_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample also uses the &lt;b&gt;ItemFormatter&lt;/b&gt; property to customize the displaying of &quot;Rank&quot; column.&lt;/br&gt;In the ItemFormatter event handler, use the MultiRow&apos;s &lt;b&gt;getBindingColumn&lt;/b&gt; function to get the binding column..
        /// </summary>
        public static string CustomCells_Text2 {
            get {
                return ResourceManager.GetString("CustomCells_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;HeaderLayoutDefinition&lt;/b&gt; property defines the layout of the rows used to display the grid&apos;s column headers. The array contains a list of cell group objects similar to those used with the layoutDefinition property..
        /// </summary>
        public static string CustomColumnHeader_Text0 {
            get {
                return ResourceManager.GetString("CustomColumnHeader_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows how you can use custom editors to change the values in &lt;b&gt;MultiRow&lt;/b&gt; cells..
        /// </summary>
        public static string CustomEditors_Text0 {
            get {
                return ResourceManager.GetString("CustomEditors_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample uses the &lt;b&gt;EditTemplateId&lt;/b&gt; property to specify the id of the template for cell editor.&lt;/br&gt;When the user starts editing a cell, the editor will show and get the focus..
        /// </summary>
        public static string CustomEditors_Text1 {
            get {
                return ResourceManager.GetString("CustomEditors_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this sample, &quot;Amount2&quot; and &quot;Active&quot; use grid internal editor. You don&apos;t need do anything..
        /// </summary>
        public static string CustomEditors_Text10 {
            get {
                return ResourceManager.GetString("CustomEditors_Text10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use C1 Input controls which has &quot;Value&quot; or &quot;Text&quot; property..
        /// </summary>
        public static string CustomEditors_Text11 {
            get {
                return ResourceManager.GetString("CustomEditors_Text11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use other control or a C1 control which has NO &quot;Value&quot; or &quot;Text&quot; property..
        /// </summary>
        public static string CustomEditors_Text12 {
            get {
                return ResourceManager.GetString("CustomEditors_Text12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use grid&apos;s internal editor..
        /// </summary>
        public static string CustomEditors_Text13 {
            get {
                return ResourceManager.GetString("CustomEditors_Text13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New row at top:.
        /// </summary>
        public static string CustomEditors_Text14 {
            get {
                return ResourceManager.GetString("CustomEditors_Text14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample use the property &lt;b&gt;NewRowAtTop&lt;/b&gt; displaying as checkbox to enable adding new row at the top or bottom of the grid..
        /// </summary>
        public static string CustomEditors_Text15 {
            get {
                return ResourceManager.GetString("CustomEditors_Text15", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are three kinds of editors..
        /// </summary>
        public static string CustomEditors_Text2 {
            get {
                return ResourceManager.GetString("CustomEditors_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You only need set the &lt;b&gt;EditTemplate&lt;/b&gt; property of a cell..
        /// </summary>
        public static string CustomEditors_Text3 {
            get {
                return ResourceManager.GetString("CustomEditors_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the grid allows adding a new row, you need set the editor&apos;s &lt;b&gt;IsRequired&lt;/b&gt; to false.&lt;/br&gt;If you want the editor full with the whole cell, you can set the style width to &quot;100%&quot;..
        /// </summary>
        public static string CustomEditors_Text4 {
            get {
                return ResourceManager.GetString("CustomEditors_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this sample, &quot;Date&quot;, &quot;Time&quot;, &quot;Country&quot;, &quot;Amount&quot; and &quot;Color&quot; use C1 Input controls as the editors..
        /// </summary>
        public static string CustomEditors_Text5 {
            get {
                return ResourceManager.GetString("CustomEditors_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need listen the grid&apos;s &lt;b&gt;OnClientCellEditEnding&lt;/b&gt; event and set&lt;/br&gt;&lt;pre&gt;&lt;/br&gt;cellEditEndingEventArgs.cancel = true;&lt;/br&gt;&lt;/pre&gt;&lt;/br&gt;to apply your updating..
        /// </summary>
        public static string CustomEditors_Text6 {
            get {
                return ResourceManager.GetString("CustomEditors_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Then you need consider when to update the cell value and remove the editor from a grid in your application.&lt;/br&gt;For example, when the editor blurs, we need update the cell value and remove the editor..
        /// </summary>
        public static string CustomEditors_Text7 {
            get {
                return ResourceManager.GetString("CustomEditors_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this sample, the &quot;Product&quot; column uses &lt;input /&gt; as the editor..
        /// </summary>
        public static string CustomEditors_Text8 {
            get {
                return ResourceManager.GetString("CustomEditors_Text8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To get the binding column in the event handler, please use the MultiRow&apos;s &lt;b&gt;getBindingColumn&lt;/b&gt; function..
        /// </summary>
        public static string CustomEditors_Text9 {
            get {
                return ResourceManager.GetString("CustomEditors_Text9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data maps provide the grid with automatic look up capabilities. For example, you may want to display a customer name instead of his ID, or a color name instead of its RGB value.&lt;br /&gt;&lt;/br&gt;Columns with an associated data map can be sorted by the mapped display value instead of the binding value.&lt;br /&gt;&lt;/br&gt;Columns with an associated data map show drop-down buttons that can be used for quick editing. If you do not want to show the drop-down buttons, set the column&apos;s &lt;b&gt;ShowDropDown&lt;/b&gt; property to false..
        /// </summary>
        public static string DataMap_Text0 {
            get {
                return ResourceManager.GetString("DataMap_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string DataMap_Text1 {
            get {
                return ResourceManager.GetString("DataMap_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRow&lt;/b&gt; columns have a &lt;b&gt;DropDownCssClass&lt;/b&gt; property that can be used to&lt;/br&gt;style the drop-downs used to edit values in data-mapped columns..
        /// </summary>
        public static string DataMap_Text2 {
            get {
                return ResourceManager.GetString("DataMap_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To see the multi-column editor in action, click one of the drop-down buttons in the &quot;Color&quot; column,&lt;/br&gt;or select a cell in that column and press F4:.
        /// </summary>
        public static string DataMap_Text3 {
            get {
                return ResourceManager.GetString("DataMap_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Map.
        /// </summary>
        public static string DataMap_Text4 {
            get {
                return ResourceManager.GetString("DataMap_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-column Data Map.
        /// </summary>
        public static string DataMap_Text5 {
            get {
                return ResourceManager.GetString("DataMap_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows the data map feature which provides the MultiRow with automatic look up capabilities..
        /// </summary>
        public static string DataMap_Text6 {
            get {
                return ResourceManager.GetString("DataMap_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows what the &lt;b&gt;DisableServerRead&lt;/b&gt; property works for..
        /// </summary>
        public static string DisableServerRead_Text0 {
            get {
                return ResourceManager.GetString("DisableServerRead_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When it is set to True, all the items will be transferred to the client side. Sorting, paging or filtering will be done in the client side.&lt;/br&gt;And the text like &quot;Loading...&quot; is not shown for loading the data when the scrollbar scrolls.&lt;/br&gt;Otherwise, sorting, paging or filtering will be done in server side. And sometimes the &quot;Loading...&quot; text will be shown..
        /// </summary>
        public static string DisableServerRead_Text1 {
            get {
                return ResourceManager.GetString("DisableServerRead_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MultiRow without paging.
        /// </summary>
        public static string DisableServerRead_Text2 {
            get {
                return ResourceManager.GetString("DisableServerRead_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paging MultiRow which PageSize is set to 10.
        /// </summary>
        public static string DisableServerRead_Text3 {
            get {
                return ResourceManager.GetString("DisableServerRead_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRow&lt;/b&gt; has built-in support for Excel-like, fast, in-cell editing.&lt;/br&gt;There is no need to add extra columns with &apos;Edit&apos; buttons that switch&lt;/br&gt;between display and edit modes..
        /// </summary>
        public static string Editing_Text0 {
            get {
                return ResourceManager.GetString("Editing_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Users can start editing simply by typing into any cell. This is called &apos;quick-edit&apos; mode.&lt;/br&gt;In this mode, the cursor keys finish the editing and the grid moves the selection.&lt;/br&gt;They can also start editing by pressing F2 or by clicking a cell twice.&lt;/br&gt;This is called &apos;full-edit&apos; mode.&lt;/br&gt;In this mode, the cursor keys move the caret within the editor and the user must&lt;/br&gt;press the Enter, Tab, or Escape keys to finish editing..
        /// </summary>
        public static string Editing_Text1 {
            get {
                return ResourceManager.GetString("Editing_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To see this in action, select an item on the grid and click the &quot;Edit Detail&quot; button above.&lt;/br&gt;This will bring up a form where users can edit the data for the currently selected item..
        /// </summary>
        public static string Editing_Text10 {
            get {
                return ResourceManager.GetString("Editing_Text10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The detail form uses specialized input controls that take up more space but can make data&lt;/br&gt;entry easier in some cases. The form has &quot;OK&quot; and &quot;Cancel&quot; buttons that commit the changes&lt;/br&gt;or restore the original data. Both actions are accomplished with a single call to the&lt;/br&gt;&lt;b&gt;CollectionView&lt;/b&gt; used as a data source for the grid..
        /// </summary>
        public static string Editing_Text11 {
            get {
                return ResourceManager.GetString("Editing_Text11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If for some reason you don&apos;t like the Excel-style editing and prefer to add editing&lt;/br&gt;buttons to every row (typical of editable HTML tables), you can accomplish that&lt;/br&gt;using an &lt;b&gt;ItemFormatter&lt;/b&gt; and a few controller methods.&lt;/br&gt;To get the binding column in the ItemFormatter event handler, please use the MultiRow&apos;s&lt;/br&gt;&lt;b&gt;getBindingColumn&lt;/b&gt; function..
        /// </summary>
        public static string Editing_Text12 {
            get {
                return ResourceManager.GetString("Editing_Text12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The grid below demonstrates this approach. The buttons in the cells call&lt;/br&gt;methods in the controller to perform the required actions:.
        /// </summary>
        public static string Editing_Text13 {
            get {
                return ResourceManager.GetString("Editing_Text13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit Item.
        /// </summary>
        public static string Editing_Text14 {
            get {
                return ResourceManager.GetString("Editing_Text14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supplier ID.
        /// </summary>
        public static string Editing_Text15 {
            get {
                return ResourceManager.GetString("Editing_Text15", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Company Name.
        /// </summary>
        public static string Editing_Text16 {
            get {
                return ResourceManager.GetString("Editing_Text16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contact Name.
        /// </summary>
        public static string Editing_Text17 {
            get {
                return ResourceManager.GetString("Editing_Text17", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contact Title.
        /// </summary>
        public static string Editing_Text18 {
            get {
                return ResourceManager.GetString("Editing_Text18", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Country.
        /// </summary>
        public static string Editing_Text19 {
            get {
                return ResourceManager.GetString("Editing_Text19", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can disable editing at the grid or column levels using the &lt;b&gt;isReadOnly&lt;/b&gt;&lt;/br&gt;property of the grid or column objects..
        /// </summary>
        public static string Editing_Text2 {
            get {
                return ResourceManager.GetString("Editing_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Region.
        /// </summary>
        public static string Editing_Text20 {
            get {
                return ResourceManager.GetString("Editing_Text20", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to City.
        /// </summary>
        public static string Editing_Text21 {
            get {
                return ResourceManager.GetString("Editing_Text21", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Address.
        /// </summary>
        public static string Editing_Text22 {
            get {
                return ResourceManager.GetString("Editing_Text22", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OK.
        /// </summary>
        public static string Editing_Text23 {
            get {
                return ResourceManager.GetString("Editing_Text23", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Editing_Text24 {
            get {
                return ResourceManager.GetString("Editing_Text24", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows how to edit cell data with various ways..
        /// </summary>
        public static string Editing_Text25 {
            get {
                return ResourceManager.GetString("Editing_Text25", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Excel-Style editing.
        /// </summary>
        public static string Editing_Text26 {
            get {
                return ResourceManager.GetString("Editing_Text26", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Editing.
        /// </summary>
        public static string Editing_Text27 {
            get {
                return ResourceManager.GetString("Editing_Text27", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit Detail....
        /// </summary>
        public static string Editing_Text28 {
            get {
                return ResourceManager.GetString("Editing_Text28", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Popup editing.
        /// </summary>
        public static string Editing_Text29 {
            get {
                return ResourceManager.GetString("Editing_Text29", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Mobile Devices:&lt;/b&gt;&lt;/br&gt;Mobile devices use the double-click event to zoom in and out, and do not show&lt;/br&gt;a keyboard by default. To start editing a cell on mobile devices, simply click&lt;/br&gt;a cell to select it, then click it again to indicate you want to start editing..
        /// </summary>
        public static string Editing_Text3 {
            get {
                return ResourceManager.GetString("Editing_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline editing.
        /// </summary>
        public static string Editing_Text30 {
            get {
                return ResourceManager.GetString("Editing_Text30", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Automatic type Validation/Coercion:&lt;/b&gt;&lt;/br&gt;If the user types anything that is invalid for the column (e.g. &quot;hello&quot; for a&lt;/br&gt;numeric or date column), the edits won&apos;t be applied and the cell will keep its&lt;/br&gt;original value. Dates and times are parsed using the format assigned to the&lt;/br&gt;column..
        /// </summary>
        public static string Editing_Text4 {
            get {
                return ResourceManager.GetString("Editing_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Checkboxes:&lt;/b&gt;&lt;/br&gt;By default (and unlike Excel), Boolean values are shown as checkboxes. Users&lt;/br&gt;can change the checkbox values by clicking or by pressing the space bar.&lt;/br&gt;Checkboxes are easier to read and to edit than fields containing &quot;TRUE&quot; or&lt;/br&gt;&quot;FALSE&quot; strings..
        /// </summary>
        public static string Editing_Text5 {
            get {
                return ResourceManager.GetString("Editing_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Editing Mode:&lt;/b&gt;&lt;/br&gt;There are two modes for updating the data.&lt;/br&gt;By default, the update operation will be commit to the server once finishing editing.&lt;/br&gt;If the user wants to commit the update operation to datasource server, the Update, Delete or Create action url should be provided.&lt;/br&gt;And the corresponding codes used to update the datasource should be written in the corresponding action.&lt;/br&gt;The other mode is called &lt;b&gt;BatchEdit&lt;/b&gt;. The user can update, create or remove multiple items.&lt;/br&gt;Once  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Editing_Text6 {
            get {
                return ResourceManager.GetString("Editing_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;input type=&quot;button&quot; value=&quot;Read More&quot; class=&quot;btn collapse in&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.collapsed-content, .btn.collapse&quot; /&gt;.
        /// </summary>
        public static string Editing_Text7 {
            get {
                return ResourceManager.GetString("Editing_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Here is a typical editable MultiRow:.
        /// </summary>
        public static string Editing_Text8 {
            get {
                return ResourceManager.GetString("Editing_Text8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Popup editing keeps the native editing enabled for quick Excel-like data entry, and adds&lt;/br&gt;an &quot;Edit Detail&quot; button to invoke a form where the user can edit the item details..
        /// </summary>
        public static string Editing_Text9 {
            get {
                return ResourceManager.GetString("Editing_Text9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error..
        /// </summary>
        public static string Error_Text0 {
            get {
                return ResourceManager.GetString("Error_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while processing your request..
        /// </summary>
        public static string Error_Text1 {
            get {
                return ResourceManager.GetString("Error_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample demonstrates how to export &lt;b&gt;MultiRow&lt;/b&gt; content to an Excel xlsx file..
        /// </summary>
        public static string ExcelExport_Text0 {
            get {
                return ResourceManager.GetString("ExcelExport_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To export &lt;b&gt;MultiRow&lt;/b&gt; content, pass the &lt;b&gt;MultiRow&lt;/b&gt; instance to the &lt;b&gt;FlexGridXlsxConverter.save&lt;/b&gt; method.&lt;/br&gt;This generates xlsx file content, which can be saved to a local file or sent to a server..
        /// </summary>
        public static string ExcelExport_Text1 {
            get {
                return ResourceManager.GetString("ExcelExport_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Note:&lt;/b&gt; You should add &lt;b&gt;jszip.js&lt;/b&gt; library by yourself and the CDN link is: &lt;a href=&quot;http://cdnjs.cloudflare.com/ajax/libs/jszip/2.2.1/jszip.min.js&quot;&gt;http://cdnjs.cloudflare.com/ajax/libs/jszip/2.2.1/jszip.min.js&lt;/a&gt;.
        /// </summary>
        public static string ExcelExport_Text2 {
            get {
                return ResourceManager.GetString("ExcelExport_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export.
        /// </summary>
        public static string ExcelExport_Text3 {
            get {
                return ResourceManager.GetString("ExcelExport_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to use filtering in MultiRow..
        /// </summary>
        public static string Filter_Text0 {
            get {
                return ResourceManager.GetString("Filter_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the MultiRow control&apos;s frozen cells features..
        /// </summary>
        public static string Freezing_Text0 {
            get {
                return ResourceManager.GetString("Freezing_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRow&lt;/b&gt; control allows you to freeze rows and columns so they remain in view as the user scrolls the grid.&lt;/br&gt;Frozen cells can be edited and selected as regular cells, exactly as in Excel and in the FlexGrid control..
        /// </summary>
        public static string Freezing_Text1 {
            get {
                return ResourceManager.GetString("Freezing_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ~/Content/css/gcicons.css.
        /// </summary>
        public static string GcIconsCssPath {
            get {
                return ResourceManager.GetString("GcIconsCssPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows grouping support in the &lt;b&gt;MultiRow&lt;/b&gt;. Most of the work is done by the CollectionView class used as a data source for the grid.&lt;/br&gt;You can config group description by &lt;b&gt;GroupBy&lt;/b&gt; method in view.&lt;/br&gt;To add grouping by Javascript, add one or more &lt;b&gt;GroupDescription&lt;/b&gt; objects to the &lt;b&gt;CollectionView.GroupDescriptions&lt;/b&gt; property.&lt;/br&gt;And ensure that the MultiRow&apos;s &lt;b&gt;ShowGroups&lt;/b&gt; property is set to true..
        /// </summary>
        public static string Grouping_Text0 {
            get {
                return ResourceManager.GetString("Grouping_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can customize the text that is displayed in group header rows using the MultiRow&apos;s &lt;b&gt;GroupHeaderFormat&lt;/b&gt; property.&lt;/br&gt;By default, this displays the name of the group, for example, State, followed by the current group and the number of items in the group..
        /// </summary>
        public static string Grouping_Text1 {
            get {
                return ResourceManager.GetString("Grouping_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collapse All.
        /// </summary>
        public static string Grouping_Text2 {
            get {
                return ResourceManager.GetString("Grouping_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expand All.
        /// </summary>
        public static string Grouping_Text3 {
            get {
                return ResourceManager.GetString("Grouping_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRowGroupHeaders&lt;/b&gt; property determines whether group headers should have multiple rows instead of a single header row, which is useful when you want to display aggregate values in the group headers..
        /// </summary>
        public static string Grouping_Text4 {
            get {
                return ResourceManager.GetString("Grouping_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GroupPanel feature allows you to add a drag-drop grouping UI to any MultiRow control..
        /// </summary>
        public static string GroupPanel_Text0 {
            get {
                return ResourceManager.GetString("GroupPanel_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drag columns here to create Groups.
        /// </summary>
        public static string GroupPanel_Text1 {
            get {
                return ResourceManager.GetString("GroupPanel_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drag columns here....
        /// </summary>
        public static string GroupPanel_Text2 {
            get {
                return ResourceManager.GetString("GroupPanel_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Traditional grid view, with one row per record.The user must scroll horizontally to see the whole record..
        /// </summary>
        public static string Index_Text0 {
            get {
                return ResourceManager.GetString("Index_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view uses two rows per record. The layout is divided into three groups: order, customer, and shipper..
        /// </summary>
        public static string Index_Text1 {
            get {
                return ResourceManager.GetString("Index_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The group spans three grid columns. It contains six cells with different spans.&lt;/br&gt;When generating the layout, the grid fits as many cells as possible in each row, and wraps to the next row when the group span is reached.&lt;/br&gt;The last cell in each row is automatically expanded to fill &lt;b&gt;Colspan&lt;/b&gt; of the group.&lt;/br&gt;The process is similar to wrapping of text to create a paragraph..
        /// </summary>
        public static string Index_Text10 {
            get {
                return ResourceManager.GetString("Index_Text10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same process is applied to every group in the &lt;b&gt;LayoutDefinition&lt;/b&gt; object..
        /// </summary>
        public static string Index_Text11 {
            get {
                return ResourceManager.GetString("Index_Text11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LayoutDefinition.
        /// </summary>
        public static string Index_Text12 {
            get {
                return ResourceManager.GetString("Index_Text12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ~/Content/images/cellGroup.png.
        /// </summary>
        public static string Index_Text13 {
            get {
                return ResourceManager.GetString("Index_Text13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view uses three rows per record. The layout is divided into three groups: order, customer, and shipper..
        /// </summary>
        public static string Index_Text2 {
            get {
                return ResourceManager.GetString("Index_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MultiRow control extends conventional grid layouts by using multiple rows to represent each data item..
        /// </summary>
        public static string Index_Text3 {
            get {
                return ResourceManager.GetString("Index_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRow&lt;/b&gt; control extends conventional grid layouts by using multiple rows to represent each data item..
        /// </summary>
        public static string Index_Text4 {
            get {
                return ResourceManager.GetString("Index_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRow&lt;/b&gt; control allows users to see and edit data in a tabular form, just like other conventional grids.&lt;/br&gt;But, &lt;b&gt;MultiRow&lt;/b&gt; is different from these grids in a way that it allows you to bind each data item to multiple rows,&lt;/br&gt;creating form-like interfaces that can display a large number of columns with minimal horizontal scrolling..
        /// </summary>
        public static string Index_Text5 {
            get {
                return ResourceManager.GetString("Index_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRow&lt;/b&gt; control extends the &lt;b&gt;FlexGrid&lt;/b&gt; control, so if you know how to use &lt;b&gt;FlexGrid&lt;/b&gt;, you will be able to use &lt;b&gt;MultiRow&lt;/b&gt; in no time.&lt;/br&gt;The main new property is &lt;b&gt;LayoutDefinition&lt;/b&gt;, which takes an object that describes the layout of the grid rows and cells..
        /// </summary>
        public static string Index_Text6 {
            get {
                return ResourceManager.GetString("Index_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;MultiRow&lt;/b&gt; control is not a simple replacement for conventional grids; it is a specialized tool that fits some particular scenarios really well..
        /// </summary>
        public static string Index_Text7 {
            get {
                return ResourceManager.GetString("Index_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;b&gt;LayoutDefinition&lt;/b&gt; property specifies the layout of the cells in the grid.&lt;/br&gt;It contains a list of cell group objects. Each cell group specifies how many columns the group should span, and the cells that make up each group..
        /// </summary>
        public static string Index_Text8 {
            get {
                return ResourceManager.GetString("Index_Text8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image below illustrates how a cell group is interpreted and turned into a grid layout:&lt;/br&gt;.
        /// </summary>
        public static string Index_Text9 {
            get {
                return ResourceManager.GetString("Index_Text9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows how to implement paged views with the &lt;b&gt;MultiRow&lt;/b&gt;.&lt;/br&gt;All the work is done by the &lt;b&gt;CollectionView&lt;/b&gt; class used as a data source for the grid.&lt;/br&gt;To enable paging, set the &lt;b&gt;PageSize&lt;/b&gt; property of &lt;b&gt;MultiRow&lt;/b&gt; or &lt;b&gt;CollectionViewService&lt;/b&gt;.&lt;/br&gt;To switch pages, use the &lt;b&gt;Pager&lt;/b&gt; control and set &lt;b&gt;Pager&lt;/b&gt;.&lt;b&gt;Owner&lt;/b&gt; property to the id of &lt;b&gt;MultiRow&lt;/b&gt; or &lt;b&gt;CollectionViewService&lt;/b&gt;..
        /// </summary>
        public static string Paging_Text0 {
            get {
                return ResourceManager.GetString("Paging_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example, the paging happens server-side. This is because &lt;b&gt;CollectionView&lt;/b&gt; here acts like a service and synchronizes&lt;/br&gt;with server data. The &lt;b&gt;CollectionView&lt;/b&gt; internally does an ajax call to fetch next set of data. Refer @Html.ActionLink(&quot;Disable Server Reading&quot;, &quot;DisableServerRead&quot;) sample for client-side paging..
        /// </summary>
        public static string Paging_Text1 {
            get {
                return ResourceManager.GetString("Paging_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;Note:&lt;/b&gt; That the paging UI is implemented outside of the grid. This gives you complete&lt;/br&gt;control over the appearance and functionality of the paging mechanism.&lt;/br&gt;To customize the &lt;b&gt;Pager&lt;/b&gt; by Javascript, please refer the client &lt;b&gt;CollectionView&lt;/b&gt; class..
        /// </summary>
        public static string Paging_Text2 {
            get {
                return ResourceManager.GetString("Paging_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use the &lt;b&gt;FlexGridPdfConverter&lt;/b&gt;, a &lt;a href=&quot;https://github.com/devongovett/pdfkit&quot;&gt;PDFKit&lt;/a&gt;-based JavaScript library,&lt;/br&gt;to export &lt;b&gt;MultiRow&lt;/b&gt; to PDF (Portable Document Format) without using any server-side code..
        /// </summary>
        public static string PdfExport_Text0 {
            get {
                return ResourceManager.GetString("PdfExport_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To export a &lt;b&gt;MultiRow&lt;/b&gt;, you need to use the &lt;b&gt;FlexGridPdfConverter.export&lt;/b&gt; function that takes the following arguments:.
        /// </summary>
        public static string PdfExport_Text1 {
            get {
                return ResourceManager.GetString("PdfExport_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;exportMode&lt;/b&gt;: Determines which part of the MultiRow should be exported (all of the data or only the current selection)..
        /// </summary>
        public static string PdfExport_Text10 {
            get {
                return ResourceManager.GetString("PdfExport_Text10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to embeddedFonts: Provides information to the export library, about various custom fonts to be embedded, such as URL, name, style, weight..
        /// </summary>
        public static string PdfExport_Text11 {
            get {
                return ResourceManager.GetString("PdfExport_Text11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;styles&lt;/b&gt;: It is used to set up the style for the grid elements and link them with the embedded fonts..
        /// </summary>
        public static string PdfExport_Text12 {
            get {
                return ResourceManager.GetString("PdfExport_Text12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export Settings:.
        /// </summary>
        public static string PdfExport_Text13 {
            get {
                return ResourceManager.GetString("PdfExport_Text13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use the FlexGridPdfConverter, a PDFKit-based JavaScript library, to export MultiRow to PDF (Portable Document Format) without using any server-side code..
        /// </summary>
        public static string PdfExport_Text14 {
            get {
                return ResourceManager.GetString("PdfExport_Text14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embed Fonts.
        /// </summary>
        public static string PdfExport_Text15 {
            get {
                return ResourceManager.GetString("PdfExport_Text15", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export.
        /// </summary>
        public static string PdfExport_Text16 {
            get {
                return ResourceManager.GetString("PdfExport_Text16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this sample, you can change the following export settings using the menus below:.
        /// </summary>
        public static string PdfExport_Text2 {
            get {
                return ResourceManager.GetString("PdfExport_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this sample, &lt;b&gt;MultiRow&lt;/b&gt; uses font &lt;a href=&quot;https://github.com/mozilla/Fira&quot;&gt;Fira&lt;/a&gt; and two typefaces, &lt;b&gt;FiraSans-Regular.ttf&lt;/b&gt; and &lt;b&gt;FiraSans-Bold.ttf&lt;/b&gt;.&lt;/br&gt;The FiraSans-Bold.ttf (boldface) typeface is used to display the header cells, and the FiraSans-Regular.ttf typeface is used for rest of the content..
        /// </summary>
        public static string PdfExport_Text3 {
            get {
                return ResourceManager.GetString("PdfExport_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To embed the fonts into the PDF, the following export settings are used:.
        /// </summary>
        public static string PdfExport_Text4 {
            get {
                return ResourceManager.GetString("PdfExport_Text4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A MultiRow instance..
        /// </summary>
        public static string PdfExport_Text5 {
            get {
                return ResourceManager.GetString("PdfExport_Text5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the file to export..
        /// </summary>
        public static string PdfExport_Text6 {
            get {
                return ResourceManager.GetString("PdfExport_Text6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export settings..
        /// </summary>
        public static string PdfExport_Text7 {
            get {
                return ResourceManager.GetString("PdfExport_Text7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;scaleMode&lt;/b&gt;: Determines how the MultiRow content should be scaled in order to fit the page..
        /// </summary>
        public static string PdfExport_Text8 {
            get {
                return ResourceManager.GetString("PdfExport_Text8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;orientation&lt;/b&gt;: Determines the orientation of pages..
        /// </summary>
        public static string PdfExport_Text9 {
            get {
                return ResourceManager.GetString("PdfExport_Text9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example shows how you can bind MultiRow with the data from some Action..
        /// </summary>
        public static string RemoteBind_Text0 {
            get {
                return ResourceManager.GetString("RemoteBind_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The layout is divided into three groups: customer, order, and shipper. Customer is a row header group.
        ///        Setting the &lt;b&gt;IsRowHeader&lt;/b&gt; property to true automatically sets the cell&apos;s &lt;b&gt;isReadOnly&lt;/b&gt; property to true (headers cannot be edited),
        ///        adds a &apos;wj-header&apos; style to the cell&apos;s &lt;b&gt;cssClass&lt;/b&gt; property (so the cells are styled as headers),
        ///        and sets the cell&apos;s &lt;b&gt;cellTemplate&lt;/b&gt; property to its &lt;b&gt;header&lt;/b&gt; value (so the cell shows the header as an unbound string).
        ///        Y [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RowHeader_Description_Text0 {
            get {
                return ResourceManager.GetString("RowHeader_Description_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsRowHeader property of the cell groups allows you to create groups to be displayed as row header cells..
        /// </summary>
        public static string RowHeader_Summary_Text0 {
            get {
                return ResourceManager.GetString("RowHeader_Summary_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorting Field :.
        /// </summary>
        public static string Sorting_Text0 {
            get {
                return ResourceManager.GetString("Sorting_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorting Order :.
        /// </summary>
        public static string Sorting_Text1 {
            get {
                return ResourceManager.GetString("Sorting_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This samples shows the sort features of the MultiRow control..
        /// </summary>
        public static string Sorting_Text2 {
            get {
                return ResourceManager.GetString("Sorting_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this sample, you can sort the collection based on the corresponding field value chosen in the first list. 
        ///You can also specify the sorting order in the second list..
        /// </summary>
        public static string Sorting_Text3 {
            get {
                return ResourceManager.GetString("Sorting_Text3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example shows how you can use built-in class names in CSS rules to customize the appearance of the record and group delimiters..
        /// </summary>
        public static string Styling_Text0 {
            get {
                return ResourceManager.GetString("Styling_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In most of the applications, you would want to show where each record and group starts or ends.&lt;/br&gt;The &lt;b&gt;MultiRow&lt;/b&gt; control enables this by adding CSS class names to cell elements in the first and last row/column of each group.&lt;/br&gt;The class names are wj-record-start, wj-record-end, wj-group-start, and wj-group-end..
        /// </summary>
        public static string Styling_Text1 {
            get {
                return ResourceManager.GetString("Styling_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This example shows how you can use these class names in CSS rules to customize the appearance of the record and group delimiters.&lt;/br&gt;It also shows how you can use the standard &lt;b&gt;CssClass&lt;/b&gt; property to customize the appearance of specific cells within groups..
        /// </summary>
        public static string Styling_Text2 {
            get {
                return ResourceManager.GetString("Styling_Text2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows the basic usage of the unobtrusive validation..
        /// </summary>
        public static string UnobtrusiveValidation_Text0 {
            get {
                return ResourceManager.GetString("UnobtrusiveValidation_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The columns have the following validations:&lt;/br&gt;&lt;ul&gt;&lt;/br&gt;&lt;li&gt;&lt;b&gt;Name:&lt;/b&gt; Required. Alphanumeric and contains 4 to 10 characters.&lt;/li&gt;&lt;/br&gt;&lt;li&gt;&lt;b&gt;Industry:&lt;/b&gt; Required.&lt;/li&gt;&lt;/br&gt;&lt;li&gt;&lt;b&gt;Country:&lt;/b&gt; Required.&lt;/li&gt;&lt;/br&gt;&lt;li&gt;&lt;b&gt;Phone:&lt;/b&gt; Required. 8 to 11 characters.&lt;/li&gt;&lt;/br&gt;&lt;li&gt;&lt;b&gt;Email:&lt;/b&gt; Required. Valid e-mail address.&lt;/li&gt;&lt;/br&gt;&lt;li&gt;&lt;b&gt;Birthdate:&lt;/b&gt; Required.&lt;/li&gt;&lt;/br&gt;&lt;/ul&gt;.
        /// </summary>
        public static string UnobtrusiveValidation_Text1 {
            get {
                return ResourceManager.GetString("UnobtrusiveValidation_Text1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows how to make grid work in virtual scrolling mode..
        /// </summary>
        public static string VirtualScrolling_Text0 {
            get {
                return ResourceManager.GetString("VirtualScrolling_Text0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To enable this functionality, the &lt;b&gt;DisableServerRead&lt;/b&gt; property should be false(default).&lt;/br&gt;Then the &lt;b&gt;InitialItemsCount&lt;/b&gt; property should be set a number which is greater than 0..
        /// </summary>
        public static string VirtualScrolling_Text1 {
            get {
                return ResourceManager.GetString("VirtualScrolling_Text1", resourceCulture);
            }
        }
    }
}
