<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccordionPane_Text0" xml:space="preserve">
    <value>AccordionPane.IsCollapsedプロパティを使用すると、ペインを折りたたまれているかどうかを設定できます。</value>
    <comment>The AccordionPane.IsCollapsed property allows you to set a pane as collapsed or not.</comment>
  </data>
  <data name="AccordionPane_Text1" xml:space="preserve">
    <value>このサンプルは、AccordionコントロールのペインのIsCollapsedプロパティを使用する方法を示します。</value>
    <comment>This sample demonstrates the usage of IsCollapsed property of Pane for the Accordion control.</comment>
  </data>
  <data name="AccordionPane_Text2" xml:space="preserve">
    <value>1番目のペインは、IsCollapsedプロパティがtrueになるように構成されています。 一方、2番目のペインはfalseに設定されているため、展開されたペインになります。</value>
    <comment>The first Pane is configured to have the IsCollapsed property as true meanwhile the second is set to false so it is an expanded pane.</comment>
  </data>
  <data name="AccordionPane_Text3" xml:space="preserve">
    <value>ペインを折りたたむことができます</value>
    <comment>Can collapse pane</comment>
  </data>
  <data name="Index_Pane_Text0" xml:space="preserve">
    <value>アコーディオンのプロパティを変更します。</value>
    <comment>Change the properties of this Accordion.</comment>
  </data>
  <data name="Index_Pane_Text1" xml:space="preserve">
    <value>ヘッダーにアイコンを表示します。</value>
    <comment>Show icon in the pane headers</comment>
  </data>
  <data name="Index_Pane_Text2" xml:space="preserve">
    <value>矢印キーでパネルを選択したときに自動的に展開します。</value>
    <comment>Expand panes when selecting with the keyboard</comment>
  </data>
  <data name="Index_Pane_Text3" xml:space="preserve">
    <value>パネルの展開／折りたたみをアニメーション表示します。</value>
    <comment>Animate pane collapse/expand</comment>
  </data>
  <data name="Index_Pane_Text4" xml:space="preserve">
    <value>すべてのパネルを折りたためるようにします。</value>
    <comment>Can collapse all panes</comment>
  </data>
  <data name="Index_Pane_Text5" xml:space="preserve">
    <value>一度に複数のパネルを展開できるようにします。</value>
    <comment>Can expand multiple panes</comment>
  </data>
  <data name="Index_Text0" xml:space="preserve">
    <value>Accordion コントロールを使用すると、コンテンツを折りたたみ可能なパネルに整理できます。</value>
    <comment>The Accordion control allows you to organize content into collapsible panes.</comment>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>このサンプルは、Accordion コントロールの使用法と主なプロパティを示しています。</value>
    <comment>This sample demonstrates the usage and main properties of the Accordion control.</comment>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>"最初のパネルには、Accordionコントロールに関するいくつかの機能が表示されます。これらの設定を変更して、アコーディオンの動作をカスタマイズできます。&lt;br /&gt;
残りのパネルは、アコーディオンの使用方法を説明するためののコンテンツの例を示します。"</value>
    <comment>The first pane show some feature settings of the Accordion control which you can try changing them to know how the Accordion works. &lt;br /&gt;
The remaing panes just show example contents for the Accordion demonstration.</comment>
  </data>
</root>